# Use a Python image with uv pre-installed
FROM ghcr.io/astral-sh/uv:python3.13-alpine as builder

# Install the project into `/app`
WORKDIR /app



RUN apk add --no-cache \
    cmake \
    make \
    gcc \
    g++ \
    musl-dev \
    linux-headers \
    git \
    bash \
    libstdc++ \
    apache-arrow \
    apache-arrow-dev

# Enable bytecode compilation
ENV UV_COMPILE_BYTECODE=1

# Copy from the cache instead of linking since it's a mounted volume
ENV UV_LINK_MODE=copy

# Install the project's dependencies using the lockfile and settings
# RUN --mount=type=cache,target=/root/.cache/uv \
#     --mount=type=bind,source=data_prep/uv.lock,target=uv.lock \
#     --mount=type=bind,source=data_prep/pyproject.toml,target=pyproject.toml \
#     uv sync --frozen --no-install-project --no-dev

COPY data_prep/pyproject.toml data_prep/uv.lock /app/
RUN uv sync --frozen --no-install-project --no-dev

# arrow version is 1801
FROM ghcr.io/astral-sh/uv:python3.13-alpine as runtime

RUN apk add --no-cache \
    libstdc++ \
    apache-arrow \
    bash

COPY --from=builder /app/.venv /app/.venv

# Then, add the rest of the project source code and install it
# Installing separately from its dependencies allows optimal layer caching
# ADD . /app
COPY data_prep/ /app/
# needs to be able to read the dorker comp file for the creds used to spin up
# the local container
COPY docker-compose.yml /app/


# RUN --mount=type=cache,target=/root/.cache/uv \
#     uv sync --frozen --no-dev

# Place executables in the environment at the front of the path
ENV PATH="/app/.venv/bin:$PATH"

# Reset the entrypoint, don't invoke `uv`
RUN python --version
RUN ls -la
ENTRYPOINT []

# Run the FastAPI application by default
# Uses `fastapi dev` to enable hot-reloading when the `watch` sync occurs
# Uses `--host 0.0.0.0` to allow access from outside the container
# CMD ["fastapi", "dev", "--host", "0.0.0.0", "src/uv_docker_example"]