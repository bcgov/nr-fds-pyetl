
x-var:
  - &POSTGRES_USER
    postgres
  - &POSTGRES_PASSWORD
    default
  - &POSTGRES_DATABASE
    spar
  - &POSTGRES_HOST
    postgres
  - &POSTGRES_PORT
    5432
  - &POSTGRES_SCHEMA
    spar
  - &POSTGRES_FLYWAY_URL_POSTGRES
    jdbc:postgresql://postgres:5432/spar
  - &ORACLE_USER
    THE
  - &ORACLE_PASSWORD
    default
  - &ORACLE_DATABASE
    DBDOCK_01
  - &ORACLE_HOST
    oracle
  - &ORACLE_PORT
    1521
  - &ORACLE_FLYWAY_URL
    jdbc:oracle:thin:@//oracle:1521/DBDOCK_01



x-postgres-vars: &postgres-vars
  POSTGRES_DB: *POSTGRES_DATABASE
  POSTGRES_HOST: *POSTGRES_HOST
  POSTGRES_USER: *POSTGRES_USER
  POSTGRES_PASSWORD: *POSTGRES_PASSWORD
  POSTGRES_PORT: *POSTGRES_PORT
  FLYWAY_URL_POSTGRES: *POSTGRES_FLYWAY_URL_POSTGRES
  #FLYWAY_URL_POSTGRES: jdbc:postgresql://postgres:5432/spar

x-oracle-vars: &oracle-vars
  ORACLE_DATABASE: *ORACLE_DATABASE
  ORACLE_PASSWORD: *ORACLE_PASSWORD
  ORACLE_HOST: *ORACLE_HOST
  APP_USER: *ORACLE_USER
  APP_USER_PASSWORD: *ORACLE_PASSWORD
  # used by the sync process
  ORACLE_SYNC_PASSWORD: *ORACLE_PASSWORD
  ORACLE_SYNC_USER: *ORACLE_USER
  FLYWAY_URL: *ORACLE_FLYWAY_URL

services:
  postgres:
    #image: postgis/postgis:15-master
    image: postgis/postgis:17-3.5-alpine
    container_name: postgres
    environment:
      <<: *postgres-vars
    volumes:
      # - ./migrations_spar/init.sql:/initdb/init.sql
      - /var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", postgres]
    ports: ["5432:5432"]

  postgres-getmigrations:
    image: alpine:3.14
    container_name: postgres-getmigrations
    volumes:
      - "postgres-migrations-volume:/flyway"
      - "./getmigrations.sh:/getmigrations.sh"
    command: sh ./getmigrations.sh
    # command: sleep 10000
    depends_on:
        postgres:
          condition: service_healthy

  # used to verify that the get migrations worked
  postgres-getmig-test:
    image: alpine:3.14
    container_name: postgres-getmig-test
    volumes:
      - "postgres-migrations-volume:/flyway:ro"
      - "./getmigrations.sh:/getmigrations.sh"
    command: sleep 10000
    depends_on:
        postgres-getmigrations:
          condition: service_completed_successfully

  postgres-migrations:
    image: flyway/flyway:10-alpine
    container_name: postgres-migrations
    command: info migrate info
    volumes:
      # this is the migrations from spar... the one to use moving forward
      - "postgres-migrations-volume:/flyway:ro"
      #- "./migrations_spar/sql:/flyway/sql:ro"
    environment:
      <<: [*postgres-vars]
      FLYWAY_URL: *POSTGRES_FLYWAY_URL_POSTGRES
      FLYWAY_USER: *POSTGRES_USER
      FLYWAY_PASSWORD: *POSTGRES_PASSWORD
      FLYWAY_BASELINE_ON_MIGRATE: true
      FLYWAY_DEFAULT_SCHEMA: *POSTGRES_SCHEMA
    depends_on:
      postgres-getmigrations:
        condition: service_completed_successfully

  postgres-data-load:
    image: python:3.13.0-slim-bookworm
    container_name: postgres-data-load
    entrypoint: ["/application/docker_run_SPAR_TEST.sh"]
    working_dir: /application
    volumes:
      - "./data_prep:/application"
      - "./poetry.lock:/application/poetry.lock"
      - "./pyproject.toml:/application/pyproject.toml"
      - "./docker-compose.yml:/application/docker-compose.yml"
      - "./data:/application/data"
    env_file:
      - ".env"
    environment:
      <<: [*postgres-vars]
    depends_on:
      postgres-migrations:
        condition: service_completed_successfully

  # Name of the Docker Compose service
  oracle:
    # Docker Hub image (feel free to change the tag "latest" to any other available one)
    image: gvenzl/oracle-free:latest
    # Forward Oracle port to localhost
    container_name: oracle
    ports:
      - "1521:1521"
    # Provide passwords and other environment variables to the container
    environment:
      <<: *oracle-vars
    # Customize healthcheck script options for startup
    healthcheck:
      test: ["CMD", "/opt/oracle/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 10
    # Mount a local SQL file to initialize your schema at startup
    volumes:
      - oracle-data:/opt/oracle/oradata  # Mount the volume to the Oracle data directory
      - ./oradb/db_init/db_init.sql:/container-entrypoint-initdb.d/my-init.sql:ro

  oracle-migrations:
    image: flyway/flyway:10-alpine
    container_name: oracle-migrations
    command: info migrate info
    volumes:
      - "./migrations_ora/sql:/flyway/sql:ro"
    environment:
      <<: *oracle-vars
      FLYWAY_USER: *ORACLE_USER
      FLYWAY_PASSWORD: *ORACLE_PASSWORD
      FLYWAY_DEFAULT_SCHEMA: *ORACLE_USER
      FLYWAY_BASELINE_ON_MIGRATE: true
    depends_on:
      oracle:
        condition: service_healthy

  oracle-data-load:
    image: python:3.13-slim-bookworm
    container_name: oracle-data-load
    # "CMD",
    entrypoint: [ "/application/docker_run_ORA_TEST.sh"]
    working_dir: /application
    volumes:
      - "./data_prep:/application"
      - "./poetry.lock:/application/poetry.lock"
      - "./pyproject.toml:/application/pyproject.toml"
      - "./docker-compose.yml:/application/docker-compose.yml"
      - "./data:/application/data"
    environment:
      <<: [*oracle-vars]
    env_file:
      - ".env"
    depends_on:
      oracle-migrations:
        condition: service_completed_successfully

  # debug service, useful for understanding how environment variables work
  etl:
    container_name: etl
    image: functions/alpine:health
    command: ["/bin/sh", "-c", "echo Postgres and Oracle envs now live!"]
    depends_on:
      oracle-data-load:
        condition: service_completed_successfully
      postgres-data-load:
        condition: service_completed_successfully

  sync:
    container_name: sync
    build:
      context: sync
      dockerfile: Dockerfile.slim
    environment:
      <<: [*postgres-vars, *oracle-vars]
      TEST_MODE: false
      EXECUTION_ID: 9999
      ORACLE_PORT: *ORACLE_PORT
      ORACLE_SERVICE: *ORACLE_DATABASE
    command: ["python", "/app/src/main.py"]
    # command: ["sleep", "10000"]
    volumes:
    - "./sync/src:/app/src"
    - "./sync/poetry.lock:/application/poetry.lock"
    - "./sync/pyproject.toml:/application/pyproject.toml"
    depends_on:
      etl:
        condition: service_completed_successfully

  cloudbeaver:
    profiles: ["cloudbeaver"]
    image: dbeaver/cloudbeaver:latest
    container_name: cloudbeaver
    restart: always
    ports:
      - '8978:8978'
    volumes:
      - /opt/cloudbeaver/workspace
    depends_on:
      etl:
        condition: service_completed_successfully

  # # debug service, useful for understanding how environment variables work
  # echoit:
  #   image: functions/alpine:health
  #   environment:
  #     <<: *oracle-vars
  #     FLYWAY_USER: "${APP_USER}"
  #     FLYWAY_PASSWORD: "${APP_USER_PASSWORD}"
  #     FLYWAY_BASELINE_ON_MIGRATE: true
  #     FLYWAY_DEFAULT_SCHEMA: "${APP_USER}"
  #   entrypoint: ["/bin/sh", "-c", "export && echo \"oradb is ${FLYWAY_USER}\" &&  exec $fprocess"]

volumes:
  oracle-data:
  postgres-migrations-volume:
