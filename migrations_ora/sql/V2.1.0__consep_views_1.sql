-- CONSEP.ACTIVE_GERM_COUNTS source

CREATE OR REPLACE VIEW CONSEP.ACTIVE_GERM_COUNTS
(SEEDLOT_NUMBER,VEGETATION_ST,REQUEST_ID,ACTIVITY_TYPE_CD,TEST_CATEGORY_CD,RIA_SKEY,C_DAY,ACTUAL_BEGIN_DT_TM,MAX_COUNT_DAY)
AS
Select ria.SEEDLOT_NUMBER, sl.vegetation_st,
 ria.REQUEST_ID,  ria.ACTIVITY_TYPE_CD, ria.TEST_CATEGORY_CD, ria.RIA_SKEY,
 cd.C_DAY, ria.ACTUAL_BEGIN_DT_TM, Reg.COUNT_HOURS/24
from CNS_T_RQST_ITM_ACTVTY ria, CNS_T_TSC_TEST_RESULT tr,
 RIA_GCOUNT_DAY_NOW cd, CNS_T_SEEDLOT SL, CNS_T_TEST_REGIME Reg
where ria.ria_skey = tr.ria_skey
and ria.ria_skey = cd.ria_skey
and cd.C_DAY is not null
and ((ria.ACTUAL_BEGIN_DT_TM is not null)  OR (ria.actual_begin_dt_tm is null AND ria.TEST_CATEGORY_CD = 'QA'))
and ria.ACTUAL_END_DT_TM is null
and tr.ACCEPT_RESULT_IND = 0
and tr.TEST_COMPLETE_IND = 0
and sl.seedlot_number = ria.seedlot_number
and tr.ACTIVITY_TYPE_CD  = reg.SEEDLOT_TEST_CODE
UNION Select 'FAMIL', FL.VEGETATION_ST,  ria.REQUEST_ID,  ria.ACTIVITY_TYPE_CD,
 ria.TEST_CATEGORY_CD, ria.RIA_SKEY, cd.C_DAY, ria.ACTUAL_BEGIN_DT_TM, Reg.COUNT_HOURS/24
from CNS_T_RQST_ITM_ACTVTY ria, CNS_T_TSC_TEST_RESULT tr,
 RIA_GCOUNT_DAY_NOW cd, CNS_T_FAMILY_LOT FL, CNS_T_TEST_REGIME Reg
where ria.ria_skey = tr.ria_skey
and ria.ria_skey = cd.ria_skey
and cd.C_DAY is not null
and ria.ACTUAL_BEGIN_DT_TM is not null
and ria.ACTUAL_END_DT_TM is null
and tr.ACCEPT_RESULT_IND = 0
and tr.TEST_COMPLETE_IND = 0
and fl.FAMILY_LOT_NUMBER = ria.FAMILY_LOT_NUMBER
and ria.seedlot_number = '00000'
and tr.ACTIVITY_TYPE_CD  = reg.SEEDLOT_TEST_CODE;


-- CONSEP.ACTIVE_GERM_COUNTS_AUDIT source

CREATE OR REPLACE VIEW CONSEP.ACTIVE_GERM_COUNTS_AUDIT
(SEEDLOT_NUMBER,VEGETATION_ST,REQUEST_ID,ACTIVITY_TYPE_CD,TEST_CATEGORY_CD,RIA_SKEY,C_DAY,ACTUAL_BEGIN_DT_TM,MAX_COUNT_DAY,AUDIT_DATE)
AS
Select ria.SEEDLOT_NUMBER, sl.vegetation_st,
 ria.REQUEST_ID,  ria.ACTIVITY_TYPE_CD, ria.TEST_CATEGORY_CD, ria.RIA_SKEY,
 cd.C_DAY, ria.ACTUAL_BEGIN_DT_TM, Reg.COUNT_HOURS/24 , cd.DAYS_PREV_30
from CNS_T_RQST_ITM_ACTVTY ria, CNS_T_TSC_TEST_RESULT tr,
 RIA_GCOUNT_DAY_AUDIT_07 cd, CNS_T_SEEDLOT SL, CNS_T_TEST_REGIME Reg
where ria.ria_skey = tr.ria_skey
and ria.ria_skey = cd.ria_skey
and cd.C_DAY is not null
and ((ria.ACTUAL_BEGIN_DT_TM is not null)  OR (ria.actual_begin_dt_tm is null AND ria.TEST_CATEGORY_CD = 'QA'))
--and ria.ACTUAL_END_DT_TM is null
--and tr.ACCEPT_RESULT_IND = 0
--and tr.TEST_COMPLETE_IND = 0
and sl.seedlot_number = ria.seedlot_number
and tr.ACTIVITY_TYPE_CD  = reg.SEEDLOT_TEST_CODE
UNION Select 'FAMIL', FL.VEGETATION_ST,  ria.REQUEST_ID,  ria.ACTIVITY_TYPE_CD,
 ria.TEST_CATEGORY_CD, ria.RIA_SKEY, cd.C_DAY, ria.ACTUAL_BEGIN_DT_TM, Reg.COUNT_HOURS/24, cd.DAYS_PREV_30
from CNS_T_RQST_ITM_ACTVTY ria, CNS_T_TSC_TEST_RESULT tr,
 RIA_GCOUNT_DAY_AUDIT_07 cd, CNS_T_FAMILY_LOT FL, CNS_T_TEST_REGIME Reg
where ria.ria_skey = tr.ria_skey
and ria.ria_skey = cd.ria_skey
and cd.C_DAY is not null
and ria.ACTUAL_BEGIN_DT_TM is not null
--and ria.ACTUAL_END_DT_TM is null
--and tr.ACCEPT_RESULT_IND = 0
--and tr.TEST_COMPLETE_IND = 0
and fl.FAMILY_LOT_NUMBER = ria.FAMILY_LOT_NUMBER
and ria.seedlot_number = '00000'
and tr.ACTIVITY_TYPE_CD  = reg.SEEDLOT_TEST_CODE;


-- CONSEP.ACTIVE_GERM_COUNTS_EX_COUNT source

CREATE OR REPLACE VIEW CONSEP.ACTIVE_GERM_COUNTS_EX_COUNT
(SEEDLOT_NUMBER,VEGETATION_ST,REQUEST_ID,ACTIVITY_TYPE_CD,TEST_CATEGORY_CD,RIA_SKEY,C_DAY,ACTUAL_BEGIN_DT_TM,EXPECTED_COUNT)
AS
Select agc.SEEDLOT_NUMBER, agc.vegetation_st,
 agc.REQUEST_ID,  agc.ACTIVITY_TYPE_CD, agc.TEST_CATEGORY_CD, agc.RIA_SKEY,
 agc.C_DAY, agc.ACTUAL_BEGIN_DT_TM, nvl(ga.COUNT_AVG,0)
from ACTIVE_GERM_COUNTS agc,
 CNS_T_GERM_COUNT_DAY_AVG GA
where
 agc.vegetation_st = ga.vegetation_st(+)
and agc.ACTIVITY_TYPE_CD = ga.STNDRD_ACTIVITY_ID(+)
and agc.C_DAY = ga.DAY_NO(+);


-- CONSEP.ACTIVE_GERM_C_SUMMARY source

CREATE OR REPLACE VIEW CONSEP.ACTIVE_GERM_C_SUMMARY
(VEGETATION_ST,ACTIVITY_TYPE_CD,TEST_CATEGORY_CD,C_DAY,ACT_COUNT,MAX_COUNT_DAY)
AS
Select VEGETATION_ST, ACTIVITY_TYPE_CD, TEST_CATEGORY_CD, C_DAY, SUM(ACT_COUNT),
MAX_COUNT_DAY
from ACTIVE_GERM_C_SUMMARY_DETAIL
group by VEGETATION_ST, ACTIVITY_TYPE_CD, TEST_CATEGORY_CD, C_DAY, MAX_COUNT_DAY
order by vegetation_st, ACTIVITY_TYPE_CD, MAX_COUNT_DAY;


-- CONSEP.ACTIVE_GERM_C_SUMMARY_AUDIT source

CREATE OR REPLACE VIEW CONSEP.ACTIVE_GERM_C_SUMMARY_AUDIT
(VEGETATION_ST,ACTIVITY_TYPE_CD,TEST_CATEGORY_CD,C_DAY,ACT_COUNT,MAX_COUNT_DAY,AUDIT_DATE)
AS
Select VEGETATION_ST, ACTIVITY_TYPE_CD, TEST_CATEGORY_CD, C_DAY, SUM(ACT_COUNT),
MAX_COUNT_DAY , AUDIT_DATE
from ACTIVE_GERM_C_SUMMA_DETAIL_AUD
group by VEGETATION_ST, ACTIVITY_TYPE_CD, TEST_CATEGORY_CD, C_DAY, MAX_COUNT_DAY  , AUDIT_DATE
order by vegetation_st, ACTIVITY_TYPE_CD, MAX_COUNT_DAY;


-- CONSEP.ACTIVE_GERM_C_SUMMARY_DETAIL source

CREATE OR REPLACE VIEW CONSEP.ACTIVE_GERM_C_SUMMARY_DETAIL
(VEGETATION_ST,ACTIVITY_TYPE_CD,TEST_CATEGORY_CD,C_DAY,ACT_COUNT,MAX_COUNT_DAY)
AS
Select agc.vegetation_st, agc.ACTIVITY_TYPE_CD, agc.TEST_CATEGORY_CD ,
 agc.C_DAY, count(ria_skey), agc.MAX_COUNT_DAY
from ACTIVE_GERM_COUNTS agc
group by  agc.vegetation_st, agc.ACTIVITY_TYPE_CD,agc.TEST_CATEGORY_CD,  agc.C_DAY, agc.MAX_COUNT_DAY
--order by agc.vegetation_st, agc.ACTIVITY_TYPE_CD, agc.C_DAY
-- UNION
UNION ALL -- Dec 5 2006 change to union all
Select VEGETATION_ST, STNDRD_ACTIVITY_ID, 'STD',
DAY_NO - ((reg.SOAK_HOURS + STRAT_HOURS + NVL(WARM_STRAT_HOURS,0))/24 + (Trunc(s_date) - Trunc(sysdate))) AS DAY_NO,
ACT_COUNT, Reg.COUNT_HOURS/24
FROM CNS_T_G_COUNT_WHAT_IF WI, CNS_T_TEST_REGIME Reg
where wi.STNDRD_ACTIVITY_ID  = reg.SEEDLOT_TEST_CODE
group by VEGETATION_ST, STNDRD_ACTIVITY_ID,
DAY_NO - ((reg.SOAK_HOURS + STRAT_HOURS + NVL(WARM_STRAT_HOURS,0))/24 + (Trunc(s_date) - Trunc(sysdate))) ,
ACT_COUNT, Reg.COUNT_HOURS/24
order by vegetation_st, ACTIVITY_TYPE_CD, MAX_COUNT_DAY;


-- CONSEP.ACTIVE_GERM_C_SUMMARY_NEW source

CREATE OR REPLACE VIEW CONSEP.ACTIVE_GERM_C_SUMMARY_NEW
(VEGETATION_ST,ACTIVITY_TYPE_CD,TEST_CATEGORY_CD,C_DAY,ACT_COUNT,MAX_COUNT_DAY)
AS
Select VEGETATION_ST, ACTIVITY_TYPE_CD, TEST_CATEGORY_CD, C_DAY, SUM(ACT_COUNT),
MAX_COUNT_DAY
from ACTIVE_GERM_C_SUMMARY_DETAIL
group by VEGETATION_ST, ACTIVITY_TYPE_CD, TEST_CATEGORY_CD, C_DAY, MAX_COUNT_DAY
order by vegetation_st, ACTIVITY_TYPE_CD, MAX_COUNT_DAY;


-- CONSEP.ACTIVE_GERM_C_SUMMARY_OLD source

CREATE OR REPLACE VIEW CONSEP.ACTIVE_GERM_C_SUMMARY_OLD
(VEGETATION_ST,ACTIVITY_TYPE_CD,TEST_CATEGORY_CD,C_DAY,ACT_COUNT,MAX_COUNT_DAY)
AS
Select agc.vegetation_st, agc.ACTIVITY_TYPE_CD, agc.TEST_CATEGORY_CD ,
 agc.C_DAY, count(ria_skey), agc.MAX_COUNT_DAY
from ACTIVE_GERM_COUNTS agc
group by  agc.vegetation_st, agc.ACTIVITY_TYPE_CD,agc.TEST_CATEGORY_CD,  agc.C_DAY, agc.MAX_COUNT_DAY
--order by agc.vegetation_st, agc.ACTIVITY_TYPE_CD, agc.C_DAY
UNION
Select VEGETATION_ST, STNDRD_ACTIVITY_ID, 'STD',
DAY_NO - ((reg.SOAK_HOURS + STRAT_HOURS + NVL(WARM_STRAT_HOURS,0))/24 + (Trunc(s_date) - Trunc(sysdate))) AS DAY_NO,
ACT_COUNT, Reg.COUNT_HOURS/24
FROM CNS_T_G_COUNT_WHAT_IF WI, CNS_T_TEST_REGIME Reg
where wi.STNDRD_ACTIVITY_ID  = reg.SEEDLOT_TEST_CODE
group by VEGETATION_ST, STNDRD_ACTIVITY_ID,
DAY_NO - ((reg.SOAK_HOURS + STRAT_HOURS + NVL(WARM_STRAT_HOURS,0))/24 + (Trunc(s_date) - Trunc(sysdate))) ,
ACT_COUNT, Reg.COUNT_HOURS/24
order by vegetation_st, ACTIVITY_TYPE_CD, MAX_COUNT_DAY;


-- CONSEP.ACTIVE_GERM_C_SUMMA_DETAIL_AUD source

CREATE OR REPLACE VIEW CONSEP.ACTIVE_GERM_C_SUMMA_DETAIL_AUD
(VEGETATION_ST,ACTIVITY_TYPE_CD,TEST_CATEGORY_CD,C_DAY,ACT_COUNT,MAX_COUNT_DAY,AUDIT_DATE)
AS
Select agc.vegetation_st, agc.ACTIVITY_TYPE_CD, agc.TEST_CATEGORY_CD ,
 agc.C_DAY, count(ria_skey), agc.MAX_COUNT_DAY, agc.audit_date
from ACTIVE_GERM_COUNTS_AUDIT agc
group by  agc.vegetation_st, agc.ACTIVITY_TYPE_CD,agc.TEST_CATEGORY_CD,  agc.C_DAY, agc.MAX_COUNT_DAY , agc.audit_date
order by vegetation_st, ACTIVITY_TYPE_CD, MAX_COUNT_DAY;


-- CONSEP.ALL_INV_LOCN source

CREATE OR REPLACE VIEW CONSEP.ALL_INV_LOCN
(INVLOCATIONKEY,STORAGE_FCLTY_DESC,STORAGE_FCLTY_ID,SECTION_ID,SHELF_ID,POSITION_ID,CAPACITY,LOCN_PURPOSE_CD,CONTAINER_TYPE,INVLOCATION)
AS
SELECT	a.STORAGE_FCLTY_ID||a.SECTION_ID||a.SHELF_ID||a.POSITION_ID,
	b.STORAGE_FCLTY_DESC,
	a.STORAGE_FCLTY_ID,
	a.SECTION_ID,
	a.SHELF_ID,
	a.POSITION_ID,
	a.CAPACITY,
	a.LOCN_PURPOSE_CD,
	CNS_FN_GET_CODELIST_DSC("CONTAINER_TYPE_CD",a.CONTAINER_TYPE_CD),
	UPPER(RPAD(a.STORAGE_FCLTY_ID,3,' ')||RPAD(a.SECTION_ID,3,' ')||RPAD(a.SHELF_ID,1,' ')||RPAD(a.POSITION_ID,3,' '))
FROM
	CNS_T_INVENTORY_LOCN a,
	CNS_T_INVENTORY_FCLTY b
WHERE
	b.STORAGE_FCLTY_ID = a.STORAGE_FCLTY_ID;


-- CONSEP.ALL_INV_LOCNS_ASSIGNED_PRODUCT_DETAILS source

CREATE OR REPLACE VIEW CONSEP.ALL_INV_LOCNS_ASSIGNED_PRODUCT_DETAILS
(INVLOCATIONKEYFROM,INVLOCATIONKEYTO,INVENTORY_SKEY,STORAGE_FCLTY_ID,STORAGE_FCLTY_DESC,FROM_SECTION_ID,FROM_SHELF_ID,FROM_POSITION_ID,TO_SECTION_ID,TO_SHELF_ID,TO_POSITION_ID,CONTAINER_TYPE_CD,NO_CONTAINERS,TSC_PRODUCT_TYP_CD,SEEDLOT_NUMBER,REQUEST_ID,REQUEST_SKEY,ITEM_ID,STORAGE_STRT_DT_TM,STORAGE_END_DT_TM,PRODUCT,VEGETATION_ST,REGISTERD_SEED_IND,CONTAINER_TYPE,INVLOC1,INVLOC2,AVAIL_QTY,"COMMITTED",INVLOCATIONKEY)
AS
SELECT
   ASSIGNED_INV.INVLOCATIONKEYFROM,
   ASSIGNED_INV.INVLOCATIONKEYTO,
   ASSIGNED_INV.INVENTORY_SKEY,
   ASSIGNED_INV.STORAGE_FCLTY_ID,
   ASSIGNED_INV.STORAGE_FCLTY_DESC,
   ASSIGNED_INV.FROM_SECTION_ID,
   ASSIGNED_INV.FROM_SHELF_ID,
   ASSIGNED_INV.FROM_POSITION_ID,
   ASSIGNED_INV.TO_SECTION_ID,
   ASSIGNED_INV.TO_SHELF_ID,
   ASSIGNED_INV.TO_POSITION_ID,
   ASSIGNED_INV.CONTAINER_TYPE_CD,
   ASSIGNED_INV.NO_CONTAINERS,
   ASSIGNED_INV.TSC_PRODUCT_TYP_CD,
   ASSIGNED_INV.SEEDLOT_NUMBER,
   ASSIGNED_INV.REQUEST_ID,
   ASSIGNED_INV.REQUEST_SKEY,
   ASSIGNED_INV.ITEM_ID,
   ASSIGNED_INV.STORAGE_STRT_DT_TM,
   ASSIGNED_INV.STORAGE_END_DT_TM,
   ASSIGNED_INV.PRODUCT,
   ASSIGNED_INV.VEGETATION_ST,
   ASSIGNED_INV.REGISTERD_SEED_IND,
   ASSIGNED_INV.CONTAINER_TYPE,
   ASSIGNED_INV.INVLOC1,
   ASSIGNED_INV.INVLOC2,
   ASSIGNED_INV.AVAIL_QTY,
   ASSIGNED_INV.COMMITTED,
   ALL_LOCNS.INVLOCATIONKEY
FROM
  ALL_INV_LOCN ALL_LOCNS,
  ASSIGNED_INV ASSIGNED_INV
  WHERE ALL_LOCNS.INVLOCATIONKEY >= ASSIGNED_INV.INVLOC1 AND ALL_LOCNS.INVLOCATIONKEY <= ASSIGNED_INV.INVLOC2;


-- CONSEP.ALL_INV_LOCNS_ASS_PROD_DETS source

CREATE OR REPLACE VIEW CONSEP.ALL_INV_LOCNS_ASS_PROD_DETS
(INVLOCATIONKEYFROM,INVLOCATIONKEYTO,INVENTORY_SKEY,STORAGE_FCLTY_ID,STORAGE_FCLTY_DESC,FROM_SECTION_ID,FROM_SHELF_ID,FROM_POSITION_ID,TO_SECTION_ID,TO_SHELF_ID,TO_POSITION_ID,CONTAINER_TYPE_CD,NO_CONTAINERS,TSC_PRODUCT_TYP_CD,SEEDLOT_NUMBER,REQUEST_ID,REQUEST_SKEY,ITEM_ID,STORAGE_STRT_DT_TM,STORAGE_END_DT_TM,PRODUCT,VEGETATION_ST,REGISTERD_SEED_IND,CONTAINER_TYPE,INVLOC1,INVLOC2,AVAIL_QTY,"COMMITTED",INVLOCATIONKEY)
AS
SELECT
   ASSIGNED_INV.INVLOCATIONKEYFROM,
   ASSIGNED_INV.INVLOCATIONKEYTO,
   ASSIGNED_INV.INVENTORY_SKEY,
   ASSIGNED_INV.STORAGE_FCLTY_ID,
   ASSIGNED_INV.STORAGE_FCLTY_DESC,
   ASSIGNED_INV.FROM_SECTION_ID,
   ASSIGNED_INV.FROM_SHELF_ID,
   ASSIGNED_INV.FROM_POSITION_ID,
   ASSIGNED_INV.TO_SECTION_ID,
   ASSIGNED_INV.TO_SHELF_ID,
   ASSIGNED_INV.TO_POSITION_ID,
   ASSIGNED_INV.CONTAINER_TYPE_CD,
   ASSIGNED_INV.NO_CONTAINERS,
   ASSIGNED_INV.TSC_PRODUCT_TYP_CD,
   ASSIGNED_INV.SEEDLOT_NUMBER,
   ASSIGNED_INV.REQUEST_ID,
   ASSIGNED_INV.REQUEST_SKEY,
   ASSIGNED_INV.ITEM_ID,
   ASSIGNED_INV.STORAGE_STRT_DT_TM,
   ASSIGNED_INV.STORAGE_END_DT_TM,
   ASSIGNED_INV.PRODUCT,
   ASSIGNED_INV.VEGETATION_ST,
   ASSIGNED_INV.REGISTERD_SEED_IND,
   ASSIGNED_INV.CONTAINER_TYPE,
   ASSIGNED_INV.INVLOC1,
   ASSIGNED_INV.INVLOC2,
   ASSIGNED_INV.AVAIL_QTY,
   ASSIGNED_INV.COMMITTED,
   ALL_LOCNS.INVLOCATIONKEY
FROM
  ALL_INV_LOCN ALL_LOCNS,
  ASSIGNED_INV ASSIGNED_INV
  WHERE ALL_LOCNS.INVLOCATIONKEY >= ASSIGNED_INV.INVLOC1 AND ALL_LOCNS.INVLOCATIONKEY <= ASSIGNED_INV.INVLOC2;


-- CONSEP.ALL_INV_LOCNS_NOT_ASSIGNED source

CREATE OR REPLACE VIEW CONSEP.ALL_INV_LOCNS_NOT_ASSIGNED
(INVLOCATIONKEYFROM,INVLOCATIONKEYTO,INVENTORY_SKEY,STORAGE_FCLTY_ID,STORAGE_FCLTY_DESC,FROM_SECTION_ID,FROM_SHELF_ID,FROM_POSITION_ID,TO_SECTION_ID,TO_SHELF_ID,TO_POSITION_ID,CONTAINER_TYPE_CD,NO_CONTAINERS,TSC_PRODUCT_TYP_CD,SEEDLOT_NUMBER,REQUEST_ID,REQUEST_SKEY,ITEM_ID,STORAGE_STRT_DT_TM,STORAGE_END_DT_TM,PRODUCT,VEGETATION_ST,REGISTERD_SEED_IND,CONTAINER_TYPE,INVLOC1,INVLOC2,AVAIL_QTY,"COMMITTED",INVLOCATIONKEY)
AS
SELECT
   a.STORAGE_FCLTY_ID|| a.FROM_SECTION_ID || a.FROM_SHELF_ID||a.FROM_POSITION_ID,
   a.STORAGE_FCLTY_ID || a.TO_SECTION_ID || a.TO_SHELF_ID || a.TO_POSITION_ID , a.INVENTORY_SKEY,
   a.STORAGE_FCLTY_ID,
   a.STORAGE_FCLTY_DESC,
   a.FROM_SECTION_ID,
   a.FROM_SHELF_ID,
   a.FROM_POSITION_ID,
   a.TO_SECTION_ID,
   a.TO_SHELF_ID,
   a.TO_POSITION_ID,
   a.CONTAINER_TYPE_CD,
   a.NO_CONTAINERS,
   a.TSC_PRODUCT_TYP_CD,
   a.SEEDLOT_NUMBER,
   a.REQUEST_ID,
   a.REQUEST_SKEY,
   a.ITEM_ID,
   a.STORAGE_STRT_DT_TM,
   a.STORAGE_END_DT_TM,
   a.TSC_PRODUCT_TYP_CD,
   a.VEGETATION_ST,
   a.REGISTERD_SEED_IND,
   a.CONTAINER_TYPE_CD,
   a.INVLOC1,
   a.INVLOC1,
   a.AVAIL_QTY,
   a.COMMITTED,
   a.INVLOCATIONKEY
FROM
ALL_INV_LOCNS_ASSIGNED_PRODUCT_DETAILS a
WHERE A.SEEDLOT_NUMBER IS NULL;


-- CONSEP.ALL_INV_LOCNS_ONE_POS_PER_SEEDLOT source

CREATE OR REPLACE VIEW CONSEP.ALL_INV_LOCNS_ONE_POS_PER_SEEDLOT
(INVLOCATIONKEYFROM,INVLOCATIONKEYTO,INVENTORY_SKEY,STORAGE_FCLTY_ID,STORAGE_FCLTY_DESC,FROM_SECTION_ID,FROM_SHELF_ID,FROM_POSITION_ID,TO_SECTION_ID,TO_SHELF_ID,TO_POSITION_ID,CONTAINER_TYPE_CD,NO_CONTAINERS,TSC_PRODUCT_TYP_CD,SEEDLOT_NUMBER,REQUEST_ID,REQUEST_SKEY,ITEM_ID,STORAGE_STRT_DT_TM,STORAGE_END_DT_TM,PRODUCT,VEGETATION_ST,REGISTERD_SEED_IND,CONTAINER_TYPE,INVLOC1,INVLOC2,AVAIL_QTY,"COMMITTED",INVLOCATIONKEY)
AS
SELECT
   a.INVLOCATIONKEYFROM,
   a.INVLOCATIONKEYTO,
   a.INVENTORY_SKEY,
   a.STORAGE_FCLTY_ID,
   a.STORAGE_FCLTY_DESC,
   a.FROM_SECTION_ID,
   a.FROM_SHELF_ID,
   a.FROM_POSITION_ID,
   a.TO_SECTION_ID,
   a.TO_SHELF_ID,
   a.TO_POSITION_ID,
   a.CONTAINER_TYPE_CD,
   a.NO_CONTAINERS,
   a.TSC_PRODUCT_TYP_CD,
   a.SEEDLOT_NUMBER,
   a.REQUEST_ID,
   a.REQUEST_SKEY,
   a.ITEM_ID,
   a.STORAGE_STRT_DT_TM,
   a.STORAGE_END_DT_TM,
   a.TSC_PRODUCT_TYP_CD,
   a.VEGETATION_ST,
   a.REGISTERD_SEED_IND,
   a.CONTAINER_TYPE_CD,
   a.INVLOC1,
   a.INVLOC2,
   a.AVAIL_QTY,
   a.COMMITTED,
   a.INVLOCATIONKEY
FROM
ALL_INV_LOCNS_ASSIGNED_PRODUCT_DETAILS a
WHERE A.INVLOCATIONKEY = a.INVLOC1;


-- CONSEP.ALL_INV_LOCNS_PRODUCT_DETAILS source

CREATE OR REPLACE VIEW CONSEP.ALL_INV_LOCNS_PRODUCT_DETAILS
(INVLOCATIONKEYFROM,INVLOCATIONKEYTO,INVENTORY_SKEY,STORAGE_FCLTY_ID,STORAGE_FCLTY_DESC,FROM_SECTION_ID,FROM_SHELF_ID,FROM_POSITION_ID,TO_SECTION_ID,TO_SHELF_ID,TO_POSITION_ID,CONTAINER_TYPE_CD,NO_CONTAINERS,TSC_PRODUCT_TYP_CD,SEEDLOT_NUMBER,REQUEST_ID,REQUEST_SKEY,ITEM_ID,STORAGE_STRT_DT_TM,STORAGE_END_DT_TM,PRODUCT,VEGETATION_ST,REGISTERD_SEED_IND,CONTAINER_TYPE,INVLOC1,INVLOC2,AVAIL_QTY,"COMMITTED",INVLOCATIONKEY)
AS
SELECT
   ASSIGNED_DETAILS.INVLOCATIONKEYFROM,
   ASSIGNED_DETAILS.INVLOCATIONKEYTO,
   ASSIGNED_DETAILS.INVENTORY_SKEY,
   ALL_LOCNS.STORAGE_FCLTY_ID,
   ALL_LOCNS.STORAGE_FCLTY_DESC,
   ALL_LOCNS.SECTION_ID,
   ALL_LOCNS.SHELF_ID,
   ALL_LOCNS.POSITION_ID,
   DECODE(ASSIGNED_DETAILS.TO_SECTION_ID, NULL, ALL_LOCNS.SECTION_ID, ASSIGNED_DETAILS.TO_SECTION_ID),
   DECODE(ASSIGNED_DETAILS.TO_SHELF_ID, NULL, ALL_LOCNS.SHELF_ID,ASSIGNED_DETAILS.TO_SHELF_ID),
   DECODE(ASSIGNED_DETAILS.TO_POSITION_ID, NULL, ALL_LOCNS.POSITION_ID, ASSIGNED_DETAILS.TO_POSITION_ID),
   ASSIGNED_DETAILS.CONTAINER_TYPE_CD,
   ASSIGNED_DETAILS.NO_CONTAINERS,
   ASSIGNED_DETAILS.TSC_PRODUCT_TYP_CD,
   ASSIGNED_DETAILS.SEEDLOT_NUMBER,
   ASSIGNED_DETAILS.REQUEST_ID,
   ASSIGNED_DETAILS.REQUEST_SKEY,
   ASSIGNED_DETAILS.ITEM_ID,
   ASSIGNED_DETAILS.STORAGE_STRT_DT_TM,
   ASSIGNED_DETAILS.STORAGE_END_DT_TM,
   ASSIGNED_DETAILS.PRODUCT,
   ASSIGNED_DETAILS.VEGETATION_ST,
   ASSIGNED_DETAILS.REGISTERD_SEED_IND,
   ASSIGNED_DETAILS.CONTAINER_TYPE,
   DECODE(ASSIGNED_DETAILS.INVLOC1, NULL, ALL_LOCNS.STORAGE_FCLTY_ID ||ALL_LOCNS.SECTION_ID || ALL_LOCNS.SHELF_ID || ALL_LOCNS.POSITION_ID, ASSIGNED_DETAILS.INVLOC1),
   DECODE(ASSIGNED_DETAILS.INVLOC2, NULL, ALL_LOCNS.STORAGE_FCLTY_ID ||ALL_LOCNS.SECTION_ID || ALL_LOCNS.SHELF_ID || ALL_LOCNS.POSITION_ID, ASSIGNED_DETAILS.INVLOC2),
   ASSIGNED_DETAILS.AVAIL_QTY,
   ASSIGNED_DETAILS.COMMITTED,
   ALL_LOCNS.INVLOCATIONKEY
FROM
  ALL_INV_LOCN ALL_LOCNS,
  ALL_INV_LOCNS_ASSIGNED_PRODUCT_DETAILS ASSIGNED_DETAILS
  WHERE ALL_LOCNS.INVLOCATIONKEY = ASSIGNED_DETAILS.INVLOCATIONKEY(+)
  ORDER BY ALL_LOCNS.INVLOCATIONKEY;


-- CONSEP.AONEROWTEST source

CREATE OR REPLACE VIEW CONSEP.AONEROWTEST
(C1,RIA_SKEY,DAILY_GERM_SKEY1,COUNT_DT1,DAY_NO_OF_TEST1,REP1_NO_SEEDS_GERM1,REP2_NO_SEEDS_GERM1,REP3_NO_SEEDS_GERM1,REP4_NO_SEEDS_GERM1,CUMULATIVE_GERM1,DAILY_GERM_SKEY2,COUNT_DT2,DAY_NO_OF_TEST2,REP1_NO_SEEDS_GERM2,REP2_NO_SEEDS_GERM2,REP3_NO_SEEDS_GERM2,REP4_NO_SEEDS_GERM2,CUMULATIVE_GERM2,DAILY_GERM_SKEY3,COUNT_DT3,DAY_NO_OF_TEST3,REP1_NO_SEEDS_GERM3,REP2_NO_SEEDS_GERM3,REP3_NO_SEEDS_GERM3,REP4_NO_SEEDS_GERM3,CUMULATIVE_GERM3,DAILY_GERM_SKEY4,COUNT_DT4,DAY_NO_OF_TEST4,REP1_NO_SEEDS_GERM4,REP2_NO_SEEDS_GERM4,REP3_NO_SEEDS_GERM4,REP4_NO_SEEDS_GERM4,CUMULATIVE_GERM4,DAILY_GERM_SKEY5,COUNT_DT5,DAY_NO_OF_TEST5,REP1_NO_SEEDS_GERM5,REP2_NO_SEEDS_GERM5,REP3_NO_SEEDS_GERM5,REP4_NO_SEEDS_GERM5,CUMULATIVE_GERM5,DAILY_GERM_SKEY6,COUNT_DT6,DAY_NO_OF_TEST6,REP1_NO_SEEDS_GERM6,REP2_NO_SEEDS_GERM6,REP3_NO_SEEDS_GERM6,REP4_NO_SEEDS_GERM6,CUMULATIVE_GERM6,DAILY_GERM_SKEY7,COUNT_DT7,DAY_NO_OF_TEST7,REP1_NO_SEEDS_GERM7,REP2_NO_SEEDS_GERM7,REP3_NO_SEEDS_GERM7,REP4_NO_SEEDS_GERM7,CUMULATIVE_GERM7,DAILY_GERM_SKEY8,COUNT_DT8,DAY_NO_OF_TEST8,REP1_NO_SEEDS_GERM8,REP2_NO_SEEDS_GERM8,REP3_NO_SEEDS_GERM8,REP4_NO_SEEDS_GERM8,CUMULATIVE_GERM8,DAILY_GERM_SKEY9,COUNT_DT9,DAY_NO_OF_TEST9,REP1_NO_SEEDS_GERM9,REP2_NO_SEEDS_GERM9,REP3_NO_SEEDS_GERM9,REP4_NO_SEEDS_GERM9,CUMULATIVE_GERM9,DAILY_GERM_SKEY10,COUNT_DT10,DAY_NO_OF_TEST10,REP1_NO_SEEDS_GERM10,REP2_NO_SEEDS_GERM10,REP3_NO_SEEDS_GERM10,REP4_NO_SEEDS_GERM10,CUMULATIVE_GERM10,DAILY_GERM_SKEY11,COUNT_DT11,DAY_NO_OF_TEST11,REP1_NO_SEEDS_GERM11,REP2_NO_SEEDS_GERM11,REP3_NO_SEEDS_GERM11,REP4_NO_SEEDS_GERM11,CUMULATIVE_GERM11,DAILY_GERM_SKEY12,COUNT_DT12,DAY_NO_OF_TEST12,REP1_NO_SEEDS_GERM12,REP2_NO_SEEDS_GERM12,REP3_NO_SEEDS_GERM12,REP4_NO_SEEDS_GERM12,CUMULATIVE_GERM12,DAILY_GERM_SKEY13,COUNT_DT13,DAY_NO_OF_TEST13,REP1_NO_SEEDS_GERM13,REP2_NO_SEEDS_GERM13,REP3_NO_SEEDS_GERM13,REP4_NO_SEEDS_GERM13,CUMULATIVE_GERM13)
AS
select ROWNUM as c1,CNSL25_DAILY_GERM_FLAT."RIA_SKEY",CNSL25_DAILY_GERM_FLAT."DAILY_GERM_SKEY1",CNSL25_DAILY_GERM_FLAT."COUNT_DT1",CNSL25_DAILY_GERM_FLAT."DAY_NO_OF_TEST1",CNSL25_DAILY_GERM_FLAT."REP1_NO_SEEDS_GERM1",CNSL25_DAILY_GERM_FLAT."REP2_NO_SEEDS_GERM1",CNSL25_DAILY_GERM_FLAT."REP3_NO_SEEDS_GERM1",CNSL25_DAILY_GERM_FLAT."REP4_NO_SEEDS_GERM1",CNSL25_DAILY_GERM_FLAT."CUMULATIVE_GERM1",CNSL25_DAILY_GERM_FLAT."DAILY_GERM_SKEY2",CNSL25_DAILY_GERM_FLAT."COUNT_DT2",CNSL25_DAILY_GERM_FLAT."DAY_NO_OF_TEST2",CNSL25_DAILY_GERM_FLAT."REP1_NO_SEEDS_GERM2",CNSL25_DAILY_GERM_FLAT."REP2_NO_SEEDS_GERM2",CNSL25_DAILY_GERM_FLAT."REP3_NO_SEEDS_GERM2",CNSL25_DAILY_GERM_FLAT."REP4_NO_SEEDS_GERM2",CNSL25_DAILY_GERM_FLAT."CUMULATIVE_GERM2",CNSL25_DAILY_GERM_FLAT."DAILY_GERM_SKEY3",CNSL25_DAILY_GERM_FLAT."COUNT_DT3",CNSL25_DAILY_GERM_FLAT."DAY_NO_OF_TEST3",CNSL25_DAILY_GERM_FLAT."REP1_NO_SEEDS_GERM3",CNSL25_DAILY_GERM_FLAT."REP2_NO_SEEDS_GERM3",CNSL25_DAILY_GERM_FLAT."REP3_NO_SEEDS_GERM3",CNSL25_DAILY_GERM_FLAT."REP4_NO_SEEDS_GERM3",CNSL25_DAILY_GERM_FLAT."CUMULATIVE_GERM3",CNSL25_DAILY_GERM_FLAT."DAILY_GERM_SKEY4",CNSL25_DAILY_GERM_FLAT."COUNT_DT4",CNSL25_DAILY_GERM_FLAT."DAY_NO_OF_TEST4",CNSL25_DAILY_GERM_FLAT."REP1_NO_SEEDS_GERM4",CNSL25_DAILY_GERM_FLAT."REP2_NO_SEEDS_GERM4",CNSL25_DAILY_GERM_FLAT."REP3_NO_SEEDS_GERM4",CNSL25_DAILY_GERM_FLAT."REP4_NO_SEEDS_GERM4",CNSL25_DAILY_GERM_FLAT."CUMULATIVE_GERM4",CNSL25_DAILY_GERM_FLAT."DAILY_GERM_SKEY5",CNSL25_DAILY_GERM_FLAT."COUNT_DT5",CNSL25_DAILY_GERM_FLAT."DAY_NO_OF_TEST5",CNSL25_DAILY_GERM_FLAT."REP1_NO_SEEDS_GERM5",CNSL25_DAILY_GERM_FLAT."REP2_NO_SEEDS_GERM5",CNSL25_DAILY_GERM_FLAT."REP3_NO_SEEDS_GERM5",CNSL25_DAILY_GERM_FLAT."REP4_NO_SEEDS_GERM5",CNSL25_DAILY_GERM_FLAT."CUMULATIVE_GERM5",CNSL25_DAILY_GERM_FLAT."DAILY_GERM_SKEY6",CNSL25_DAILY_GERM_FLAT."COUNT_DT6",CNSL25_DAILY_GERM_FLAT."DAY_NO_OF_TEST6",CNSL25_DAILY_GERM_FLAT."REP1_NO_SEEDS_GERM6",CNSL25_DAILY_GERM_FLAT."REP2_NO_SEEDS_GERM6",CNSL25_DAILY_GERM_FLAT."REP3_NO_SEEDS_GERM6",CNSL25_DAILY_GERM_FLAT."REP4_NO_SEEDS_GERM6",CNSL25_DAILY_GERM_FLAT."CUMULATIVE_GERM6",CNSL25_DAILY_GERM_FLAT."DAILY_GERM_SKEY7",CNSL25_DAILY_GERM_FLAT."COUNT_DT7",CNSL25_DAILY_GERM_FLAT."DAY_NO_OF_TEST7",CNSL25_DAILY_GERM_FLAT."REP1_NO_SEEDS_GERM7",CNSL25_DAILY_GERM_FLAT."REP2_NO_SEEDS_GERM7",CNSL25_DAILY_GERM_FLAT."REP3_NO_SEEDS_GERM7",CNSL25_DAILY_GERM_FLAT."REP4_NO_SEEDS_GERM7",CNSL25_DAILY_GERM_FLAT."CUMULATIVE_GERM7",CNSL25_DAILY_GERM_FLAT."DAILY_GERM_SKEY8",CNSL25_DAILY_GERM_FLAT."COUNT_DT8",CNSL25_DAILY_GERM_FLAT."DAY_NO_OF_TEST8",CNSL25_DAILY_GERM_FLAT."REP1_NO_SEEDS_GERM8",CNSL25_DAILY_GERM_FLAT."REP2_NO_SEEDS_GERM8",CNSL25_DAILY_GERM_FLAT."REP3_NO_SEEDS_GERM8",CNSL25_DAILY_GERM_FLAT."REP4_NO_SEEDS_GERM8",CNSL25_DAILY_GERM_FLAT."CUMULATIVE_GERM8",CNSL25_DAILY_GERM_FLAT."DAILY_GERM_SKEY9",CNSL25_DAILY_GERM_FLAT."COUNT_DT9",CNSL25_DAILY_GERM_FLAT."DAY_NO_OF_TEST9",CNSL25_DAILY_GERM_FLAT."REP1_NO_SEEDS_GERM9",CNSL25_DAILY_GERM_FLAT."REP2_NO_SEEDS_GERM9",CNSL25_DAILY_GERM_FLAT."REP3_NO_SEEDS_GERM9",CNSL25_DAILY_GERM_FLAT."REP4_NO_SEEDS_GERM9",CNSL25_DAILY_GERM_FLAT."CUMULATIVE_GERM9",CNSL25_DAILY_GERM_FLAT."DAILY_GERM_SKEY10",CNSL25_DAILY_GERM_FLAT."COUNT_DT10",CNSL25_DAILY_GERM_FLAT."DAY_NO_OF_TEST10",CNSL25_DAILY_GERM_FLAT."REP1_NO_SEEDS_GERM10",CNSL25_DAILY_GERM_FLAT."REP2_NO_SEEDS_GERM10",CNSL25_DAILY_GERM_FLAT."REP3_NO_SEEDS_GERM10",CNSL25_DAILY_GERM_FLAT."REP4_NO_SEEDS_GERM10",CNSL25_DAILY_GERM_FLAT."CUMULATIVE_GERM10",CNSL25_DAILY_GERM_FLAT."DAILY_GERM_SKEY11",CNSL25_DAILY_GERM_FLAT."COUNT_DT11",CNSL25_DAILY_GERM_FLAT."DAY_NO_OF_TEST11",CNSL25_DAILY_GERM_FLAT."REP1_NO_SEEDS_GERM11",CNSL25_DAILY_GERM_FLAT."REP2_NO_SEEDS_GERM11",CNSL25_DAILY_GERM_FLAT."REP3_NO_SEEDS_GERM11",CNSL25_DAILY_GERM_FLAT."REP4_NO_SEEDS_GERM11",CNSL25_DAILY_GERM_FLAT."CUMULATIVE_GERM11",CNSL25_DAILY_GERM_FLAT."DAILY_GERM_SKEY12",CNSL25_DAILY_GERM_FLAT."COUNT_DT12",CNSL25_DAILY_GERM_FLAT."DAY_NO_OF_TEST12",CNSL25_DAILY_GERM_FLAT."REP1_NO_SEEDS_GERM12",CNSL25_DAILY_GERM_FLAT."REP2_NO_SEEDS_GERM12",CNSL25_DAILY_GERM_FLAT."REP3_NO_SEEDS_GERM12",CNSL25_DAILY_GERM_FLAT."REP4_NO_SEEDS_GERM12",CNSL25_DAILY_GERM_FLAT."CUMULATIVE_GERM12",CNSL25_DAILY_GERM_FLAT."DAILY_GERM_SKEY13",CNSL25_DAILY_GERM_FLAT."COUNT_DT13",CNSL25_DAILY_GERM_FLAT."DAY_NO_OF_TEST13",CNSL25_DAILY_GERM_FLAT."REP1_NO_SEEDS_GERM13",CNSL25_DAILY_GERM_FLAT."REP2_NO_SEEDS_GERM13",CNSL25_DAILY_GERM_FLAT."REP3_NO_SEEDS_GERM13",CNSL25_DAILY_GERM_FLAT."REP4_NO_SEEDS_GERM13",CNSL25_DAILY_GERM_FLAT."CUMULATIVE_GERM13" from CNSL25_DAILY_GERM_FLAT;


-- CONSEP.ASSIGNED_INV source

CREATE OR REPLACE VIEW CONSEP.ASSIGNED_INV
(INVLOCATIONKEYFROM,INVLOCATIONKEYTO,INVENTORY_SKEY,STORAGE_FCLTY_ID,STORAGE_FCLTY_DESC,FROM_SECTION_ID,FROM_SHELF_ID,FROM_POSITION_ID,TO_SECTION_ID,TO_SHELF_ID,TO_POSITION_ID,CONTAINER_TYPE_CD,NO_CONTAINERS,TSC_PRODUCT_TYP_CD,SEEDLOT_NUMBER,REQUEST_ID,REQUEST_SKEY,ITEM_ID,STORAGE_STRT_DT_TM,STORAGE_END_DT_TM,PRODUCT,VEGETATION_ST,REGISTERD_SEED_IND,CONTAINER_TYPE,INVLOC1,INVLOC2,AVAIL_QTY,"COMMITTED",RIA_SKEY)
AS
SELECT
   a.STORAGE_FCLTY_ID|| a.FROM_SECTION_ID || a.FROM_SHELF_ID||a.FROM_POSITION_ID,
   a.STORAGE_FCLTY_ID || a.TO_SECTION_ID || a.TO_SHELF_ID || a.TO_POSITION_ID , a.INVENTORY_SKEY,
   a.STORAGE_FCLTY_ID,
   c.STORAGE_FCLTY_DESC,
   a.FROM_SECTION_ID,
   a.FROM_SHELF_ID,
   a.FROM_POSITION_ID,
   a.TO_SECTION_ID,
   a.TO_SHELF_ID,
   a.TO_POSITION_ID,
   a.CONTAINER_TYPE_CD,
   a.NO_CONTAINERS,
   a.TSC_PRODUCT_TYP_CD,
   DECODE(b.SEEDLOT_NUMBER,'00000',I.FAMILY_LOT_NUMBER,B.SEEDLOT_NUMBER),
   b.REQUEST_ID,
   b.REQUEST_SKEY,
   SUBSTR(Cns_Fn_Strip_Item_Id('',b.request_skey,b.ITEM_ID),1,1),
   b.STORAGE_STRT_DT_TM,
   b.STORAGE_END_DT_TM,
   Cns_Fn_Get_Codelist_Dsc("TSC_PRODUCT_TYP_CD",a.TSC_PRODUCT_TYP_CD),
   DECODE(B.SEEDLOT_NUMBER,'00000',I.VEGETATION_ST,d.VEGETATION_ST),
   d.REGISTERD_SEED_IND,
   Cns_Fn_Get_Codelist_Dsc("CONTAINER_TYPE_CD",a.CONTAINER_TYPE_CD),
   UPPER(RPAD(a.STORAGE_FCLTY_ID,3,' ')||RPAD(a.FROM_SECTION_ID,3,' ')||RPAD(a.FROM_SHELF_ID,1,' ')||RPAD(a.FROM_POSITION_ID,3,' ')),
   UPPER(RPAD(a.STORAGE_FCLTY_ID,3,' ')||RPAD(a.TO_SECTION_ID,3,' ')||RPAD(a.TO_SHELF_ID,1,' ')||RPAD(a.TO_POSITION_ID,3,' ')),
   AVAIL.AVAIL_QTY,
   AVAIL.COMMITTED,
   a.ria_skey
FROM
  CNS_T_ASSIGND_INV_LOC a,
  CNS_T_ASSIGNED_INV_DT b,
  CNS_T_INVENTORY_FCLTY c,
  CNS_T_SEEDLOT d,
  CNS_T_REQUEST_ITEM I,
  AVAIL_SEED_QTY_WITHFAMILY AVAIL
WHERE
    c.STORAGE_FCLTY_ID = a.STORAGE_FCLTY_ID
AND b.INVENTORY_SKEY = a.INVENTORY_SKEY
AND b.SEEDLOT_NUMBER IS NOT NULL
AND b.STORAGE_END_DT_TM IS NULL
AND d.SEEDLOT_NUMBER(+) = b.SEEDLOT_NUMBER
AND i.REQUEST_SKEY (+) = b.REQUEST_SKEY
AND i.ITEM_ID (+) = b.ITEM_ID
AND b.SEEDLOT_NUMBER = AVAIL.SEEDLOT_NUMBER;


-- CONSEP.ASSIGNED_INV_AUDIT source

CREATE OR REPLACE VIEW CONSEP.ASSIGNED_INV_AUDIT
(INVLOCATIONKEYFROM,INVLOCATIONKEYTO,INVENTORY_SKEY,STORAGE_FCLTY_ID,STORAGE_FCLTY_DESC,FROM_SECTION_ID,FROM_SHELF_ID,FROM_POSITION_ID,TO_SECTION_ID,TO_SHELF_ID,TO_POSITION_ID,CONTAINER_TYPE_CD,NO_CONTAINERS,TSC_PRODUCT_TYP_CD,SEEDLOT_NUMBER,REQUEST_ID,REQUEST_SKEY,ITEM_ID,STORAGE_STRT_DT_TM,STORAGE_END_DT_TM,PRODUCT,VEGETATION_ST,REGISTERD_SEED_IND,CONTAINER_TYPE,INVLOC1,INVLOC2,CALC_COUNT)
AS
SELECT a."INVLOCATIONKEYFROM", a."INVLOCATIONKEYTO", a."INVENTORY_SKEY",
          a."STORAGE_FCLTY_ID", a."STORAGE_FCLTY_DESC", a."FROM_SECTION_ID",
          a."FROM_SHELF_ID", a."FROM_POSITION_ID", a."TO_SECTION_ID",
          a."TO_SHELF_ID", a."TO_POSITION_ID", a."CONTAINER_TYPE_CD",
          a."NO_CONTAINERS", a."TSC_PRODUCT_TYP_CD", a."SEEDLOT_NUMBER",
          a."REQUEST_ID", a."REQUEST_SKEY", a."ITEM_ID",
          a."STORAGE_STRT_DT_TM", a."STORAGE_END_DT_TM", a."PRODUCT",
          a."VEGETATION_ST", a."REGISTERD_SEED_IND", a."CONTAINER_TYPE",
          a."INVLOC1", a."INVLOC2", b.calc_count
     FROM assigned_inv a, assign_inv_calc_stor_space b
    WHERE a.invlocationkeyfrom = b.invlocationkeyfrom
      AND a.invlocationkeyto = b.invlocationkeyto
      and A.SEEDLOT_NUMBER = B.SEEDLOT_NUMBER;


-- CONSEP.ASSIGNED_INV_HIST source

CREATE OR REPLACE VIEW CONSEP.ASSIGNED_INV_HIST
(INVLOCATIONKEYFROM,INVLOCATIONKEYTO,INVENTORY_SKEY,STORAGE_FCLTY_ID,STORAGE_FCLTY_DESC,FROM_SECTION_ID,FROM_SHELF_ID,FROM_POSITION_ID,TO_SECTION_ID,TO_SHELF_ID,TO_POSITION_ID,CONTAINER_TYPE_CD,NO_CONTAINERS,TSC_PRODUCT_TYP_CD,SEEDLOT_NUMBER,REQUEST_ID,REQUEST_SKEY,ITEM_ID,STORAGE_STRT_DT_TM,STORAGE_END_DT_TM,PRODUCT,VEGETATION_ST,REGISTERD_SEED_IND,CONTAINER_TYPE,INVLOC1,INVLOC2)
AS
SELECT
   a.STORAGE_FCLTY_ID|| a.FROM_SECTION_ID || a.FROM_SHELF_ID||a.FROM_POSITION_ID,
   a.STORAGE_FCLTY_ID || a.TO_SECTION_ID || a.TO_SHELF_ID || a.TO_POSITION_ID , a.INVENTORY_SKEY,
   a.STORAGE_FCLTY_ID,
   c.STORAGE_FCLTY_DESC,
   a.FROM_SECTION_ID,
   a.FROM_SHELF_ID,
   a.FROM_POSITION_ID,
   a.TO_SECTION_ID,
   a.TO_SHELF_ID,
   a.TO_POSITION_ID,
   a.CONTAINER_TYPE_CD,
   a.NO_CONTAINERS,
   a.TSC_PRODUCT_TYP_CD,
   DECODE(b.SEEDLOT_NUMBER,'00000',I.FAMILY_LOT_NUMBER,B.SEEDLOT_NUMBER),
   b.REQUEST_ID,
   b.REQUEST_SKEY,
   SUBSTR(Cns_Fn_Strip_Item_Id('',b.request_skey,b.ITEM_ID),1,1),
   b.STORAGE_STRT_DT_TM,
   b.STORAGE_END_DT_TM,
   Cns_Fn_Get_Codelist_Dsc("TSC_PRODUCT_TYP_CD",a.TSC_PRODUCT_TYP_CD),
   DECODE(B.SEEDLOT_NUMBER,'00000',I.VEGETATION_ST,d.VEGETATION_ST),
   d.REGISTERD_SEED_IND,
   Cns_Fn_Get_Codelist_Dsc("CONTAINER_TYPE_CD",a.CONTAINER_TYPE_CD),
   UPPER(RPAD(a.STORAGE_FCLTY_ID,3,' ')||RPAD(a.FROM_SECTION_ID,3,' ')||RPAD(a.FROM_SHELF_ID,1,' ')||RPAD(a.FROM_POSITION_ID,3,' ')),
   UPPER(RPAD(a.STORAGE_FCLTY_ID,3,' ')||RPAD(a.TO_SECTION_ID,3,' ')||RPAD(a.TO_SHELF_ID,1,' ')||RPAD(a.TO_POSITION_ID,3,' '))
FROM
  CNS_T_ASSIGND_INV_LOC a,
  CNS_T_ASSIGNED_INV_DT b,
  CNS_T_INVENTORY_FCLTY c,
  CNS_T_SEEDLOT d,
  CNS_T_REQUEST_ITEM I
WHERE
    c.STORAGE_FCLTY_ID = a.STORAGE_FCLTY_ID
AND b.INVENTORY_SKEY = a.INVENTORY_SKEY
AND b.SEEDLOT_NUMBER IS NOT NULL
AND d.SEEDLOT_NUMBER(+) = b.SEEDLOT_NUMBER
AND i.REQUEST_SKEY (+) = b.REQUEST_SKEY
AND i.ITEM_ID (+) = b.ITEM_ID;


-- CONSEP.ASSIGNED_LOC_SUMS source

CREATE OR REPLACE VIEW CONSEP.ASSIGNED_LOC_SUMS
(INVLOCATIONKEYFROM,SEEDLOT_COUNT,VEG_ST,AVAIL_QTY_SUM,COMMITTED_SUM)
AS
SELECT INV.INVLOCATIONKEYFROM AS INVLOCATIONKEYFROM,
Count(SEEDLOT_NUMBER) AS SEEDLOT_COUNT,
VEGETATION_ST AS VEG_ST,
Sum(AVAIL_QTY) AS AVAIL_QTY_SUM,
Sum(COMMITTED) AS COMMITTED_SUM
FROM ASSIGNED_INV INV
WHERE INV.INVLOCATIONKEYFROM=INV.INVLOCATIONKEYTO
GROUP BY INV.INVLOCATIONKEYFROM,  VEGETATION_ST
ORDER by 1;


-- CONSEP.ASSIGN_INV_CALC_STOR_SPACE source

CREATE OR REPLACE VIEW CONSEP.ASSIGN_INV_CALC_STOR_SPACE
(INVLOCATIONKEYFROM,INVLOCATIONKEYTO,SEEDLOT_NUMBER,CALC_COUNT)
AS
SELECT invlocationkeyfrom, invlocationkeyto, seedlot_number,
          (SELECT COUNT (*)
             FROM all_inv_locn
            WHERE invlocationkey >= invlocationkeyfrom
              AND invlocationkey <= invlocationkeyto) AS calc_count
     FROM assigned_inv;


-- CONSEP.AVAIL_SEED_QTY source

CREATE OR REPLACE VIEW CONSEP.AVAIL_SEED_QTY
(SEEDLOT_NUMBER,QTY_RESERVED_AVAIL,QTY_SURPLUS_AVAIL,AVAIL_QTY,"COMMITTED")
AS
SELECT
a.SEEDLOT_NUMBER,
NVL(SUM(b.QTY_RESERVED - b.QTY_RSRVD_CMTD_PLN - b.QTY_RSRVD_CMTD_APR),0),
NVL(SUM(b.QTY_SURPLUS - b.QTY_SRPLS_CMTD_PLN - b.QTY_SRPLS_CMTD_APR),0),
NVL(SUM(b.QTY_RESERVED - b.QTY_RSRVD_CMTD_PLN - b.QTY_RSRVD_CMTD_APR
+ b.QTY_SURPLUS - b.QTY_SRPLS_CMTD_PLN - b.QTY_SRPLS_CMTD_APR),0),
NVL(SUM(b.QTY_RSRVD_CMTD_PLN + b.QTY_RSRVD_CMTD_APR + b.QTY_SRPLS_CMTD_PLN + b.QTY_SRPLS_CMTD_APR),0)
FROM    CNS_T_SEEDLOT a,
CNS_T_SEEDLOT_OWN_QTY b
WHERE
b.SEEDLOT_NUMBER(+) = a.SEEDLOT_NUMBER
GROUP BY
a.SEEDLOT_NUMBER;


-- CONSEP.AVAIL_SEED_QTY_WITHFAMILY source

CREATE OR REPLACE VIEW CONSEP.AVAIL_SEED_QTY_WITHFAMILY
(SEEDLOT_NUMBER,QTY_RESERVED_AVAIL,QTY_SURPLUS_AVAIL,AVAIL_QTY,"COMMITTED")
AS
SELECT   a.seedlot_number,
            NVL (SUM (  b.qty_reserved
                      - b.qty_rsrvd_cmtd_pln
                      - b.qty_rsrvd_cmtd_apr
                     ),
                 0
                ),
            NVL (SUM (  b.qty_surplus
                      - b.qty_srpls_cmtd_pln
                      - b.qty_srpls_cmtd_apr
                     ),
                 0
                ),
            NVL (SUM (  b.qty_reserved
                      - b.qty_rsrvd_cmtd_pln
                      - b.qty_rsrvd_cmtd_apr
                      + b.qty_surplus
                      - b.qty_srpls_cmtd_pln
                      - b.qty_srpls_cmtd_apr
                     ),
                 0
                ),
            NVL (SUM (  b.qty_rsrvd_cmtd_pln
                      + b.qty_rsrvd_cmtd_apr
                      + b.qty_srpls_cmtd_pln
                      + b.qty_srpls_cmtd_apr
                     ),
                 0
                )
       FROM cns_t_seedlot a, cns_t_seedlot_own_qty b
      WHERE b.seedlot_number(+) = a.seedlot_number
   GROUP BY a.seedlot_number
   UNION
   SELECT family_lot_number, NULL, NULL, current_balance, NULL
     FROM consep.familylot_curr_balance;


-- CONSEP.A_SLEEP source

CREATE OR REPLACE VIEW CONSEP.A_SLEEP
(WHAT)
AS
(SELECT consep.a_sleep_15 (15) AS what
   FROM DUAL);


-- CONSEP.A_SLEEP_15 source

CREATE OR REPLACE VIEW CONSEP.A_SLEEP_15
(WHAT)
AS
(SELECT fn_sleep (15) AS what
      FROM DUAL);


-- CONSEP.A_SLEEP_30 source

CREATE OR REPLACE VIEW CONSEP.A_SLEEP_30
(WHAT)
AS
(SELECT fn_sleep (30) AS what
      FROM DUAL);


-- CONSEP.A_SLEEP_60 source

CREATE OR REPLACE VIEW CONSEP.A_SLEEP_60
(WHAT)
AS
(SELECT fn_sleep (60) AS what
      FROM DUAL);


-- CONSEP.A_SLEEP_61 source

CREATE OR REPLACE VIEW CONSEP.A_SLEEP_61
(WHAT)
AS
(SELECT fn_sleep (61) AS what
      FROM DUAL);


-- CONSEP.CLIENT_ACRONYM source

CREATE OR REPLACE VIEW CONSEP.CLIENT_ACRONYM
(CLIENT_NUMBER,CLIENT_ACRONYM,REVISION_COUNT)
AS
SELECT "CLIENT_NUMBER","CLIENT_ACRONYM","REVISION_COUNT" from THE.CLIENT_ACRONYM;


-- CONSEP.CLIENT_LOCATION source

CREATE OR REPLACE VIEW CONSEP.CLIENT_LOCATION
(CLIENT_NUMBER,CLIENT_LOCN_CODE,CLIENT_LOCN_NAME,ADDRESS_1,ADDRESS_2,ADDRESS_3,CITY,PROVINCE,POSTAL_CODE,COUNTRY,BUSINESS_PHONE,HOME_PHONE)
AS
SELECT "CLIENT_NUMBER","CLIENT_LOCN_CODE","CLIENT_LOCN_NAME","ADDRESS_1","ADDRESS_2","ADDRESS_3","CITY","PROVINCE","POSTAL_CODE","COUNTRY","BUSINESS_PHONE","HOME_PHONE" from THE.CLIENT_LOCATION;


-- CONSEP.CNS10SEEDACT source

CREATE OR REPLACE VIEW CONSEP.CNS10SEEDACT
(REQ_ID,REQUEST_ITEM,REQUEST_SKEY,ITEM_ID,REQUEST_TYPE_ST,SPR_RQST_STATUS_ST,PRIORITY_DT,VEGETATION_ST,REQUEST_COMMENT,SEEDLOT_SAMPLE,SEEDLOT_DISPLAY,NO_OF_CONTAINERS,CLCTN_VOLUME,EXTRCT_CLI_NUMBER,EXTRCT_CLI_LOCN_CD,EXTRCT_CLI_CITY,EXTRCT_CLI_NAME,RQST_CLI_CITY,RQST_CLI_NAME,PROCESSNG_CMPLT_DT,LNGTERM_STRG_ST_DT,EXTRCT_CLI_ACRNM,SPAR_FUND_SRCE_ST,SPAR_FUND_SRCE_DSC,RQST_CLI_NUMBER,RQST_CLI_LOCN_CD,RQST_CLI_ACRNM,MULTIPLE_OWNER,REQUEST_YR,REQUEST_SEQUENCE,SAMPLE_ID,SEED_QUANTITY,SPR_RQST_STS_DSC,LST_TSC_CMNT_DT,CONE_SEED_RCVD_DT,BLENDED_DT,TESTING_CMPLT_DT,ORIGINAL_SEED_QTY,PRCND_DT,EXTRCT_DT,PROCESS_DT,REGISTERED_DT,CLASS,ORIGINAL_POTENTIAL_TREES)
AS
SELECT
a.REQUEST_TYPE_ST||a.REQUEST_YR||LPAD(TO_CHAR(a.REQUEST_SEQUENCE),4,'0'),
a.REQUEST_TYPE_ST||a.REQUEST_YR||
LPAD(TO_CHAR(a.REQUEST_SEQUENCE),4,'0')||' ',
b.REQUEST_SKEY,
' ' ITEM_ID,
a.REQUEST_TYPE_ST,
a.SPR_RQST_STATUS_ST,
a.PRIORITY_DT,
a.VEGETATION_ST,
a.REQUEST_COMMENT,
c.SEEDLOT_NUMBER,
DECODE(e.REGISTERD_SEED_IND, -1,
c.SEEDLOT_NUMBER, c.SEEDLOT_NUMBER||'U'),
e.NO_OF_CONTAINERS,
e.CLCTN_VOLUME,
e.EXTRCT_CLI_NUMBER,
e.EXTRCT_CLI_LOCN_CD,
Cns_Fn_Get_Client_City(e.EXTRCT_CLI_NUMBER, e.EXTRCT_CLI_LOCN_CD        ),
Cns_Fn_Get_Client_Name(e.EXTRCT_CLI_NUMBER, NULL),
Cns_Fn_Get_Client_City(Cns_Fn_Get_Rqst_Cli_Number(c.SEEDLOT_NUMBER),
Cns_Fn_Get_Rqst_Cli_Locn_Cd(c.SEEDLOT_NUMBER)),
Cns_Fn_Get_Client_Name(Cns_Fn_Get_Rqst_Cli_Number(c.SEEDLOT_NUMBER), NULL),
e.PROCESSNG_CMPLT_DT,
Cns_Fn_Get_Seedlot_Storage_dt(e.seedlot_number),
Cns_Fn_Get_Client_Acronym(e.EXTRCT_CLI_NUMBER, NULL),
Cns_Fn_Get_Spar_Fund_Srce_St(c.SEEDLOT_NUMBER),
Cns_Fn_Get_Spar_Fund_Srce_Dsc(Cns_Fn_Get_Spar_Fund_Srce_St(c.SEEDLOT_NUMBER),
c.SEEDLOT_NUMBER),
Cns_Fn_Get_Rqst_Cli_Number(c.SEEDLOT_NUMBER),
Cns_Fn_Get_Rqst_Cli_Locn_Cd(c.SEEDLOT_NUMBER),
Cns_Fn_Get_Rqst_Cli_Acrnm(c.SEEDLOT_NUMBER),
Cns_Fn_Get_Multiple_Owner(c.SEEDLOT_NUMBER),
a.REQUEST_YR,
a.REQUEST_SEQUENCE,
b.SAMPLE_ID,
b.SEED_QUANTITY,
a.SPR_RQST_STATUS_ST,
Cns_Fn_Get_Lst_Tsc_Cmnt_Dt(b.REQUEST_SKEY, b.ITEM_ID),
Cns_Fn_Get_Act_Cn_Sd_Rcvd_Dt(b.REQUEST_SKEY, b.ITEM_ID),
Cns_Fn_Get_Act_Blend_Dt(b.REQUEST_SKEY, b.ITEM_ID),
Cns_Fn_Get_Act_Test_Cmplt_Dt(b.REQUEST_SKEY, b.ITEM_ID),
e.ORIGINAL_SEED_QTY,
Cns_Fn_Get_Act_Prcnd_Dt(b.REQUEST_SKEY, b.ITEM_ID),
Cns_Fn_Get_Act_Extrct_Dt(b.REQUEST_SKEY, b.ITEM_ID, a.VEGETATION_ST),
Cns_Fn_Get_Act_Proc_Dt(b.REQUEST_SKEY, b.ITEM_ID, c.SEEDLOT_NUMBER),
e.REGISTERED_DT,
e.GENETIC_CLASS_CODE||DECODE(NVL(e.SUPERIOR_PRVNC_IND,0),-1,'+',' '),
f.ORIGINAL_POTENTIAL_TREES
FROM    CNS_T_SPAR_REQUEST a,
CNS_T_REQUEST_ITEM b,
CNS_T_REQUEST_SEEDLOT c,
CNS_T_CODE_SUBSET_TBL d,
CNS_T_SEEDLOT e,
ORIGINAL_POTENTIAL_TREES f
WHERE   a.REQUEST_SKEY = b.REQUEST_SKEY
AND     b.REQUEST_SKEY (+) = c.REQUEST_SKEY
AND     b.ITEM_ID (+) = c.ITEM_ID
AND     a.REQUEST_TYPE_ST = d.CODE_ARGUMENT
AND     d.CODE_SUBSET_NAME='CSP_RQST_TYPE_ST'
AND     d.COLUMN_NAME='SEEDLOT_TRNSCTN_CD'
AND     e.SEEDLOT_NUMBER=c.SEEDLOT_NUMBER
AND 	e.seedlot_number = f.seedlot_number (+);


-- CONSEP.CNS10SEEDACT_OWNERS source

CREATE OR REPLACE VIEW CONSEP.CNS10SEEDACT_OWNERS
(REQ_ID,REQUEST_ITEM,REQUEST_SKEY,ITEM_ID,REQUEST_TYPE_ST,SPR_RQST_STATUS_ST,PRIORITY_DT,VEGETATION_ST,REQUEST_COMMENT,SEEDLOT_SAMPLE,SEEDLOT_DISPLAY,NO_OF_CONTAINERS,CLCTN_VOLUME,EXTRCT_CLI_NUMBER,EXTRCT_CLI_LOCN_CD,EXTRCT_CLI_CITY,EXTRCT_CLI_NAME,RQST_CLI_CITY,RQST_CLI_NAME,PROCESSNG_CMPLT_DT,LNGTERM_STRG_ST_DT,EXTRCT_CLI_ACRNM,SPAR_FUND_SRCE_ST,SPAR_FUND_SRCE_DSC,RQST_CLI_NUMBER,RQST_CLI_LOCN_CD,RQST_CLI_ACRNM,MULTIPLE_OWNER,REQUEST_YR,REQUEST_SEQUENCE,SAMPLE_ID,SEED_QUANTITY,SPR_RQST_STS_DSC,LST_TSC_CMNT_DT,CONE_SEED_RCVD_DT,BLENDED_DT,TESTING_CMPLT_DT,ORIGINAL_SEED_QTY,PRCND_DT,EXTRCT_DT,PROCESS_DT,REGISTERED_DT,CLASS,ORIGINAL_POTENTIAL_TREES)
AS
SELECT
a.REQUEST_TYPE_ST||a.REQUEST_YR||LPAD(TO_CHAR(a.REQUEST_SEQUENCE),4,'0'),
a.REQUEST_TYPE_ST||a.REQUEST_YR||
LPAD(TO_CHAR(a.REQUEST_SEQUENCE),4,'0')||' ',
b.REQUEST_SKEY,
' ' ITEM_ID,
a.REQUEST_TYPE_ST,
a.SPR_RQST_STATUS_ST,
a.PRIORITY_DT,
a.VEGETATION_ST,
a.REQUEST_COMMENT,
c.SEEDLOT_NUMBER,
DECODE(e.REGISTERD_SEED_IND, -1,
c.SEEDLOT_NUMBER, c.SEEDLOT_NUMBER||'U'),
e.NO_OF_CONTAINERS*nvl(ORIGINAL_PCT_OWNED,100)/100,
e.CLCTN_VOLUME*nvl(ORIGINAL_PCT_OWNED,100)/100,
e.EXTRCT_CLI_NUMBER,
e.EXTRCT_CLI_LOCN_CD,
Cns_Fn_Get_Client_City(e.EXTRCT_CLI_NUMBER, e.EXTRCT_CLI_LOCN_CD        ),
Cns_Fn_Get_Client_Name(e.EXTRCT_CLI_NUMBER, NULL),
Cns_Fn_Get_Client_City(f.OWNER_NUMBER, f.OWNER_LOCN_CODE),
Cns_Fn_Get_Client_Name(f.OWNER_NUMBER, NULL),
e.PROCESSNG_CMPLT_DT,
Cns_Fn_Get_Seedlot_Storage_dt(e.seedlot_number),
Cns_Fn_Get_Client_Acronym(e.EXTRCT_CLI_NUMBER, NULL),
f.SPAR_FUND_SRCE_ST,
Cns_Fn_Get_Spar_Fund_Srce_Dsc(f.SPAR_FUND_SRCE_ST,NULL),
f.OWNER_NUMBER,
f.OWNER_LOCN_CODE,
f.OWNER_ACRONYM,
0,
a.REQUEST_YR,
a.REQUEST_SEQUENCE,
b.SAMPLE_ID,
b.SEED_QUANTITY*nvl(ORIGINAL_PCT_OWNED,100)/100,
a.SPR_RQST_STATUS_ST,
Cns_Fn_Get_Lst_Tsc_Cmnt_Dt(b.REQUEST_SKEY, b.ITEM_ID),
Cns_Fn_Get_Act_Cn_Sd_Rcvd_Dt(b.REQUEST_SKEY, b.ITEM_ID),
Cns_Fn_Get_Act_Blend_Dt(b.REQUEST_SKEY, b.ITEM_ID),
Cns_Fn_Get_Act_Test_Cmplt_Dt(b.REQUEST_SKEY, b.ITEM_ID),
e.ORIGINAL_SEED_QTY*nvl(ORIGINAL_PCT_OWNED,100)/100,
Cns_Fn_Get_Act_Prcnd_Dt(b.REQUEST_SKEY, b.ITEM_ID),
Cns_Fn_Get_Act_Extrct_Dt(b.REQUEST_SKEY, b.ITEM_ID, a.VEGETATION_ST),
Cns_Fn_Get_Act_Proc_Dt(b.REQUEST_SKEY, b.ITEM_ID, c.SEEDLOT_NUMBER),
e.REGISTERED_DT,
e.GENETIC_CLASS_CODE||DECODE(NVL(e.SUPERIOR_PRVNC_IND,0),-1,'+',' '),
g.ORIGINAL_POTENTIAL_TREES
FROM    CNS_T_SPAR_REQUEST a,
CNS_T_REQUEST_ITEM b,
CNS_T_REQUEST_SEEDLOT c,
CNS_T_CODE_SUBSET_TBL d,
CNS_T_SEEDLOT e,
ORIGINAL_SEED_OWNERS F,
ORIGINAL_POTENTIAL_TREES g
WHERE   a.REQUEST_SKEY = b.REQUEST_SKEY
AND     b.REQUEST_SKEY (+) = c.REQUEST_SKEY
AND     b.ITEM_ID (+) = c.ITEM_ID
AND     a.REQUEST_TYPE_ST = d.CODE_ARGUMENT
AND     d.CODE_SUBSET_NAME='CSP_RQST_TYPE_ST'
AND     d.COLUMN_NAME='SEEDLOT_TRNSCTN_CD'
AND     e.SEEDLOT_NUMBER=c.SEEDLOT_NUMBER
AND 	f.SEEDLOT_NUMBER(+)=c.SEEDLOT_NUMBER
AND		e.seedlot_number = g.seedlot_number(+);


-- CONSEP.CNS10SEEDPLN source

CREATE OR REPLACE VIEW CONSEP.CNS10SEEDPLN
(REQ_ID,REQUEST_ITEM,REQUEST_SKEY,ITEM_ID,REQUEST_TYPE_ST,SPR_RQST_STATUS_ST,PRIORITY_DT,VEGETATION_ST,REQUEST_COMMENT,SEEDLOT_SAMPLE,SEEDLOT_DISPLAY,NO_OF_CONTAINERS,CLCTN_VOLUME,EXTRCT_CLI_NUMBER,EXTRCT_CLI_LOCN_CD,EXTRCT_CLI_CITY,EXTRCT_CLI_NAME,RQST_CLI_CITY,RQST_CLI_NAME,PROCESSNG_CMPLT_DT,LNGTERM_STRG_ST_DT,EXTRCT_CLI_ACRNM,SPAR_FUND_SRCE_ST,SPAR_FUND_SRCE_DSC,RQST_CLI_NUMBER,RQST_CLI_LOCN_CD,RQST_CLI_ACRNM,MULTIPLE_OWNER,REQUEST_YR,REQUEST_SEQUENCE,SAMPLE_ID,SEED_QUANTITY,SPR_RQST_STS_DSC,LST_TSC_CMNT_DT,CONE_SEED_RCVD_DT,BLENDED_DT,TESTING_CMPLT_DT,ORIGINAL_SEED_QTY,PRCND_DT,EXTRCT_DT,PROCESS_DT,REGISTERED_DT,CLASS,ORIGINAL_POTENTIAL_TREES)
AS
SELECT
a.REQUEST_TYPE_ST||a.REQUEST_YR||LPAD(TO_CHAR(a.REQUEST_SEQUENCE),4,'0'),
a.REQUEST_TYPE_ST||a.REQUEST_YR||
  LPAD(TO_CHAR(a.REQUEST_SEQUENCE),4,'0')||' ',
b.REQUEST_SKEY,
' ' ITEM_ID,
a.REQUEST_TYPE_ST,
a.SPR_RQST_STATUS_ST,
a.PRIORITY_DT,
a.VEGETATION_ST,
a.REQUEST_COMMENT,
c.SEEDLOT_NUMBER,
DECODE(e.REGISTERD_SEED_IND, -1,
       c.SEEDLOT_NUMBER, c.SEEDLOT_NUMBER||'U'),
e.NO_OF_CONTAINERS,
e.CLCTN_VOLUME,
e.EXTRCT_CLI_NUMBER,
e.EXTRCT_CLI_LOCN_CD,
Cns_Fn_Get_Client_City(e.EXTRCT_CLI_NUMBER, e.EXTRCT_CLI_LOCN_CD        ),
Cns_Fn_Get_Client_Name(e.EXTRCT_CLI_NUMBER, NULL),
Cns_Fn_Get_Client_City(Cns_Fn_Get_Rqst_Cli_Number(c.SEEDLOT_NUMBER),
Cns_Fn_Get_Rqst_Cli_Locn_Cd(c.SEEDLOT_NUMBER)),
Cns_Fn_Get_Client_Name(Cns_Fn_Get_Rqst_Cli_Number(c.SEEDLOT_NUMBER), NULL),
e.PROCESSNG_CMPLT_DT,
Cns_Fn_Get_Seedlot_Storage_dt(e.seedlot_number),
Cns_Fn_Get_Client_Acronym(e.EXTRCT_CLI_NUMBER, NULL),
Cns_Fn_Get_Spar_Fund_Srce_St(c.SEEDLOT_NUMBER),
Cns_Fn_Get_Spar_Fund_Srce_Dsc(Cns_Fn_Get_Spar_Fund_Srce_St(c.SEEDLOT_NUMBER),
       c.SEEDLOT_NUMBER),
Cns_Fn_Get_Rqst_Cli_Number(c.SEEDLOT_NUMBER),
Cns_Fn_Get_Rqst_Cli_Locn_Cd(c.SEEDLOT_NUMBER),
Cns_Fn_Get_Rqst_Cli_Acrnm(c.SEEDLOT_NUMBER),
Cns_Fn_Get_Multiple_Owner(c.SEEDLOT_NUMBER),
a.REQUEST_YR,
a.REQUEST_SEQUENCE,
b.SAMPLE_ID,
b.SEED_QUANTITY,
a.SPR_RQST_STATUS_ST,
Cns_Fn_Get_Lst_Tsc_Cmnt_Dt(b.REQUEST_SKEY, b.ITEM_ID),
Cns_Fn_Get_Plan_Cn_Sd_Rcvd_Dt(b.REQUEST_SKEY, b.ITEM_ID),
Cns_Fn_Get_Plan_Blend_Dt(b.REQUEST_SKEY, b.ITEM_ID),
Cns_Fn_Get_Plan_Test_Cmplt_Dt(b.REQUEST_SKEY, b.ITEM_ID),
e.ORIGINAL_SEED_QTY,
Cns_Fn_Get_Plan_Prcnd_Dt(b.REQUEST_SKEY, b.ITEM_ID),
Cns_Fn_Get_Plan_Extrct_Dt(b.REQUEST_SKEY, b.ITEM_ID, a.VEGETATION_ST),
Cns_Fn_Get_Plan_Proc_Dt(b.REQUEST_SKEY, b.ITEM_ID, c.SEEDLOT_NUMBER),
e.REGISTERED_DT,
e.GENETIC_CLASS_CODE||DECODE(NVL(e.SUPERIOR_PRVNC_IND,0),-1,'+',' '),
f.ORIGINAL_POTENTIAL_TREES
FROM
    CNS_T_SPAR_REQUEST a,
    CNS_T_REQUEST_ITEM b,
    CNS_T_REQUEST_SEEDLOT c,
    CNS_T_CODE_SUBSET_TBL d,
    CNS_T_SEEDLOT e,
	ORIGINAL_POTENTIAL_TREES f
WHERE   a.REQUEST_SKEY = b.REQUEST_SKEY
AND     b.REQUEST_SKEY (+) = c.REQUEST_SKEY
AND     b.ITEM_ID (+) = c.ITEM_ID
AND     a.REQUEST_TYPE_ST = d.CODE_ARGUMENT
AND     d.CODE_SUBSET_NAME='CSP_RQST_TYPE_ST'
AND     d.COLUMN_NAME='SEEDLOT_TRNSCTN_CD'
AND     e.SEEDLOT_NUMBER=c.SEEDLOT_NUMBER
AND		e.SEEDLOT_NUMBER=f.SEEDLOT_NUMBER(+);


-- CONSEP.CNS17 source

CREATE OR REPLACE VIEW CONSEP.CNS17
(SEEDLOT_SAMPLE,REQ_ID,REQUEST_ITEM,ACTIVITY_TYPE_CD,STNDRD_ACTIVITY_ID,RIA_SKEY,SAMPLE_ID,SEEDLOT_NUMBER,SEEDLOT_DISPLAY,VEGETATION_ST,ITEM_ID,REVISED_START_DT,REVISED_END_DT,ACTUAL_BEGIN_DT_TM,ACTUAL_END_DT_TM,ACCEPT_RESULT_IND,TEST_RANK,TEST_COMPLETE_IND,GERM_TEST_IND,TEST_CATEGORY_CD,GERMINATION_PCT,MOISTURE_PCT,GERMINATION_VALUE,WEIGHT_PER_100,SEEDS_PER_GRAM,PURITY_PCT,OTHER_TEST_RESULT,ACTIVITY_DURATION,ACTVTY_TM_UNIT_DSC,COLUMN_NAME,SIGNIFICNT_STS_IND,PROCESS_COMMIT_IND,RIA_COMMENT,REQUEST_SKEY,ACTIVITY_TYPE_DSC,REQUEST_TYPE_ST,REQUEST_YR,SPAR_FUND_SRCE_ST,CURRENT_TEST_IND,PV,PV_GERM,PV_DAYS,SEED_WITHDRAWAL_DATE,ASSIGNED_TRAY_IND,GERMINATOR_TRAY_ID,SL_LAB_CRIT_COMMENT,ORCHARD_ID)
AS
SELECT DECODE (a.family_lot_number,
                  NULL, a.seedlot_number,
                  a.family_lot_number
                 ),
          a.request_id, a.request_id || a.item_id request_item,
          a.activity_type_cd, a.stndrd_activity_id, a.ria_skey, c.sample_id,
          a.seedlot_number,
          DECODE (a.family_lot_number,
                  NULL, DECODE (g.registerd_seed_ind,
                                -1, a.seedlot_number,
                                a.seedlot_number || 'U'
                               ),
                  a.family_lot_number
                 ),
          a.vegetation_st, a.item_id, a.revised_start_dt, a.revised_end_dt,
          TRUNC (a.actual_begin_dt_tm), TRUNC (a.actual_end_dt_tm),
          d.accept_result_ind, d.test_rank, d.test_complete_ind,
          cns_fn_get_germ_test_ind (a.activity_type_cd), a.test_category_cd,
          d.germination_pct, d.moisture_pct, d.germination_value,
          d.weight_per_100, d.seeds_per_gram, d.purity_pct,
          d.other_test_result, a.activity_duration,
          b.expanded_result actvty_tm_unit_dsc, b.column_name,
          a.significnt_sts_ind, a.process_commit_ind, a.ria_comment,
          c.request_skey, f.expanded_result, e.request_type_st,
          DECODE (e.request_type_st, 'SRQ', e.sowing_yr, e.request_yr),
          e.spar_fund_srce_st, d.current_test_ind,
          DECODE (d.peak_value_grm_pct || '//' || d.peak_value_no_days,
                  '/', NULL,
                  d.peak_value_grm_pct || '//' || d.peak_value_no_days
                 ),
          d.peak_value_grm_pct, d.peak_value_no_days, d.seed_withdrawal_date,
          DECODE (d.germinator_tray_id, NULL, 0, -1), d.germinator_tray_id,
          NVL ((SELECT COUNT (ria.ria_skey)
                  FROM cns_t_rqst_itm_actvty ria,
                       cns_t_tsc_test_result tesres,
                       cns_t_test_regime tr
                 WHERE ria.ria_skey = a.ria_skey
                   AND tesres.ria_skey = ria.ria_skey
                   AND ria.activity_type_cd = tr.seedlot_test_code
                   AND tesres.accept_result_ind = -1
                   AND tesres.test_complete_ind = -1
                   AND intrmdt_cleanr_ind = -1
                   AND tesres.test_rank = 'A'
                   AND tesres.current_test_ind = -1),
               0
              ), g.ORCHARD_ID
     FROM cns_t_rqst_itm_actvty a,
          cns_t_code_list_table b,
          cns_t_code_list_table f,
          cns_t_request_item c,
          cns_t_tsc_test_result d,
          cns_t_spar_request e,
          cns_t_seedlot g
    WHERE c.item_id = a.item_id
      AND c.request_skey = a.request_skey
      AND g.seedlot_number(+) = a.seedlot_number
      AND a.actvty_tm_unit_st = b.code_argument
      AND d.ria_skey = a.ria_skey
      AND a.activity_type_cd = f.code_argument
      AND e.request_skey = c.request_skey
      AND b.column_name = 'UNIT_OF_MEASURE_CD'
      AND f.column_name = 'ACTIVITY_TYPE_CD'
   UNION
   SELECT "SEEDLOT_SAMPLE", "REQ_ID", "REQUEST_ITEM", "ACTIVITY_TYPE_CD",
          "STNDRD_ACTIVITY_ID", "RIA_SKEY", "SAMPLE_ID", "SEEDLOT_NUMBER",
          "SEEDLOT_DISPLAY", "VEGETATION_ST", "ITEM_ID", "REVISED_START_DT",
          "REVISED_END_DT", "ACTUAL_BEGIN_DT_TM", "ACTUAL_END_DT_TM",
          "ACCEPT_RESULT_IND", "TEST_RANK", "TEST_COMPLETE_IND",
          "GERM_TEST_IND", "TEST_CATEGORY_CD", "GERMINATION_PCT",
          "MOISTURE_PCT", "GERMINATION_VALUE", "WEIGHT_PER_100",
          "SEEDS_PER_GRAM", "PURITY_PCT", "OTHER_TEST_RESULT",
          "ACTIVITY_DURATION", "ACTVTY_TM_UNIT_DSC", "COLUMN_NAME",
          "SIGNIFICNT_STS_IND", "PROCESS_COMMIT_IND", "RIA_COMMENT",
          "REQUEST_SKEY", "ACTIVITY_TYPE_DSC", "REQUEST_TYPE_ST",
          "REQUEST_YR", "SPAR_FUND_SRCE_ST", "CURRENT_TEST_IND", "PV",
          "PV_GERM", "PV_DAYS", "SEED_WITHDRAWAL_DATE", "ASSIGNED_TRAY_IND",
          "GERMINATOR_TRAY_ID", "SL_LAB_CRIT_COMMENT", "ORCHARD_ID"
     FROM cns17_mmc
   UNION
   SELECT "SEEDLOT_SAMPLE", "REQ_ID", "REQUEST_ITEM", "ACTIVITY_TYPE_CD",
          "STNDRD_ACTIVITY_ID", "RIA_SKEY", "SAMPLE_ID", "SEEDLOT_NUMBER",
          "SEEDLOT_DISPLAY", "VEGETATION_ST", "ITEM_ID", "REVISED_START_DT",
          "REVISED_END_DT", "ACTUAL_BEGIN_DT_TM", "ACTUAL_END_DT_TM",
          "ACCEPT_RESULT_IND", "TEST_RANK", "TEST_COMPLETE_IND",
          "GERM_TEST_IND", "TEST_CATEGORY_CD", "GERMINATION_PCT",
          "MOISTURE_PCT", "GERMINATION_VALUE", "WEIGHT_PER_100",
          "SEEDS_PER_GRAM", "PURITY_PCT", "OTHER_TEST_RESULT",
          "ACTIVITY_DURATION", "ACTVTY_TM_UNIT_DSC", "COLUMN_NAME",
          "SIGNIFICNT_STS_IND", "PROCESS_COMMIT_IND", "RIA_COMMENT",
          "REQUEST_SKEY", "ACTIVITY_TYPE_DSC", "REQUEST_TYPE_ST",
          "REQUEST_YR", "SPAR_FUND_SRCE_ST", "CURRENT_TEST_IND", "PV",
          "PV_GERM", "PV_DAYS", "SEED_WITHDRAWAL_DATE", "ASSIGNED_TRAY_IND",
          "GERMINATOR_TRAY_ID","SL_LAB_CRIT_COMMENT", "ORCHARD_ID"
     FROM cns17_sam;


-- CONSEP.CNS17_DATASHEET_QA source

CREATE OR REPLACE VIEW CONSEP.CNS17_DATASHEET_QA
(REQUEST_SKEY,RQST_STS,CLIENT_ACRONYM,REQUEST_CLIENT_ACRONYM,SHIPTO_CLI_NUM,SHIPTO_CLI_NUMBER,NRSRY_CLI_NUMBER,NRSRY_OBLIGATN_IND,SHIPTO_CLI_LOCN,SHIPTO_CLI_LOCN_CD,NRSRY_CLI_LOCN_CD,LATEST_ACTIONED_DT,SOW_DT,VEGETATION_ST,SEEDLOT_NUMBER,SEEDLOT_DISPLAY,INHOUSE_INV_NO,RQST_CLI_NUMBER,RQST_CLI_LOCN_CD,REQUEST_TYPE_ST,GRAMS,REQ_ID,REQ_ID_DISPLAY,ITEM_ID,STRAT_TYPE,GENETIC_CLASS_CODE,SUPERIOR_PRVNC_IND,SPAR_FUND_SRCE_ST,LABEL_IND,INVENTORY_IND,STOCK_TYPE,AGE_CLASS,TEST_GRAMS,GERMINATION_PCT,SEEDLOT_TEST_CODE,SHIP_DATE,WITHDRAWAL_DATE,STRAT_START_DATE,SPECIAL_SERVICE,SPECIAL_SERVICE_DATE,CRITICAL_COMMENTS_IND,PLANTING_SEASON_ST,ACT_ITEM_ID,DEFAULT_SOW_DATE,ORCHARD_ID,HAS_QA_ACT,CLASS,QTY_SEEDLINGS_RQST,DO_NOT_ACTION_IND,CALC_SOW_DATE,SOW_YR,SPEC_SOW_DATE,QTY_SEEDLINGS_CALC,ACTIVE_GTEST,SL_LAB_CRIT_COMMENT,SL_AVAIL_GRAMS,COUNT_OF_QA_TESTS,LAST_QA_DATE,WITHDRAWAL_END_DATE,STRAT,DAYS_IN_STRAT_AT_SHIP,SL_POT_TREES,CSP_SSP_REQUEST,COLLECTION_YEAR,CLCTN_START_DT,CLCTN_END_DT,CLCTN_VOLUME,ORIGINAL_SEED_QTY,YIELD_PER_HL,SOURCE_LOCATION,MEAN_LATITUDE,MEAN_LONGITUDE,MEAN_ELEVATION,ORCHARD,COLLECTION_AGENCY,COLLECTION_METHOD_1,COLLECTION_METHOD_2,EXTRACTORY,SPZ_SOURCE,BGC_ZONE,BEC_SL_BGC_STRING,STD_MC,PUR,SPG,FUS,SIR,CAL,CURRENT_A_RANKED_TEST_TYPE,CURRENT_GC,CURRENT_GC_TEST_DATE,QA_GERM_TEST_TYPE,QA_GC,NGR,QA_FALLDOWN,NGR_FALLDOWN,MMCQA,"PAT%","PAT%_PLUS_DEBRIS",QA_TEST_GERM_TRAY_ID,QA_TEST_GERMINATOR_ENTRY_DATE,QA_DAYS_COLD_STRAT,"QA_TEST_GERMINATOR_#",QA_TEST_COMMENTS,NGR_TEST_COMMENTS,"NGR_start_date")
AS
SELECT
--Modified July 2003 by mdellavi, suppress item_id display for SRQ/CSP type requests
          a.request_skey, a.spr_rqst_status_st,
          cns_fn_get_cli_nurs_acronym (DECODE (b.shipto_cli_number,
                                               NULL, DECODE
                                                        (b.nrsry_obligatn_ind,
                                                         -1, b.nrsry_cli_number,
                                                         NULL
                                                        ),
                                               b.shipto_cli_number
                                              ),
                                       DECODE (b.shipto_cli_locn_cd,
                                               NULL, DECODE
                                                        (b.nrsry_obligatn_ind,
                                                         -1, b.nrsry_cli_locn_cd,
                                                         NULL
                                                        ),
                                               b.shipto_cli_locn_cd
                                              )
                                      ),
          cns_fn_get_client_acronym (a.rqst_cli_number, NULL),
          DECODE (b.shipto_cli_number,
                  NULL, DECODE (b.nrsry_obligatn_ind,
                                -1, b.nrsry_cli_number,
                                NULL
                               ),
                  b.shipto_cli_number
                 ),
          b.shipto_cli_number, b.nrsry_cli_number, b.nrsry_obligatn_ind,
          DECODE (b.shipto_cli_locn_cd,
                  NULL, DECODE (b.nrsry_obligatn_ind,
                                -1, b.nrsry_cli_locn_cd,
                                NULL
                               ),
                  b.shipto_cli_locn_cd
                 ),
          b.shipto_cli_locn_cd, b.nrsry_cli_locn_cd,
          TRUNC (b.latest_actioned_dt),
          TRUNC (DECODE (b.spcfied_sowing_dt,
                         NULL, b.rcmnded_sowing_dt,
                         b.spcfied_sowing_dt
                        )
                ) sow_dt,
          d.vegetation_st, d.seedlot_number,
          DECODE (d.registerd_seed_ind,
                  -1, d.seedlot_number,
                  d.seedlot_number || 'U'
                 ),
          b.inhouse_inv_no, a.rqst_cli_number, a.rqst_cli_locn_cd,
          a.request_type_st, c.rqst_from_reserve + c.rqst_from_surplus grams,
          DECODE (a.request_type_st,
                  'SRQ', a.sowing_yr
                   || SUBSTR (e.org_unit_code, 1, 3)
                   || LPAD (TO_CHAR (a.request_sequence), 4, '0'),
                     a.request_type_st
                  || a.request_yr
                  || LPAD (TO_CHAR (a.request_sequence), 4, '0')
                 ) req_id,
          DECODE
             (a.request_type_st,
              'SRQ', a.sowing_yr
               || SUBSTR (e.org_unit_code, 1, 3)
               || LPAD (TO_CHAR (a.request_sequence), 4, '0')
               || ' ',
                 a.request_type_st
              || a.request_yr
              || LPAD (TO_CHAR (a.request_sequence), 4, '0')
              || SUBSTR (cns_fn_strip_item_id (a.request_type_st,
                                               a.request_skey,
                                               b.item_id
                                              ),
                         1,
                         1
                        )
             ) req_id_display,
          SUBSTR (cns_fn_strip_item_id (a.request_type_st,
                                        a.request_skey,
                                        b.item_id
                                       ),
                  1,
                  1
                 ) item_id,
          c.seedlot_test_code, d.genetic_class_code, d.superior_prvnc_ind,
          a.spar_fund_srce_st, b.label_ind, b.inventory_ind,
          a.seedling_stktyp_cd || a.seedling_contnr_cd stock_type,
          a.seedling_stkage_cd,
          c.rqst_test_reserve + c.rqst_test_surplus test_grams,
          c.germination_pct, c.seedlot_test_code,
          cns_fn_get_ship_date (b.request_skey, b.item_id),
          cns_fn_get_withdrawal_date (b.request_skey, b.item_id),
          cns_fn_get_strat_start_date (b.request_skey, b.item_id),
          cns_fn_get_special_service (b.request_skey, b.item_id),
          cns_fn_get_spcl_svc_date (b.request_skey, b.item_id),
          cns_fn_critical_comments (b.request_skey, b.item_id),
          a.planting_season_st, b.item_id,
          DECODE (a.request_type_st,
                  'SRQ', cns_fn_m_def_sow_date (a.request_skey),
                  'N'
                 ),
          d.orchard_id, j.qa_ind,
             d.genetic_class_code
          || DECODE (NVL (d.superior_prvnc_ind, 0), -1, '+', ' '),
          a.qty_seedlings_rqst, b.do_not_action_ind,
          DECODE (a.request_type_st,
                  'SRQ', cns_fn_calc_sow_date (a.request_skey),
                  NULL
                 ),
          DECODE (a.request_type_st, 'SRQ', a.sowing_yr, a.request_yr),
          b.spcfied_sowing_dt, b.rqst_sdlngs_rsrvd + b.rqst_sdlngs_srpls,
          cns_fn_sl_curr_gtest_str (c.seedlot_number),
          NVL ((SELECT COUNT (ria.ria_skey)
                  FROM cns_t_rqst_itm_actvty ria,
                       cns_t_tsc_test_result tesres,
                       cns_t_test_regime tr
                 WHERE ria.seedlot_number = c.seedlot_number
                   AND ria.ria_skey = tesres.ria_skey
                   AND ria.stndrd_activity_id = tr.seedlot_test_code
                   AND tesres.accept_result_ind = -1
                   AND tesres.test_complete_ind = -1
                   AND intrmdt_cleanr_ind = -1
                   AND tesres.test_rank = 'A'
                   AND tesres.current_test_ind = -1),
               0
              ),
          avail_qty,
           --Modified August 2017 by ebiranbaum, include count and last date for QA tests - Enhancement request
           (SELECT COUNT (ria.ria_skey)
                  FROM
                   cns_t_spar_request sr,
                   cns_t_rqst_itm_actvty ria,
                   cns_t_tsc_test_result tesres,
                   cns_t_test_regime reg
               WHERE ria.seedlot_number = c.seedlot_number
               AND sr.request_skey = ria.request_skey
               AND sr.request_type_st = 'SRQ'
               AND ria.ria_skey = tesres.ria_skey
               AND reg.seedlot_test_code = ria.activity_type_cd
               AND ria.test_category_cd = 'QA'
               AND tesres.test_complete_ind = -1
               AND ria.ACTUAL_END_DT_TM IS NOT NULL)count_of_qa_tests,
               (SELECT to_char(max(ria.ACTUAL_END_DT_TM), 'YYYY')
               FROM
                   cns_t_spar_request sr,
                   cns_t_rqst_itm_actvty ria,
                   cns_t_tsc_test_result tesres,
                   cns_t_test_regime reg
               WHERE ria.seedlot_number = c.seedlot_number
               AND sr.request_skey = ria.request_skey
               AND sr.request_type_st = 'SRQ'
               AND ria.ria_skey = tesres.ria_skey
               AND reg.seedlot_test_code = ria.activity_type_cd
               AND ria.test_category_cd = 'QA'
               AND tesres.test_complete_ind = -1
               AND ria.ACTUAL_END_DT_TM IS NOT NULL)last_qa_date,
               cns_fn_get_withdrawal_end_date (b.request_skey, b.item_id),
               cns_fn_get_strat (b.request_skey, b.item_id),
	       NVL(cns_fn_get_ship_date (b.request_skey, b.item_id) - cns_fn_get_strat_start_date (b.request_skey, b.item_id) - tr.SOAK_HOURS/24,0),
	       pot.POTENTIAL_TREES,
	       SUBSTR(NVL(cns_fn_get_csp_ssp_id (d.seedlot_number),'TST'),1,3),
	       EXTRACT(YEAR FROM d.clctn_start_dt),
	       d.clctn_start_dt,
	       d.clctn_end_dt,
	       d.clctn_volume,
	       cns50a.ORIGINAL_SEED_QTY,
               DECODE(cns50a.clctn_volume,0,0,cns50a.original_seed_qty / nullif((cns50a.clctn_volume * 1000),0)),
	       SPAR_SL.COLLECTION_LOCN_DESC,
	       SPAR_SL.LATITUDE_DEGREES || ' DEG' || ' ' || SPAR_SL.LATITUDE_MINUTES || ''' ' || lpad(SPAR_SL.LATITUDE_SECONDS,2, '0') || '"',
	       SPAR_SL.LONGITUDE_DEGREES || ' DEG' || ' ' ||SPAR_SL.LONGITUDE_MINUTES || ''' '|| lpad(SPAR_SL.LONGITUDE_SECONDS,2,'0') || '"',
	       d.CLCTN_ELEVATION,
	       d.ORCHARD_id,
	       coll_acro.client_acronym || ' ' || SPAR_SL.COLLECTION_CLI_LOCN_CD,
	       SPAR_SL.CONE_COLLECTION_METHOD_CODE,
	       SPAR_SL.CONE_COLLECTION_METHOD2_CODE,
	       cns_fn_get_client_acronym (SPAR_SL.EXTRCT_CLI_NUMBER, NULL) || ' ' || SPAR_SL.EXTRCT_CLI_LOCN_CD,
	       SUBSTR (cns_fn_spz_string (d.seedlot_number), 1, 40),
	       decode(CNS50A.ORCH_BEC_STRING, NULL, d.BGC_ZONE, substr(CNS50A.ORCH_BEC_STRING,1,4)),
	       decode(CNS50A.ORCH_BEC_STRING, NULL, d.BGC_ZONE || d.BGC_SUBZONE || d.BGC_VARIANT, CNS50A.ORCH_BEC_STRING),
	       curr_test.MOISTURE_PCT,
	       curr_test.PURITY_PCT,
	       curr_test.SEEDS_PER_GRAM,
	       cns_fn_get_current_fus(d.seedlot_number),
	       cns_fn_get_current_cal(d.seedlot_number),
	       cns_fn_get_current_sir(d.seedlot_number),
	       curr_test.ACTIVITY_TYPE_CD,
	       curr_test.GERMINATION_PCT,
	       curr_test.CURRENT_A_RANK_DATE,
	       qa_ria.STNDRD_ACTIVITY_ID,
	       qa_tesres.GERMINATION_PCT,
	       ngr_test.OTHER_TEST_RESULT,
  	       qa_tesres.GERMINATION_PCT - c.germination_pct,
	       ngr_test.OTHER_TEST_RESULT - c.germination_pct,
	       Cns_Fn_Get_MMCQA(a.request_skey,b.item_id),
               PAT_test.OTHER_TEST_RESULT,
               PAT_test.OTHER_TEST_RESULT+ nvl((PAT_test.SUM_DEBRIS / nullif((PAT_test.SUM_OSPP / nullif(PAT_test.OTHER_TEST_RESULT,0)),0)),0) ,
               qa_tesres.GERMINATOR_TRAY_ID,
               qa_tesres.GERMINATOR_ENTRY,
	       NVL(qa_tesres.GERMINATOR_ENTRY - qa_tesres.STRAT_START_DT,0),
	       qa_tesres.GERMINATOR_ID,
	       qa_ria.RIA_COMMENT,
	       ngr_test.RIA_COMMENT,
	       ngr_test.ACTUAL_BEGIN_DT_TM

     FROM cns_t_spar_request a,
          cns_t_request_item b,
          cns_t_request_seedlot c,
          cns_t_seedlot d,
          cns_t_org_unit e,
          req_has_qa_act j,
          avail_seed_qty avail,
	  POTENTIAL_TREES pot,
	  CNS50A,
	  SNP_T_SEEDLOT SPAR_SL,
	  cns_t_client_acronym coll_acro,
	  current_test_results curr_test,
	  cns_t_rqst_itm_actvty qa_ria,
          cns_t_tsc_test_result qa_tesres,
	  cns_t_test_regime tr,
         ( select ngr_ria.request_skey, ngr_ria.item_id, ngr_tesres.OTHER_TEST_RESULT , ngr_ria.RIA_COMMENT, ngr_ria.ACTUAL_BEGIN_DT_TM
            from cns_t_rqst_itm_actvty ngr_ria,
            cns_t_tsc_test_result ngr_tesres
            where ngr_ria.ria_skey =  ngr_tesres.ria_skey
            and ngr_ria.STNDRD_ACTIVITY_ID = 'NGR'
            and ngr_tesres.TEST_COMPLETE_IND = -1
	    and ngr_tesres.ACCEPT_RESULT_IND = -1) ngr_test,
         ( select pat_ria.request_skey, pat_ria.item_id, pat_tesres.OTHER_TEST_RESULT , sum(ONE_SEED_PER_PELLET) AS SUM_OSPP , sum(DEBRIS) AS SUM_DEBRIS
            from cns_t_rqst_itm_actvty pat_ria,
            cns_t_tsc_test_result pat_tesres,
	    CNS_T_TEST_REP_PELLET rep
            where pat_ria.ria_skey =  pat_tesres.ria_skey
            and   pat_ria.ria_skey = rep.ria_skey
            and pat_ria.STNDRD_ACTIVITY_ID = 'PAT'
	    and pat_tesres.TEST_COMPLETE_IND = -1
	    and pat_tesres.ACCEPT_RESULT_IND = -1
            group by pat_ria.request_skey, pat_ria.item_id, pat_tesres.OTHER_TEST_RESULT)PAT_test

    WHERE a.request_skey = b.request_skey
      AND a.org_unit_no = e.org_unit_no
      AND b.request_skey = c.request_skey
      AND b.item_id = c.item_id
      AND c.seedlot_number = d.seedlot_number
      AND b.request_skey = j.request_skey
      AND b.item_id = j.item_id
      and c.seedlot_number = avail.seedlot_number
      and c.seedlot_number = pot.seedlot_number
      AND c.seedlot_number = CNS50A.SEEDLOT
      AND c.seedlot_number = SPAR_SL.SEEDLOT_NUMBER
      AND SPAR_SL.COLLECTION_CLI_NUMBER = coll_acro.client_number(+)
      AND d.seedlot_number = curr_test.seedlot_number
      AND a.request_skey = qa_ria.request_skey
      AND b.item_id = qa_ria.item_id
      AND qa_ria.STNDRD_ACTIVITY_ID  = tr.SEEDLOT_TEST_CODE
      AND qa_ria.TEST_CATEGORY_CD = 'QA'
      AND qa_ria.ria_skey = qa_tesres.ria_skey
      AND a.request_skey = ngr_test.request_skey(+)
      AND b.item_id = ngr_test.item_id(+)
      AND a.request_skey = pat_test.request_skey (+)
      AND b.item_id = pat_test.item_id(+);


-- CONSEP.CNS17_DATASHEET_STD_MP source

CREATE OR REPLACE VIEW CONSEP.CNS17_DATASHEET_STD_MP
(VEGETATION_ST,SEEDLOT_TEST_CODE,SEEDLOT_NUMBER,GENETIC_CLASS_CODE,CLASS,SUPERIOR_PRVNC_IND,REGISTERD_SEED_IND,SEEDLOT_DISPLAY,RETEST_DUE_DATE,OVERDUE_DAYS,RETEST_CANCEL_IND,REQUEST_ID,ARANK_GERM_TYPE,ARANK_GERM_PCT,QTY_RESERVED_AVAIL,QTY_SURPLUS_AVAIL,AVAIL_QTY,POTENTIAL_TREES,FUNGAL_STRING,STORAGE_FCLTY_DESC,FROM_SECTION_ID,FROM_SHELF_ID,FROM_POSITION_ID,TO_SECTION_ID,TO_SHELF_ID,TO_POSITION_ID,SEEDS_PER_GRAM,M_SOWING_YR,GT_LENGTH,SPG_REP_COUNT,DET_RATE,CUR_G_DATE,ORIG_GERM_PCT,ORIG_GERM_DATE,ORIG_GERM_TYPE,SPZ_STRING,BGC_ZONE,BGC_SUBZONE,BGC_VARIANT,BEC_SL_BGC_STRING,FUNGAL_STR_VALUES,"Seedlot_Initial_Request_Type","Initial_Request_ID","Collection_Year","Collection_Start_Date","Collection_End_Date","Hl_collected",ORIGINAL_SEED_QTY,YIELD_PER_HL,SOURCE_LOCATION,MEAN_LATITUDE,MEAN_LONGITUDE,MEAN_ELEVATION,ORCHARD,COLLECTION_AGENCY,COLLECTION_METHOD_1,COLLECTION_METHOD_2,EXTRACTORY,SPZ_SOURCE,MCW,MC,PUR,FUS,CAL,SIR,"G_Test_active","A_ranked_Test_PV","A_ranked_Test_PV_calculated","Other_Germ_test_data","count_of_qa_tests","last_qa_date",NO_CONTAINERS,VIAL_DATE,"Abnorm_PCT","Arank_Tot_G_PCT")
AS
SELECT
c.VEGETATION_ST,
a.SEEDLOT_TEST_CODE,
c.SEEDLOT_NUMBER,
c.GENETIC_CLASS_CODE,
c.GENETIC_CLASS_CODE||DECODE(NVL(C.SUPERIOR_PRVNC_IND,0),-1,'+',' ') ,
c.SUPERIOR_PRVNC_IND,
c.REGISTERD_SEED_IND,
DECODE(c.REGISTERD_SEED_IND, -1,
c.SEEDLOT_NUMBER, c.SEEDLOT_NUMBER||'U'),
a.RETEST_DUE_DATE,
trunc(SYSDATE) - trunc(a.RETEST_DUE_DATE),
a.RETEST_CANCEL_IND,
a.REQUEST_ID,
g.ACTIVITY_TYPE_CD,
g.GERMINATION_PCT,
b.QTY_RESERVED_AVAIL,
b.QTY_SURPLUS_AVAIL,
b.AVAIL_QTY,
cns_fn_get_tpg(b.SEEDLOT_NUMBER, b.AVAIL_QTY),
cns_fn_fungal_string(c.SEEDLOT_NUMBER),
invloc.storage_fclty_desc, invloc.from_section_id, invloc.from_shelf_id,invloc.from_position_id,
invloc.to_section_id, invloc.to_shelf_id, invloc.to_position_id,
curr_test.seeds_per_gram ,
m.M_SOWING_YR ,
(SOAK_HOURS+STRAT_HOURS+COUNT_HOURS+nvl(WARM_STRAT_HOURS,0))/24,
SPG_REP_COUNT,
to_char(decode(orig_g.ACTIVITY_TYPE_CD,g.ACTIVITY_TYPE_CD,decode((g.ACTUAL_END_DT_TM - orig_g.TEST_END_DATE ),0,null,decode(trunc(g.ACTUAL_END_DT_TM),trunc(orig_g.TEST_END_DATE), null,(orig_g.GERMINATION_PCT - g.GERMINATION_PCT)/ ((trunc(g.ACTUAL_END_DT_TM) - trunc(orig_g.TEST_END_DATE ))/365))),NULL),'99.99999999'),--DET_RATE
trunc(g.ACTUAL_END_DT_TM),
orig_g.GERMINATION_PCT,
trunc(orig_g.TEST_END_DATE),
orig_g.ACTIVITY_TYPE_CD,
SUBSTR (cns_fn_spz_string (c.seedlot_number), 1, 40),
c.BGC_ZONE,
c.BGC_SUBZONE,
c.BGC_VARIANT,
decode(CNS50A.ORCH_BEC_STRING, NULL, c.BGC_ZONE || c.BGC_SUBZONE || c.BGC_VARIANT, CNS50A.ORCH_BEC_STRING),
cns_fn_fungal_str_values(c.seedlot_number),
SUBSTR(NVL(cns_fn_get_csp_ssp_id (c.seedlot_number),'TST'),1,3),
NVL(cns_fn_get_csp_ssp_id (c.seedlot_number),orig_g.request_id),
EXTRACT(YEAR FROM c.clctn_start_dt),
c.clctn_start_dt,
c.clctn_end_dt,
c.clctn_volume,
cns50a.ORIGINAL_SEED_QTY,
round(DECODE(cns50a.clctn_volume,0,0,cns50a.original_seed_qty / nullif((cns50a.clctn_volume * 1000),0)),3),
SPAR_SL.COLLECTION_LOCN_DESC,
SPAR_SL.LATITUDE_DEGREES || ' DEG' || ' ' || SPAR_SL.LATITUDE_MINUTES || ''' ' || lpad(SPAR_SL.LATITUDE_SECONDS,2, '0') || '"',
SPAR_SL.LONGITUDE_DEGREES || ' DEG' || ' ' ||SPAR_SL.LONGITUDE_MINUTES || ''' '|| lpad(SPAR_SL.LONGITUDE_SECONDS,2,'0') || '"',
c.CLCTN_ELEVATION,
c.ORCHARD_id,
coll_acro.client_acronym || ' ' || SPAR_SL.COLLECTION_CLI_LOCN_CD,
SPAR_SL.CONE_COLLECTION_METHOD_CODE || ' ' || cns_fn_get_codelist_dsc('CONE_CLCTN_MTHD_CD',SPAR_SL.CONE_COLLECTION_METHOD_CODE)  ,
SPAR_SL.CONE_COLLECTION_METHOD2_CODE  || ' ' || cns_fn_get_codelist_dsc('CONE_CLCTN_MTHD_CD',SPAR_SL.CONE_COLLECTION_METHOD2_CODE) ,
cns_fn_get_client_acronym (SPAR_SL.EXTRCT_CLI_NUMBER, NULL) || ' ' || SPAR_SL.EXTRCT_CLI_LOCN_CD,
SUBSTR (cns_fn_spz_string (c.seedlot_number), 1, 40),
cns_fn_get_sl_current_MCW(c.seedlot_number),
curr_test.MOISTURE_PCT,
curr_test.PURITY_PCT,
cns_fn_get_current_fus(c.seedlot_number),
cns_fn_get_current_cal(c.seedlot_number),
cns_fn_get_current_sir(c.seedlot_number),
cns_fn_sl_curr_gtest_str (c.seedlot_number),
curr_test.pv,
round(curr_test.PEAK_VALUE_GRM_PCT/nullif(curr_test.PEAK_VALUE_NO_DAYS,0),2),
cns_fn_sl_gt_string(c.seedlot_number, g.ACTIVITY_TYPE_CD),
(SELECT COUNT (ria.ria_skey)
                  FROM
                   cns_t_spar_request sr,
                   cns_t_rqst_itm_actvty ria,
                   cns_t_tsc_test_result tesres,
                   cns_t_test_regime reg
               WHERE ria.seedlot_number = c.seedlot_number
               AND sr.request_skey = ria.request_skey
               AND sr.request_type_st = 'SRQ'
               AND ria.ria_skey = tesres.ria_skey
               AND reg.seedlot_test_code = ria.activity_type_cd
               AND ria.test_category_cd = 'QA'
               AND tesres.test_complete_ind = -1
               AND ria.ACTUAL_END_DT_TM IS NOT NULL)count_of_qa_tests,
               (SELECT to_char(max(ria.ACTUAL_END_DT_TM), 'YYYY')
               FROM
                   cns_t_spar_request sr,
                   cns_t_rqst_itm_actvty ria,
                   cns_t_tsc_test_result tesres,
                   cns_t_test_regime reg
               WHERE ria.seedlot_number = c.seedlot_number
               AND sr.request_skey = ria.request_skey
               AND sr.request_type_st = 'SRQ'
               AND ria.ria_skey = tesres.ria_skey
               AND reg.seedlot_test_code = ria.activity_type_cd
               AND ria.test_category_cd = 'QA'
               AND tesres.test_complete_ind = -1
               AND ria.ACTUAL_END_DT_TM IS NOT NULL)last_qa_date,
CNS50A.NO_CONTAINERS,
sv.sample_date,
g.ABNORMAL_PCT,
g.GERMINATION_PCT + g.ABNORMAL_PCT

FROM    CNS_T_RQST_TST_SRVC a,
AVAIL_SEED_QTY b,
CNS_T_SEEDLOT c,
RANKAGERM g,
(SELECT t1.seedlot_number, t1.request_skey, t3.storage_fclty_desc, 	t2.from_section_id, t2.from_shelf_id,
t2.from_position_id,t2.to_section_id, t2.to_shelf_id, t2.to_position_id
FROM CNS_T_ASSIGNED_INV_DT t1,
CNS_T_ASSIGND_INV_LOC t2,
CNS_T_INVENTORY_FCLTY t3
WHERE t1.inventory_skey = t2.inventory_skey
AND   t1.storage_end_dt_tm IS NULL
AND   t2.storage_fclty_id = t3.storage_fclty_id) invloc,
current_test_results curr_test,
LATEST_SOWING_YR_USED m ,
CNS_T_TEST_REGIME test_reg,
ORIGINAL_GERM_RESULTS_NO_GSA orig_g ,
CNS50A,
SNP_T_SEEDLOT SPAR_SL,
cns_t_client_acronym coll_acro,
SEEDLOT_SAMPLEVIALDATE SV



WHERE
a.SEEDLOT_NUMBER(+)    = c.SEEDLOT_NUMBER
AND c.SEEDLOT_NUMBER     = b.SEEDLOT_NUMBER
AND g.SEEDLOT_NUMBER     = c.SEEDLOT_NUMBER
and curr_test.seedlot_number = c.seedlot_number
AND invloc.SEEDLOT_NUMBER (+) = c.SEEDLOT_NUMBER
and m.seedlot_number = c.seedlot_number
and curr_test.ACTIVITY_TYPE_CD = test_reg.SEEDLOT_TEST_CODE
and c.seedlot_number = orig_g.seedlot_number(+)
AND c.seedlot_number = CNS50A.SEEDLOT
AND c.seedlot_number = SPAR_SL.SEEDLOT_NUMBER
AND SPAR_SL.COLLECTION_CLI_NUMBER = coll_acro.client_number(+)
AND c.seedlot_number = sv.seedlot_number(+);


-- CONSEP.CNS17_MMC source

CREATE OR REPLACE VIEW CONSEP.CNS17_MMC
(SEEDLOT_SAMPLE,REQ_ID,REQUEST_ITEM,ACTIVITY_TYPE_CD,STNDRD_ACTIVITY_ID,RIA_SKEY,SAMPLE_ID,SEEDLOT_NUMBER,SEEDLOT_DISPLAY,VEGETATION_ST,ITEM_ID,REVISED_START_DT,REVISED_END_DT,ACTUAL_BEGIN_DT_TM,ACTUAL_END_DT_TM,ACCEPT_RESULT_IND,TEST_RANK,TEST_COMPLETE_IND,GERM_TEST_IND,TEST_CATEGORY_CD,GERMINATION_PCT,MOISTURE_PCT,GERMINATION_VALUE,WEIGHT_PER_100,SEEDS_PER_GRAM,PURITY_PCT,OTHER_TEST_RESULT,ACTIVITY_DURATION,ACTVTY_TM_UNIT_DSC,COLUMN_NAME,SIGNIFICNT_STS_IND,PROCESS_COMMIT_IND,RIA_COMMENT,REQUEST_SKEY,ACTIVITY_TYPE_DSC,REQUEST_TYPE_ST,REQUEST_YR,SPAR_FUND_SRCE_ST,CURRENT_TEST_IND,PV,PV_GERM,PV_DAYS,SEED_WITHDRAWAL_DATE,ASSIGNED_TRAY_IND,GERMINATOR_TRAY_ID,SL_LAB_CRIT_COMMENT,ORCHARD_ID)
AS
SELECT DECODE (a.seedlot_number, NULL, c.sample_id, a.seedlot_number),
          a.request_id, a.request_id || a.item_id request_item,
          a.activity_type_cd, a.stndrd_activity_id, a.ria_skey, c.sample_id,
          a.seedlot_number,
          DECODE (g.registerd_seed_ind,
                  -1, a.seedlot_number,
                  a.seedlot_number || 'U'
                 ),
          a.vegetation_st, a.item_id, a.revised_start_dt, a.revised_end_dt,
          TRUNC (a.actual_begin_dt_tm), TRUNC (a.actual_end_dt_tm), -1, NULL,
          -1, 0, 'QA', NULL, target_moist_cont, NULL, NULL, NULL, NULL, NULL,
          a.activity_duration, NULL, NULL, a.significnt_sts_ind, 0,
          a.ria_comment, c.request_skey, f.expanded_result, e.request_type_st,
          DECODE (e.request_type_st, 'SRQ', e.sowing_yr, e.request_yr),
          e.spar_fund_srce_st, 0, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL
     FROM cns_t_rqst_itm_actvty a,
          cns_t_code_list_table f,
          cns_t_request_item c,
          cns_t_spar_request e,
          cns_t_seedlot g
    WHERE c.item_id = a.item_id
      AND c.request_skey = a.request_skey
      AND g.seedlot_number(+) = a.seedlot_number
      AND a.activity_type_cd = f.code_argument
      AND e.request_skey = c.request_skey
      AND f.column_name = 'ACTIVITY_TYPE_CD'
      AND a.stndrd_activity_id = 'MMC'
      AND work_centre_id = -1;


-- CONSEP.CNS17_ORIG source

CREATE OR REPLACE VIEW CONSEP.CNS17_ORIG
(SEEDLOT_SAMPLE,REQ_ID,REQUEST_ITEM,ACTIVITY_TYPE_CD,STNDRD_ACTIVITY_ID,RIA_SKEY,SAMPLE_ID,SEEDLOT_NUMBER,SEEDLOT_DISPLAY,VEGETATION_ST,ITEM_ID,REVISED_START_DT,REVISED_END_DT,ACTUAL_BEGIN_DT_TM,ACTUAL_END_DT_TM,ACCEPT_RESULT_IND,TEST_RANK,TEST_COMPLETE_IND,GERM_TEST_IND,TEST_CATEGORY_CD,GERMINATION_PCT,MOISTURE_PCT,GERMINATION_VALUE,WEIGHT_PER_100,SEEDS_PER_GRAM,PURITY_PCT,OTHER_TEST_RESULT,ACTIVITY_DURATION,ACTVTY_TM_UNIT_DSC,COLUMN_NAME,SIGNIFICNT_STS_IND,PROCESS_COMMIT_IND,RIA_COMMENT,REQUEST_SKEY,ACTIVITY_TYPE_DSC,REQUEST_TYPE_ST,REQUEST_YR,SPAR_FUND_SRCE_ST,CURRENT_TEST_IND,PV,PV_GERM,PV_DAYS,SEED_WITHDRAWAL_DATE,ASSIGNED_TRAY_IND,GERMINATOR_TRAY_ID,SL_LAB_CRIT_COMMENT)
AS
SELECT DECODE (a.family_lot_number,
                  NULL, a.seedlot_number,
                  'F' || SUBSTR (a.family_lot_number, 6, 8)
                 ),
          a.request_id, a.request_id || a.item_id request_item,
          a.activity_type_cd, a.stndrd_activity_id, a.ria_skey, c.sample_id,
          a.seedlot_number,
          DECODE (a.family_lot_number,
                  NULL, DECODE (g.registerd_seed_ind,
                                -1, a.seedlot_number,
                                a.seedlot_number || 'U'
                               ),
                  a.family_lot_number
                 ),
          a.vegetation_st, a.item_id, a.revised_start_dt, a.revised_end_dt,
          TRUNC (a.actual_begin_dt_tm), TRUNC (a.actual_end_dt_tm),
          d.accept_result_ind, d.test_rank, d.test_complete_ind,
          cns_fn_get_germ_test_ind (a.activity_type_cd), a.test_category_cd,
          d.germination_pct, d.moisture_pct, d.germination_value,
          d.weight_per_100, d.seeds_per_gram, d.purity_pct,
          d.other_test_result, a.activity_duration,
          b.expanded_result actvty_tm_unit_dsc, b.column_name,
          a.significnt_sts_ind, a.process_commit_ind, a.ria_comment,
          c.request_skey, f.expanded_result, e.request_type_st,
          DECODE (e.request_type_st, 'SRQ', e.sowing_yr, e.request_yr),
          e.spar_fund_srce_st, d.current_test_ind,
          DECODE (d.peak_value_grm_pct || '//' || d.peak_value_no_days,
                  '/', NULL,
                  d.peak_value_grm_pct || '//' || d.peak_value_no_days
                 ),
          d.peak_value_grm_pct, d.peak_value_no_days, d.seed_withdrawal_date,
          DECODE (d.germinator_tray_id, NULL, 0, -1), d.germinator_tray_id,
          NVL ((SELECT COUNT (ria.ria_skey)
                  FROM cns_t_rqst_itm_actvty ria,
                       cns_t_tsc_test_result tesres,
                       cns_t_test_regime tr
                 WHERE ria.ria_skey = a.ria_skey
                   AND tesres.ria_skey = ria.ria_skey
                   AND ria.activity_type_cd = tr.seedlot_test_code
                   AND tesres.accept_result_ind = -1
                   AND tesres.test_complete_ind = -1
                   AND intrmdt_cleanr_ind = -1
                   AND tesres.test_rank = 'A'
                   AND tesres.current_test_ind = -1),
               0
              )
     FROM cns_t_rqst_itm_actvty a,
          cns_t_code_list_table b,
          cns_t_code_list_table f,
          cns_t_request_item c,
          cns_t_tsc_test_result d,
          cns_t_spar_request e,
          cns_t_seedlot g
    WHERE c.item_id = a.item_id
      AND c.request_skey = a.request_skey
      AND g.seedlot_number(+) = a.seedlot_number
      AND a.actvty_tm_unit_st = b.code_argument
      AND d.ria_skey = a.ria_skey
      AND a.activity_type_cd = f.code_argument
      AND e.request_skey = c.request_skey
      AND b.column_name = 'UNIT_OF_MEASURE_CD'
      AND f.column_name = 'ACTIVITY_TYPE_CD'
   UNION
   SELECT "SEEDLOT_SAMPLE", "REQ_ID", "REQUEST_ITEM", "ACTIVITY_TYPE_CD",
          "STNDRD_ACTIVITY_ID", "RIA_SKEY", "SAMPLE_ID", "SEEDLOT_NUMBER",
          "SEEDLOT_DISPLAY", "VEGETATION_ST", "ITEM_ID", "REVISED_START_DT",
          "REVISED_END_DT", "ACTUAL_BEGIN_DT_TM", "ACTUAL_END_DT_TM",
          "ACCEPT_RESULT_IND", "TEST_RANK", "TEST_COMPLETE_IND",
          "GERM_TEST_IND", "TEST_CATEGORY_CD", "GERMINATION_PCT",
          "MOISTURE_PCT", "GERMINATION_VALUE", "WEIGHT_PER_100",
          "SEEDS_PER_GRAM", "PURITY_PCT", "OTHER_TEST_RESULT",
          "ACTIVITY_DURATION", "ACTVTY_TM_UNIT_DSC", "COLUMN_NAME",
          "SIGNIFICNT_STS_IND", "PROCESS_COMMIT_IND", "RIA_COMMENT",
          "REQUEST_SKEY", "ACTIVITY_TYPE_DSC", "REQUEST_TYPE_ST",
          "REQUEST_YR", "SPAR_FUND_SRCE_ST", "CURRENT_TEST_IND", "PV",
          "PV_GERM", "PV_DAYS", "SEED_WITHDRAWAL_DATE", "ASSIGNED_TRAY_IND",
          "GERMINATOR_TRAY_ID", "SL_LAB_CRIT_COMMENT"
     FROM cns17_mmc
   UNION
   SELECT "SEEDLOT_SAMPLE", "REQ_ID", "REQUEST_ITEM", "ACTIVITY_TYPE_CD",
          "STNDRD_ACTIVITY_ID", "RIA_SKEY", "SAMPLE_ID", "SEEDLOT_NUMBER",
          "SEEDLOT_DISPLAY", "VEGETATION_ST", "ITEM_ID", "REVISED_START_DT",
          "REVISED_END_DT", "ACTUAL_BEGIN_DT_TM", "ACTUAL_END_DT_TM",
          "ACCEPT_RESULT_IND", "TEST_RANK", "TEST_COMPLETE_IND",
          "GERM_TEST_IND", "TEST_CATEGORY_CD", "GERMINATION_PCT",
          "MOISTURE_PCT", "GERMINATION_VALUE", "WEIGHT_PER_100",
          "SEEDS_PER_GRAM", "PURITY_PCT", "OTHER_TEST_RESULT",
          "ACTIVITY_DURATION", "ACTVTY_TM_UNIT_DSC", "COLUMN_NAME",
          "SIGNIFICNT_STS_IND", "PROCESS_COMMIT_IND", "RIA_COMMENT",
          "REQUEST_SKEY", "ACTIVITY_TYPE_DSC", "REQUEST_TYPE_ST",
          "REQUEST_YR", "SPAR_FUND_SRCE_ST", "CURRENT_TEST_IND", "PV",
          "PV_GERM", "PV_DAYS", "SEED_WITHDRAWAL_DATE", "ASSIGNED_TRAY_IND",
          "GERMINATOR_TRAY_ID","SL_LAB_CRIT_COMMENT"
     FROM cns17_sam;


-- CONSEP.CNS17_PERF source

CREATE OR REPLACE VIEW CONSEP.CNS17_PERF
(SEEDLOT_SAMPLE,REQ_ID,REQUEST_ITEM,ACTIVITY_TYPE_CD,STNDRD_ACTIVITY_ID,RIA_SKEY,SAMPLE_ID,SEEDLOT_NUMBER,SEEDLOT_DISPLAY,VEGETATION_ST,ITEM_ID,REVISED_START_DT,REVISED_END_DT,ACTUAL_BEGIN_DT_TM,ACTUAL_END_DT_TM,ACCEPT_RESULT_IND,TEST_RANK,TEST_COMPLETE_IND,GERM_TEST_IND,TEST_CATEGORY_CD,GERMINATION_PCT,MOISTURE_PCT,GERMINATION_VALUE,WEIGHT_PER_100,SEEDS_PER_GRAM,PURITY_PCT,OTHER_TEST_RESULT,ACTIVITY_DURATION,ACTVTY_TM_UNIT_DSC,COLUMN_NAME,SIGNIFICNT_STS_IND,PROCESS_COMMIT_IND,RIA_COMMENT,REQUEST_SKEY,ACTIVITY_TYPE_DSC,REQUEST_TYPE_ST,REQUEST_YR,SPAR_FUND_SRCE_ST,CURRENT_TEST_IND,PV,PV_GERM,PV_DAYS,SEED_WITHDRAWAL_DATE,ASSIGNED_TRAY_IND,GERMINATOR_TRAY_ID,SL_LAB_CRIT_COMMENT)
AS
SELECT DECODE (a.seedlot_number, NULL, c.sample_id, a.seedlot_number),
          a.request_id, a.request_id || a.item_id request_item,
          a.activity_type_cd, a.stndrd_activity_id, a.ria_skey, c.sample_id,
          a.seedlot_number,
          DECODE (a.family_lot_number,
                  NULL, DECODE (g.registerd_seed_ind,
                                -1, a.seedlot_number,
                                a.seedlot_number || 'U'
                               ),
                  a.family_lot_number
                 ),
          a.vegetation_st, a.item_id, a.revised_start_dt, a.revised_end_dt,
          TRUNC (a.actual_begin_dt_tm), TRUNC (a.actual_end_dt_tm),
          d.accept_result_ind, d.test_rank, d.test_complete_ind,
          cns_fn_get_germ_test_ind (a.activity_type_cd), a.test_category_cd,
          d.germination_pct, d.moisture_pct, d.germination_value,
          d.weight_per_100, d.seeds_per_gram, d.purity_pct,
          d.other_test_result, a.activity_duration,
          b.expanded_result actvty_tm_unit_dsc, b.column_name,
          a.significnt_sts_ind, a.process_commit_ind, a.ria_comment,
          c.request_skey, f.expanded_result, e.request_type_st,
          DECODE (e.request_type_st, 'SRQ', e.sowing_yr, e.request_yr),
          e.spar_fund_srce_st, d.current_test_ind,
          DECODE (d.peak_value_grm_pct || '/' || d.peak_value_no_days,
                  '/', NULL,
                  d.peak_value_grm_pct || '/' || d.peak_value_no_days
                 ),
          d.peak_value_grm_pct, d.peak_value_no_days, d.seed_withdrawal_date,
          DECODE (d.germinator_tray_id, NULL, 0, -1), d.germinator_tray_id,
          cns_fn_lab_critical_comm (a.seedlot_number)
     FROM cns_t_rqst_itm_actvty a,
          cns_t_code_list_table b,
          cns_t_code_list_table f,
          cns_t_request_item c,
          cns_t_tsc_test_result d,
          cns_t_spar_request e,
          cns_t_seedlot g
    WHERE c.item_id = a.item_id
      AND c.request_skey = a.request_skey
      AND g.seedlot_number(+) = a.seedlot_number
      AND a.actvty_tm_unit_st = b.code_argument
      AND d.ria_skey = a.ria_skey
      AND a.activity_type_cd = f.code_argument
      AND e.request_skey = c.request_skey
      AND b.column_name = 'UNIT_OF_MEASURE_CD'
      AND f.column_name = 'ACTIVITY_TYPE_CD'
   UNION
   SELECT "SEEDLOT_SAMPLE", "REQ_ID", "REQUEST_ITEM", "ACTIVITY_TYPE_CD",
          "STNDRD_ACTIVITY_ID", "RIA_SKEY", "SAMPLE_ID", "SEEDLOT_NUMBER",
          "SEEDLOT_DISPLAY", "VEGETATION_ST", "ITEM_ID", "REVISED_START_DT",
          "REVISED_END_DT", "ACTUAL_BEGIN_DT_TM", "ACTUAL_END_DT_TM",
          "ACCEPT_RESULT_IND", "TEST_RANK", "TEST_COMPLETE_IND",
          "GERM_TEST_IND", "TEST_CATEGORY_CD", "GERMINATION_PCT",
          "MOISTURE_PCT", "GERMINATION_VALUE", "WEIGHT_PER_100",
          "SEEDS_PER_GRAM", "PURITY_PCT", "OTHER_TEST_RESULT",
          "ACTIVITY_DURATION", "ACTVTY_TM_UNIT_DSC", "COLUMN_NAME",
          "SIGNIFICNT_STS_IND", "PROCESS_COMMIT_IND", "RIA_COMMENT",
          "REQUEST_SKEY", "ACTIVITY_TYPE_DSC", "REQUEST_TYPE_ST",
          "REQUEST_YR", "SPAR_FUND_SRCE_ST", "CURRENT_TEST_IND", "PV",
          "PV_GERM", "PV_DAYS", "SEED_WITHDRAWAL_DATE", "ASSIGNED_TRAY_IND",
          "GERMINATOR_TRAY_ID", NULL
     FROM cns17_mmc;


-- CONSEP.CNS17_SAM source

CREATE OR REPLACE VIEW CONSEP.CNS17_SAM
(SEEDLOT_SAMPLE,REQ_ID,REQUEST_ITEM,ACTIVITY_TYPE_CD,STNDRD_ACTIVITY_ID,RIA_SKEY,SAMPLE_ID,SEEDLOT_NUMBER,SEEDLOT_DISPLAY,VEGETATION_ST,ITEM_ID,REVISED_START_DT,REVISED_END_DT,ACTUAL_BEGIN_DT_TM,ACTUAL_END_DT_TM,ACCEPT_RESULT_IND,TEST_RANK,TEST_COMPLETE_IND,GERM_TEST_IND,TEST_CATEGORY_CD,GERMINATION_PCT,MOISTURE_PCT,GERMINATION_VALUE,WEIGHT_PER_100,SEEDS_PER_GRAM,PURITY_PCT,OTHER_TEST_RESULT,ACTIVITY_DURATION,ACTVTY_TM_UNIT_DSC,COLUMN_NAME,SIGNIFICNT_STS_IND,PROCESS_COMMIT_IND,RIA_COMMENT,REQUEST_SKEY,ACTIVITY_TYPE_DSC,REQUEST_TYPE_ST,REQUEST_YR,SPAR_FUND_SRCE_ST,CURRENT_TEST_IND,PV,PV_GERM,PV_DAYS,SEED_WITHDRAWAL_DATE,ASSIGNED_TRAY_IND,GERMINATOR_TRAY_ID,SL_LAB_CRIT_COMMENT,ORCHARD_ID)
AS
SELECT DECODE (a.seedlot_number, NULL, c.sample_id, a.seedlot_number),
          a.request_id, a.request_id || a.item_id request_item,
          a.activity_type_cd, a.stndrd_activity_id, a.ria_skey, c.sample_id,
          a.seedlot_number,
          DECODE (g.registerd_seed_ind,
                  -1, a.seedlot_number,
                  a.seedlot_number || 'U'
                 ),
          a.vegetation_st, a.item_id, a.revised_start_dt, a.revised_end_dt,
          TRUNC (a.actual_begin_dt_tm), TRUNC (a.actual_end_dt_tm), -1, NULL,
          -1, 0, 'STD', NULL, target_moist_cont, NULL, NULL, NULL, NULL, NULL,
          a.activity_duration, NULL, NULL, a.significnt_sts_ind, 0,
          a.ria_comment, c.request_skey, f.expanded_result, e.request_type_st,
          DECODE (e.request_type_st, 'SRQ', e.sowing_yr, e.request_yr),
          e.spar_fund_srce_st, 0, NULL, NULL, NULL, NULL, NULL, NULL,0, NULL
     FROM cns_t_rqst_itm_actvty a,
          cns_t_code_list_table f,
          cns_t_request_item c,
          cns_t_spar_request e,
          cns_t_seedlot g
    WHERE c.item_id = a.item_id
      AND c.request_skey = a.request_skey
      AND g.seedlot_number(+) = a.seedlot_number
      AND a.activity_type_cd = f.code_argument
      AND e.request_skey = c.request_skey
      AND f.column_name = 'ACTIVITY_TYPE_CD'
      AND a.stndrd_activity_id = 'SAM'
--AND work_centre_id = -1;;


-- CONSEP.CNS20A source

CREATE OR REPLACE VIEW CONSEP.CNS20A
(GERMINATOR_NO,SHELF_NO,POSITION_NO,SEEDLOT_NUMBER,SAMPLE_SPC,VEGETATION_ST,SEEDLOT_NO,SAMPLE_ID,REQUEST_ITEM,REQUEST_ID,ITEM_ID,ACTIVITY_TYPE_CD,TEST_CATEGORY_CD,TEST_RANK,GERMINATION_PCT,RIA_SKEY,GERMINATION_VALUE,ACTIVITY_DSC)
AS
SELECT
e.GERMINATOR_NO,
e.SHELF_NO,
e.POSITION_NO,
c.SEEDLOT_NUMBER,
b.VEGETATION_ST SAMPLE_SPC,
a.VEGETATION_ST,
DECODE(a.REGISTERD_SEED_IND, -1,
       a.SEEDLOT_NUMBER, a.SEEDLOT_NUMBER||'U') SEEDLOT_NO,
b.SAMPLE_ID,
c.REQUEST_ID || SUBSTR(Cns_Fn_Strip_Item_Id('',c.request_skey,c.ITEM_ID),1,1) REQUEST_ITEM,
c.REQUEST_ID,
SUBSTR(Cns_Fn_Strip_Item_Id('',c.request_skey,c.ITEM_ID),1,1),
d.ACTIVITY_TYPE_CD,
d.TEST_CATEGORY_CD,
d.TEST_RANK,
d.GERMINATION_PCT,
d.RIA_SKEY,
d.GERMINATION_VALUE,
f.EXPANDED_RESULT
FROM
    CNS_T_SEEDLOT a,
    CNS_T_REQUEST_ITEM b,
    CNS_T_RQST_ITM_ACTVTY c,
    CNS_T_TSC_TEST_RESULT d,
    CNS_T_ASSIGND_GERM_LOC e,
    CNS_T_CODE_LIST_TABLE f
WHERE   b.ITEM_ID = c.ITEM_ID
AND     b.REQUEST_SKEY = c.REQUEST_SKEY
AND     c.RIA_SKEY = d.RIA_SKEY
AND     d.RIA_SKEY = e.RIA_SKEY
AND     a.SEEDLOT_NUMBER = c.SEEDLOT_NUMBER
AND     c.ACTIVITY_TYPE_CD = f.CODE_ARGUMENT
AND     f.COLUMN_NAME='ACTIVITY_TYPE_CD';


-- CONSEP.CNS21A source

CREATE OR REPLACE VIEW CONSEP.CNS21A
(ACTIVITY_TYPE_CD,TEST_CATEGORY_CD,SEEDLOT_NUMBER,SAMPLE_ID,REQUEST_ITEM,REQUEST_ID,ITEM_ID,RIA_SKEY,GERM_NEXT_STAGE_DT,STRAT_START_DT,GERM_CNT_START_DT,VEGETATION_ST,SOAK_HOURS,STRAT_HOURS,COUNT_HOURS,ACTUAL_BEGIN_DT_TM,REVISED_END_DT,GERMINATOR_NO,SHELF_NO,POSITION_NO)
AS
SELECT
--Modified July 2003 by mdellavi, suppress item_id display for SRQ/CSP type requests
b.ACTIVITY_TYPE_CD,
b.TEST_CATEGORY_CD,
b.SEEDLOT_NUMBER,
a.SAMPLE_ID,
b.REQUEST_ID||SUBSTR(Cns_Fn_Strip_Item_Id('',b.request_skey,b.ITEM_ID),1,1)  REQUEST_ITEM,
b.REQUEST_ID,
SUBSTR(Cns_Fn_Strip_Item_Id('',b.request_skey,b.ITEM_ID),1,1) ,
b.RIA_SKEY,
c.GERM_NEXT_STAGE_DT,
c.STRAT_START_DT,
c.GERM_CNT_START_DT,
b.VEGETATION_ST,
d.SOAK_HOURS,
d.STRAT_HOURS,
d.COUNT_HOURS,
b.ACTUAL_BEGIN_DT_TM,
b.REVISED_END_DT,
Cns_Fn_Get_Germ_Germinator_No(b.RIA_SKEY),
Cns_Fn_Get_Germ_Shelf_No(b.RIA_SKEY),
Cns_Fn_Get_Germ_Position_No(b.RIA_SKEY)
FROM
   CNS_T_REQUEST_ITEM a,
   CNS_T_RQST_ITM_ACTVTY b,
   CNS_T_TSC_TEST_RESULT c,
   CNS_T_TEST_REGIME d
WHERE   a.ITEM_ID = b.ITEM_ID
AND     a.REQUEST_SKEY = b.REQUEST_SKEY
AND     b.RIA_SKEY = c.RIA_SKEY
AND     c.ACTIVITY_TYPE_CD = d.SEEDLOT_TEST_CODE
AND     c.TEST_COMPLETE_IND=0;


-- CONSEP.CNS27_RETESTS source

CREATE OR REPLACE VIEW CONSEP.CNS27_RETESTS
(VEGETATION_ST,SEEDLOT_TEST_CODE,SEEDLOT_NUMBER,GENETIC_CLASS_CODE,CLASS,SUPERIOR_PRVNC_IND,REGISTERD_SEED_IND,SEEDLOT_DISPLAY,RETEST_DUE_DATE,OVERDUE_DAYS,RETEST_CANCEL_IND,REQUEST_ID,ARANK_GERM_TYPE,ARANK_GERM_PCT,QTY_RESERVED_AVAIL,QTY_SURPLUS_AVAIL,AVAIL_QTY,POTENTIAL_TREES,FUNGAL_STRING,STORAGE_FCLTY_DESC,FROM_SECTION_ID,FROM_SHELF_ID,FROM_POSITION_ID,TO_SECTION_ID,TO_SHELF_ID,TO_POSITION_ID,SEEDS_PER_GRAM,M_SOWING_YR,GT_LENGTH,SPG_REP_COUNT,DET_RATE,CUR_G_DATE,ORIG_GERM_PCT,ORIG_GERM_DATE,ORIG_GERM_TYPE,SPZ_STRING,BGC_ZONE,BGC_SUBZONE,BGC_VARIANT,BEC_SL_BGC_STRING,FUNGAL_STR_VALUES)
AS
SELECT
a.VEGETATION_ST,
a.SEEDLOT_TEST_CODE,
a.SEEDLOT_NUMBER,
c.GENETIC_CLASS_CODE,
c.GENETIC_CLASS_CODE||DECODE(NVL(C.SUPERIOR_PRVNC_IND,0),-1,'+',' ') ,
c.SUPERIOR_PRVNC_IND,
c.REGISTERD_SEED_IND,
DECODE(c.REGISTERD_SEED_IND, -1,
a.SEEDLOT_NUMBER, a.SEEDLOT_NUMBER||'U'),
a.RETEST_DUE_DATE,
trunc(SYSDATE) - trunc(a.RETEST_DUE_DATE),
a.RETEST_CANCEL_IND,
a.REQUEST_ID,
g.ACTIVITY_TYPE_CD,
g.GERMINATION_PCT,
b.QTY_RESERVED_AVAIL,
b.QTY_SURPLUS_AVAIL,
b.AVAIL_QTY,
cns_fn_get_tpg(b.SEEDLOT_NUMBER, b.AVAIL_QTY),
cns_fn_fungal_string(a.SEEDLOT_NUMBER),
invloc.storage_fclty_desc, invloc.from_section_id, invloc.from_shelf_id,invloc.from_position_id,
invloc.to_section_id, invloc.to_shelf_id, invloc.to_position_id,
curr_test.seeds_per_gram ,
m.M_SOWING_YR ,
(SOAK_HOURS+STRAT_HOURS+COUNT_HOURS+nvl(WARM_STRAT_HOURS,0))/24,
SPG_REP_COUNT,
to_char(decode(orig_g.ACTIVITY_TYPE_CD,g.ACTIVITY_TYPE_CD,decode((g.ACTUAL_END_DT_TM - orig_g.TEST_END_DATE ),0,null,decode(trunc(g.ACTUAL_END_DT_TM),trunc(orig_g.TEST_END_DATE), null,(orig_g.GERMINATION_PCT - g.GERMINATION_PCT)/ ((trunc(g.ACTUAL_END_DT_TM) - trunc(orig_g.TEST_END_DATE ))/365))),NULL),'99.99999999'),--DET_RATE
trunc(g.ACTUAL_END_DT_TM),
orig_g.GERMINATION_PCT,
trunc(orig_g.TEST_END_DATE),
orig_g.ACTIVITY_TYPE_CD,
SUBSTR (cns_fn_spz_string (a.seedlot_number), 1, 40),
c.BGC_ZONE,
c.BGC_SUBZONE,
c.BGC_VARIANT,
c.BGC_ZONE || c.BGC_SUBZONE || c.BGC_VARIANT,
cns_fn_fungal_str_values(a.seedlot_number)
FROM    CNS_T_RQST_TST_SRVC a,
AVAIL_SEED_QTY b,
CNS_T_SEEDLOT c,
RANKAGERM g,
(SELECT t1.seedlot_number, t1.request_skey, t3.storage_fclty_desc, 	t2.from_section_id, t2.from_shelf_id,
t2.from_position_id,t2.to_section_id, t2.to_shelf_id, t2.to_position_id
FROM CNS_T_ASSIGNED_INV_DT t1,
CNS_T_ASSIGND_INV_LOC t2,
CNS_T_INVENTORY_FCLTY t3
WHERE t1.inventory_skey = t2.inventory_skey
AND   t1.storage_end_dt_tm IS NULL
AND   t2.storage_fclty_id = t3.storage_fclty_id) invloc,
current_test_results curr_test,
LATEST_SOWING_YR_USED m ,
CNS_T_TEST_REGIME test_reg,
ORIGINAL_GERM_RESULTS_NO_GSA orig_g
WHERE
a.SEEDLOT_NUMBER     = b.SEEDLOT_NUMBER
AND c.SEEDLOT_NUMBER     = b.SEEDLOT_NUMBER
AND g.SEEDLOT_NUMBER     = c.SEEDLOT_NUMBER
and curr_test.seedlot_number = a.seedlot_number
AND invloc.SEEDLOT_NUMBER (+) = c.SEEDLOT_NUMBER
and m.seedlot_number = a.seedlot_number
and curr_test.ACTIVITY_TYPE_CD = test_reg.SEEDLOT_TEST_CODE
and c.seedlot_number = orig_g.seedlot_number;


-- CONSEP.CNS27_RETESTS_2 source

CREATE OR REPLACE VIEW CONSEP.CNS27_RETESTS_2
(VEGETATION_ST,SEEDLOT_TEST_CODE,SEEDLOT_NUMBER,GENETIC_CLASS_CODE,CLASS,SUPERIOR_PRVNC_IND,REGISTERD_SEED_IND,SEEDLOT_DISPLAY,RETEST_DUE_DATE,OVERDUE_DAYS,RETEST_CANCEL_IND,REQUEST_ID,ARANK_GERM_TYPE,ARANK_GERM_PCT,QTY_RESERVED_AVAIL,QTY_SURPLUS_AVAIL,AVAIL_QTY,POTENTIAL_TREES,FUNGAL_STRING,STORAGE_FCLTY_DESC,FROM_SECTION_ID,FROM_SHELF_ID,FROM_POSITION_ID,TO_SECTION_ID,TO_SHELF_ID,TO_POSITION_ID,SEEDS_PER_GRAM,M_SOWING_YR,GT_LENGTH,SPG_REP_COUNT,DET_RATE,CUR_G_DATE,ORIG_GERM_PCT,ORIG_GERM_DATE)
AS
SELECT
a.VEGETATION_ST,
a.SEEDLOT_TEST_CODE,
a.SEEDLOT_NUMBER,
c.GENETIC_CLASS_CODE,
c.GENETIC_CLASS_CODE||DECODE(NVL(C.SUPERIOR_PRVNC_IND,0),-1,'+',' ') ,
c.SUPERIOR_PRVNC_IND,
c.REGISTERD_SEED_IND,
DECODE(c.REGISTERD_SEED_IND, -1,
a.SEEDLOT_NUMBER, a.SEEDLOT_NUMBER||'U'),
a.RETEST_DUE_DATE,
trunc(SYSDATE) - trunc(a.RETEST_DUE_DATE),
a.RETEST_CANCEL_IND,
a.REQUEST_ID,
g.ACTIVITY_TYPE_CD,
g.GERMINATION_PCT,
b.QTY_RESERVED_AVAIL,
b.QTY_SURPLUS_AVAIL,
b.AVAIL_QTY,
cns_fn_get_tpg(b.SEEDLOT_NUMBER, b.AVAIL_QTY),
cns_fn_fungal_string(a.SEEDLOT_NUMBER),
invloc.storage_fclty_desc, invloc.from_section_id, invloc.from_shelf_id,invloc.from_position_id,
invloc.to_section_id, invloc.to_shelf_id, invloc.to_position_id,
curr_test.seeds_per_gram ,
m.M_SOWING_YR ,
(SOAK_HOURS+STRAT_HOURS+COUNT_HOURS+nvl(WARM_STRAT_HOURS,0))/24,
SPG_REP_COUNT,
to_char(decode((g.ACTUAL_END_DT_TM - orig_g.TEST_END_DATE ),0,null,(orig_g.GERMINATION_PCT - g.GERMINATION_PCT)/ (trunc(g.ACTUAL_END_DT_TM) - trunc(orig_g.TEST_END_DATE ))),'9.99999999'),--DET_RATE
trunc(g.ACTUAL_END_DT_TM),
orig_g.GERMINATION_PCT,
trunc(orig_g.TEST_END_DATE)
FROM    CNS_T_RQST_TST_SRVC a,
AVAIL_SEED_QTY b,
CNS_T_SEEDLOT c,
RANKAGERM g,
(SELECT t1.seedlot_number, t1.request_skey, t3.storage_fclty_desc, 	t2.from_section_id, t2.from_shelf_id,
t2.from_position_id,t2.to_section_id, t2.to_shelf_id, t2.to_position_id
FROM CNS_T_ASSIGNED_INV_DT t1,
CNS_T_ASSIGND_INV_LOC t2,
CNS_T_INVENTORY_FCLTY t3
WHERE t1.inventory_skey = t2.inventory_skey
AND   t1.storage_end_dt_tm IS NULL
AND   t2.storage_fclty_id = t3.storage_fclty_id) invloc,
current_test_results curr_test,
LATEST_SOWING_YR_USED m ,
CNS_T_TEST_REGIME test_reg,
ORIGINAL_GERM_RESULTS orig_g
WHERE
a.SEEDLOT_NUMBER     = b.SEEDLOT_NUMBER
AND c.SEEDLOT_NUMBER     = b.SEEDLOT_NUMBER
AND g.SEEDLOT_NUMBER     = c.SEEDLOT_NUMBER
and curr_test.seedlot_number = a.seedlot_number
AND invloc.SEEDLOT_NUMBER (+) = c.SEEDLOT_NUMBER
and m.seedlot_number = a.seedlot_number
and curr_test.ACTIVITY_TYPE_CD = test_reg.SEEDLOT_TEST_CODE
and c.seedlot_number = orig_g.seedlot_number;


-- CONSEP.CNS34 source

CREATE OR REPLACE VIEW CONSEP.CNS34
(CLIENT_NAME,CLIENT_ACRONYM,REQUEST_CLIENT_NAME,REQUEST_CLIENT_ACRONYM,COMMENT_IND,SHIPTO_CLI_NUM,SHIPTO_CLI_NUMBER,NRSRY_CLI_NUMBER,NRSRY_OBLIGATN_IND,SHIPTO_CLI_LOCN,SHIPTO_CLI_LOCN_CD,NRSRY_CLI_LOCN_CD,LATEST_ACTIONED_DT,SOW_DT,SPCFIED_SOWING_DT,RCMNDED_SOWING_DT,REQUEST_TYPE_ST,VEGETATION_ST,SEEDLOT_NUMBER,SEEDLOT_DISPLAY,GRAMS,REQUEST_SKEY,ORG_UNIT_NO,REQUEST_YR,REQUEST_SEQUENCE,ITEM_ID,ORG_UNIT_CODE,REQUEST_ITEM,REQ_ID,STRAT_TYPE,GENETIC_CLASS_CODE,SUPERIOR_PRVNC_IND,INHOUSE_INV_NO,RQST_CLI_NUMBER,RQST_CLI_LOCN_CD,SPAR_FUND_SRCE_ST,LABEL_IND,INVENTORY_IND,DO_NOT_ACTION_IND,STOCK_TYPE,AGE_CLASS,NO_LABELS,TEST_GRAMS,NUM_SEEDLINGS,SPR_RQST_STATUS_ST,STRAT_START_DATE,CONTAINER_TYPE,PLANT_SEASON,SEEDLINGS_ORDERED,SEEDLOT_TEST_CODE,ACTIVE_GTEST)
AS
SELECT /*+RULE*/
--Modified July 2003 by mdellavi, suppress item_id display for SRQ/CSP type requests
          cns_fn_get_client_name (b.shipto_cli_number, b.nrsry_cli_number),

--h.CLIENT_ACRONYM,
          cns_fn_get_cli_nurs_acronym (DECODE (b.shipto_cli_number,
                                               NULL, DECODE
                                                        (b.nrsry_obligatn_ind,
                                                         -1, b.nrsry_cli_number,
                                                         NULL
                                                        ),
                                               b.shipto_cli_number
                                              ),
                                       DECODE (b.shipto_cli_locn_cd,
                                               NULL, DECODE
                                                        (b.nrsry_obligatn_ind,
                                                         -1, b.nrsry_cli_locn_cd,
                                                         NULL
                                                        ),
                                               b.shipto_cli_locn_cd
                                              )
                                      ),
          cns_fn_get_client_name (a.rqst_cli_number, NULL),
          cns_fn_get_client_acronym (a.rqst_cli_number, NULL),
          cns_fn_get_comment_ind (b.request_skey, b.item_id),
          DECODE (b.shipto_cli_number,
                  NULL, DECODE (b.nrsry_obligatn_ind,
                                -1, b.nrsry_cli_number,
                                NULL
                               ),
                  b.shipto_cli_number
                 ),
          b.shipto_cli_number, b.nrsry_cli_number, b.nrsry_obligatn_ind,
          DECODE (b.shipto_cli_locn_cd,
                  NULL, DECODE (b.nrsry_obligatn_ind,
                                -1, b.nrsry_cli_locn_cd,
                                NULL
                               ),
                  b.shipto_cli_locn_cd
                 ),
          b.shipto_cli_locn_cd, b.nrsry_cli_locn_cd, b.latest_actioned_dt,
          DECODE (b.spcfied_sowing_dt,
                  NULL, b.rcmnded_sowing_dt,
                  b.spcfied_sowing_dt
                 ) sow_dt,
          b.spcfied_sowing_dt, b.rcmnded_sowing_dt, a.request_type_st,
          d.vegetation_st, d.seedlot_number,
          DECODE (d.registerd_seed_ind,
                  -1, d.seedlot_number,
                  d.seedlot_number || 'U'
                 ),
          c.rqst_from_reserve + c.rqst_from_surplus grams, b.request_skey,
          a.org_unit_no, a.request_yr, a.request_sequence,
          SUBSTR (cns_fn_strip_item_id (a.request_type_st,
                                        b.request_skey,
                                        b.item_id
                                       ),
                  1,
                  1
                 ),
          e.org_unit_code,
          DECODE (a.request_type_st,
                  'SRQ', a.sowing_yr
                   || SUBSTR (e.org_unit_code, 1, 3)
                   || LPAD (TO_CHAR (a.request_sequence), 4, '0')
                   || ' ',
                     a.request_type_st
                  || a.request_yr
                  || LPAD (TO_CHAR (a.request_sequence), 4, '0')
                  || SUBSTR (cns_fn_strip_item_id (a.request_type_st,
                                                   b.request_skey,
                                                   b.item_id
                                                  ),
                             1,
                             1
                            )
                 ) req_id,
          DECODE (a.request_type_st,
                  'SRQ', a.sowing_yr
                   || SUBSTR (e.org_unit_code, 1, 3)
                   || LPAD (TO_CHAR (a.request_sequence), 4, '0'),
                     a.request_type_st
                  || a.request_yr
                  || LPAD (TO_CHAR (a.request_sequence), 4, '0')
                 ),
          c.seedlot_test_code, d.genetic_class_code, d.superior_prvnc_ind,
          b.inhouse_inv_no, a.rqst_cli_number, a.rqst_cli_locn_cd,
          a.spar_fund_srce_st, b.label_ind,
          DECODE (b.inhouse_inv_no, NULL, 0, -1), b.do_not_action_ind,
          a.seedling_stktyp_cd || a.seedling_contnr_cd stock_type,
          a.seedling_stkage_cd, b.no_labels,
          c.rqst_test_reserve + c.rqst_test_surplus test_grams,
          a.qty_seedlings_rqst, a.spr_rqst_status_st,
          cns_fn_get_strat_start_date (b.request_skey, b.item_id),
          a.seedling_contnr_cd,
          a.planting_season_st,
          B.RQST_SDLNGS_RSRVD + B.RQST_SDLNGS_SRPLS,
          c.SEEDLOT_TEST_CODE,
          cns_fn_sl_curr_gtest_str (c.seedlot_number)
     FROM cns_t_spar_request a,
          cns_t_request_item b,
          cns_t_request_seedlot c,
          cns_t_seedlot d,
          cns_t_org_unit e,
          cns_t_code_list_table f,
          cns_t_code_subset_tbl g
--   cns_t_client_acronym h
   WHERE  b.item_id = c.item_id
      AND b.request_skey = c.request_skey
      AND a.request_skey = b.request_skey
      AND c.seedlot_number = d.seedlot_number
      AND e.org_unit_no(+) = a.org_unit_no
      AND f.column_name = g.column_name
      AND f.code_argument = g.code_argument
      AND g.code_subset_name = 'WITHDRAWALS_TXN_ST'
      AND a.request_type_st = g.code_argument
--    AND h.client_number (+) = DECODE(b.SHIPTO_CLI_NUMBER, NULL,
--                   DECODE(b.NRSRY_OBLIGATN_IND, -1, b.NRSRY_CLI_NUMBER, NULL),
--                   b.SHIPTO_CLI_NUMBER);;


-- CONSEP.CNS35 source

CREATE OR REPLACE VIEW CONSEP.CNS35
(CLIENT_ACRONYM,STNDRD_ACTIVITY_ID,SHIPTO_CLI_NUM,SHIPTO_CLI_LOCN,SOW_DT,REQ_ID,REQUEST_ITEM,VEGETATION_ST,STRAT_TYPE,SEEDLOT_NUMBER,SEEDLOT_DISPLAY,GRAMS,TEST_GRAMS,NUM_SEEDLINGS,FUNDING_SOURCE,INHOUSE_INV_NO,GENETIC_CLASS,SUPERIOR_PRVNC_IND,REQUEST_SKEY,LATEST_ACTIONED_DT,DO_NOT_ACTION_IND,ITEM_ID,STOCK_TYPE,FUND_SOURCE,SPR_RQST_STATUS_ST,MANUAL_MC,MMC_QAP_PROGRAM,HAS_QA_ACT,MMC1,MMC2,MMCQA,STRAT_START_DATE,SEEDLINGS_ORDERED,REQUEST_CLIENT,CURRENT_CAL,CURRENT_FUS,CURRENT_SIR)
AS
SELECT /*+RULE*/
--Modified July 2003 by mdellavi, suppress item_id display for SRQ/CSP type requests
cns_fn_get_cli_nurs_acronym(DECODE(b.SHIPTO_CLI_NUMBER, NULL,
       DECODE(b.NRSRY_OBLIGATN_IND,-1,b.NRSRY_CLI_NUMBER,NULL),
       b.SHIPTO_CLI_NUMBER),DECODE
       (b.SHIPTO_CLI_LOCN_CD, NULL,
       DECODE(b.NRSRY_OBLIGATN_IND,-1,b.NRSRY_CLI_LOCN_CD,NULL),
       b.SHIPTO_CLI_LOCN_CD)),
Cns_Fn_Get_Std_Actvty_Id(b.REQUEST_SKEY, b.ITEM_ID),
DECODE(b.SHIPTO_CLI_NUMBER, NULL,
DECODE(b.NRSRY_OBLIGATN_IND, -1, b.NRSRY_CLI_NUMBER, NULL),
b.SHIPTO_CLI_NUMBER),
DECODE(b.SHIPTO_CLI_LOCN_CD, NULL,
DECODE(b.NRSRY_OBLIGATN_IND, -1, b.NRSRY_CLI_LOCN_CD, NULL),
b.SHIPTO_CLI_LOCN_CD),
DECODE(b.SPCFIED_SOWING_DT, NULL, b.RCMNDED_SOWING_DT, b.SPCFIED_SOWING_DT),
DECODE(a.REQUEST_TYPE_ST, 'SRQ', a.SOWING_YR||SUBSTR(e.ORG_UNIT_CODE,1,3)||
LPAD(TO_CHAR(a.REQUEST_SEQUENCE),4,'0'), a.REQUEST_TYPE_ST||
a.REQUEST_YR||LPAD(TO_CHAR(a.REQUEST_SEQUENCE),4,'0')),
DECODE(a.REQUEST_TYPE_ST, 'SRQ', a.SOWING_YR||SUBSTR(e.ORG_UNIT_CODE,1,3)||
LPAD(TO_CHAR(a.REQUEST_SEQUENCE),4,'0')||' ',
a.REQUEST_TYPE_ST||a.REQUEST_YR||LPAD(TO_CHAR(a.REQUEST_SEQUENCE),4,'0')
||b.item_id),
d.VEGETATION_ST,
c.SEEDLOT_TEST_CODE,
c.SEEDLOT_NUMBER,
DECODE(d.REGISTERD_SEED_IND, -1,
c.SEEDLOT_NUMBER, c.SEEDLOT_NUMBER||'U'),
c.RQST_FROM_RESERVE+c.RQST_FROM_SURPLUS GRAMS,
c.RQST_TEST_RESERVE+c.RQST_TEST_SURPLUS TEST_GRAMS,
a.QTY_SEEDLINGS_RQST,
a.SPAR_FUND_SRCE_ST,
b.INHOUSE_INV_NO,
d.GENETIC_CLASS_CODE||DECODE(d.SUPERIOR_PRVNC_IND,-1,'+',' '),
d.SUPERIOR_PRVNC_IND,
b.REQUEST_SKEY,
b.LATEST_ACTIONED_DT,
b.DO_NOT_ACTION_IND,
--SUBSTR(Cns_Fn_Strip_Item_Id(a.request_type_st,b.request_skey,b.ITEM_ID),1,1),
b.item_id,
a.SEEDLING_STKTYP_CD||a.SEEDLING_CONTNR_CD,
a.SPAR_FUND_SRCE_ST,
a.SPR_RQST_STATUS_ST,
Cns_Fn_Get_Manual_Mc(a.request_skey,b.item_id),
decode(Cns_Fn_Get_Manual_Mc_Program(a.request_skey,b.item_id),-1,-1,0),
i.QA_IND,
Cns_Fn_Get_MMCLAST(a.request_skey,b.item_id),
Cns_Fn_Get_MMC2NDLAST(a.request_skey,b.item_id),
Cns_Fn_Get_MMCQA(a.request_skey,b.item_id),
--modified by Elliott Biranbaum - Re: Enhancement Request in 2017 (Sharepoint Item No. 1
cns_fn_get_strat_start_date(a.request_skey, b.item_id),
B.RQST_SDLNGS_RSRVD + B.RQST_SDLNGS_SRPLS,
cns_fn_get_client_acronym (a.rqst_cli_number, NULL) || ' ' || a.rqst_cli_locn_cd,
cns_fn_get_current_cal(d.seedlot_number),
cns_fn_get_current_fus(d.seedlot_number),
cns_fn_get_current_sir(d.seedlot_number)
FROM
CNS_T_SPAR_REQUEST a,
CNS_T_REQUEST_ITEM b,
CNS_T_REQUEST_SEEDLOT c,
CNS_T_SEEDLOT d,
CNS_T_ORG_UNIT e,
CNS_T_CODE_LIST_TABLE f,
CNS_T_CODE_SUBSET_TBL g,
REQ_HAS_QA_ACT i
WHERE   a.REQUEST_SKEY = b.REQUEST_SKEY
AND   b.REQUEST_SKEY = c.REQUEST_SKEY
AND   b.ITEM_ID = c.ITEM_ID
AND   c.SEEDLOT_NUMBER = d.SEEDLOT_NUMBER (+)
AND   f.COLUMN_NAME = g.COLUMN_NAME
AND   f.CODE_ARGUMENT = g.CODE_ARGUMENT
AND   g.CODE_SUBSET_NAME = 'WITHDRAWALS_TXN_ST'
AND   g.CODE_ARGUMENT = a.REQUEST_TYPE_ST
AND   a.ORG_UNIT_NO = e.ORG_UNIT_NO (+)
AND   b.REQUEST_SKEY = i.REQUEST_SKEY
AND   b.ITEM_ID = i.ITEM_ID;


-- CONSEP.CNS35_AD_HOC source

CREATE OR REPLACE VIEW CONSEP.CNS35_AD_HOC
(CLIENT_ACRONYM,STNDRD_ACTIVITY_ID,SHIPTO_CLI_NUM,SHIPTO_CLI_LOCN,SOW_DT,REQ_ID,REQUEST_ITEM,VEGETATION_ST,STRAT_TYPE,SEEDLOT_NUMBER,SEEDLOT_DISPLAY,GRAMS,TEST_GRAMS,NUM_SEEDLINGS,FUNDING_SOURCE,INHOUSE_INV_NO,GENETIC_CLASS,SUPERIOR_PRVNC_IND,REQUEST_SKEY,LATEST_ACTIONED_DT,DO_NOT_ACTION_IND,ITEM_ID,STOCK_TYPE,FUND_SOURCE,SPR_RQST_STATUS_ST,MANUAL_MC,MMC_QAP_PROGRAM,HAS_QA_ACT,MMC1,MMC2,MMCQA,STRAT_START_DATE,SEEDLINGS_ORDERED,REQUEST_CLIENT,MMCLAST_DT,MMCLAST_GRAMS,MMC2NDLAST_DT,MMC2NDLAST_GRAMS,MMCQA_DT,MMCQA_GRAMS)
AS
SELECT /*+RULE*/
--Modified July 2003 by mdellavi, suppress item_id display for SRQ/CSP type requests
cns_fn_get_cli_nurs_acronym(DECODE(b.SHIPTO_CLI_NUMBER, NULL,
       DECODE(b.NRSRY_OBLIGATN_IND,-1,b.NRSRY_CLI_NUMBER,NULL),
       b.SHIPTO_CLI_NUMBER),DECODE
       (b.SHIPTO_CLI_LOCN_CD, NULL,
       DECODE(b.NRSRY_OBLIGATN_IND,-1,b.NRSRY_CLI_LOCN_CD,NULL),
       b.SHIPTO_CLI_LOCN_CD)),
Cns_Fn_Get_Std_Actvty_Id(b.REQUEST_SKEY, b.ITEM_ID),
DECODE(b.SHIPTO_CLI_NUMBER, NULL,
DECODE(b.NRSRY_OBLIGATN_IND, -1, b.NRSRY_CLI_NUMBER, NULL),
b.SHIPTO_CLI_NUMBER),
DECODE(b.SHIPTO_CLI_LOCN_CD, NULL,
DECODE(b.NRSRY_OBLIGATN_IND, -1, b.NRSRY_CLI_LOCN_CD, NULL),
b.SHIPTO_CLI_LOCN_CD),
DECODE(b.SPCFIED_SOWING_DT, NULL, b.RCMNDED_SOWING_DT, b.SPCFIED_SOWING_DT),
DECODE(a.REQUEST_TYPE_ST, 'SRQ', a.SOWING_YR||SUBSTR(e.ORG_UNIT_CODE,1,3)||
LPAD(TO_CHAR(a.REQUEST_SEQUENCE),4,'0'), a.REQUEST_TYPE_ST||
a.REQUEST_YR||LPAD(TO_CHAR(a.REQUEST_SEQUENCE),4,'0')),
DECODE(a.REQUEST_TYPE_ST, 'SRQ', a.SOWING_YR||SUBSTR(e.ORG_UNIT_CODE,1,3)||
LPAD(TO_CHAR(a.REQUEST_SEQUENCE),4,'0')||' ',
a.REQUEST_TYPE_ST||a.REQUEST_YR||LPAD(TO_CHAR(a.REQUEST_SEQUENCE),4,'0')
||b.item_id),
d.VEGETATION_ST,
c.SEEDLOT_TEST_CODE,
c.SEEDLOT_NUMBER,
DECODE(d.REGISTERD_SEED_IND, -1,
c.SEEDLOT_NUMBER, c.SEEDLOT_NUMBER||'U'),
c.RQST_FROM_RESERVE+c.RQST_FROM_SURPLUS GRAMS,
c.RQST_TEST_RESERVE+c.RQST_TEST_SURPLUS TEST_GRAMS,
a.QTY_SEEDLINGS_RQST,
a.SPAR_FUND_SRCE_ST,
b.INHOUSE_INV_NO,
d.GENETIC_CLASS_CODE||DECODE(d.SUPERIOR_PRVNC_IND,-1,'+',' '),
d.SUPERIOR_PRVNC_IND,
b.REQUEST_SKEY,
b.LATEST_ACTIONED_DT,
b.DO_NOT_ACTION_IND,
--SUBSTR(Cns_Fn_Strip_Item_Id(a.request_type_st,b.request_skey,b.ITEM_ID),1,1),
b.item_id,
a.SEEDLING_STKTYP_CD||a.SEEDLING_CONTNR_CD,
a.SPAR_FUND_SRCE_ST,
a.SPR_RQST_STATUS_ST,
Cns_Fn_Get_Manual_Mc(a.request_skey,b.item_id),
decode(Cns_Fn_Get_Manual_Mc_Program(a.request_skey,b.item_id),-1,-1,0),
i.QA_IND,
Cns_Fn_Get_MMCLAST(a.request_skey,b.item_id),
Cns_Fn_Get_MMC2NDLAST(a.request_skey,b.item_id),
Cns_Fn_Get_MMCQA(a.request_skey,b.item_id),
--modified by Elliott Biranbaum - Re: Enhancement Request in 2017 (Sharepoint Item No. 1
cns_fn_get_strat_start_date(a.request_skey, b.item_id),
B.RQST_SDLNGS_RSRVD + B.RQST_SDLNGS_SRPLS,
cns_fn_get_client_acronym (a.rqst_cli_number, NULL) || ' ' || a.rqst_cli_locn_cd,
Cns_Fn_Get_MMCLAST_DT(a.request_skey,b.item_id),
Cns_Fn_Get_MMCLAST_GRAMS(a.request_skey,b.item_id),
Cns_Fn_Get_MMC2NDLAST_DT(a.request_skey,b.item_id),
Cns_Fn_Get_MMC2NDLAST_GRAMS(a.request_skey,b.item_id),
Cns_Fn_Get_MMCQA_DT(a.request_skey,b.item_id),
Cns_Fn_Get_MMCQA_GRAMS(a.request_skey,b.item_id)
FROM
CNS_T_SPAR_REQUEST a,
CNS_T_REQUEST_ITEM b,
CNS_T_REQUEST_SEEDLOT c,
CNS_T_SEEDLOT d,
CNS_T_ORG_UNIT e,
CNS_T_CODE_LIST_TABLE f,
CNS_T_CODE_SUBSET_TBL g,
REQ_HAS_QA_ACT i
WHERE   a.REQUEST_SKEY = b.REQUEST_SKEY
AND   b.REQUEST_SKEY = c.REQUEST_SKEY
AND   b.ITEM_ID = c.ITEM_ID
AND   c.SEEDLOT_NUMBER = d.SEEDLOT_NUMBER (+)
AND   f.COLUMN_NAME = g.COLUMN_NAME
AND   f.CODE_ARGUMENT = g.CODE_ARGUMENT
AND   g.CODE_SUBSET_NAME = 'WITHDRAWALS_TXN_ST'
AND   g.CODE_ARGUMENT = a.REQUEST_TYPE_ST
AND   a.ORG_UNIT_NO = e.ORG_UNIT_NO (+)
AND   b.REQUEST_SKEY = i.REQUEST_SKEY
AND   b.ITEM_ID = i.ITEM_ID;


-- CONSEP.CNS35_ORIG source

CREATE OR REPLACE VIEW CONSEP.CNS35_ORIG
(CLIENT_ACRONYM,STNDRD_ACTIVITY_ID,SHIPTO_CLI_NUM,SHIPTO_CLI_LOCN,SOW_DT,REQ_ID,REQUEST_ITEM,VEGETATION_ST,STRAT_TYPE,SEEDLOT_NUMBER,SEEDLOT_DISPLAY,GRAMS,TEST_GRAMS,NUM_SEEDLINGS,FUNDING_SOURCE,INHOUSE_INV_NO,GENETIC_CLASS,SUPERIOR_PRVNC_IND,REQUEST_SKEY,LATEST_ACTIONED_DT,DO_NOT_ACTION_IND,ITEM_ID,STOCK_TYPE,FUND_SOURCE,SPR_RQST_STATUS_ST,MANUAL_MC,MMC_QAP_PROGRAM,HAS_QA_ACT,MMC1,MMC2,MMCQA)
AS
SELECT /*+RULE*/
--Modified July 2003 by mdellavi, suppress item_id display for SRQ/CSP type requests
Cns_Fn_Get_Client_Acronym(b.SHIPTO_CLI_NUMBER,
DECODE(b.NRSRY_OBLIGATN_IND, -1, b.NRSRY_CLI_NUMBER, NULL)),
Cns_Fn_Get_Std_Actvty_Id(b.REQUEST_SKEY, b.ITEM_ID),
DECODE(b.SHIPTO_CLI_NUMBER, NULL,
DECODE(b.NRSRY_OBLIGATN_IND, -1, b.NRSRY_CLI_NUMBER, NULL),
b.SHIPTO_CLI_NUMBER),
DECODE(b.SHIPTO_CLI_LOCN_CD, NULL,
DECODE(b.NRSRY_OBLIGATN_IND, -1, b.NRSRY_CLI_LOCN_CD, NULL),
b.SHIPTO_CLI_LOCN_CD),
DECODE(b.SPCFIED_SOWING_DT, NULL, b.RCMNDED_SOWING_DT, b.SPCFIED_SOWING_DT),
DECODE(a.REQUEST_TYPE_ST, 'SRQ', a.SOWING_YR||SUBSTR(e.ORG_UNIT_CODE,1,3)||
LPAD(TO_CHAR(a.REQUEST_SEQUENCE),4,'0'), a.REQUEST_TYPE_ST||
a.REQUEST_YR||LPAD(TO_CHAR(a.REQUEST_SEQUENCE),4,'0')),
DECODE(a.REQUEST_TYPE_ST, 'SRQ', a.SOWING_YR||SUBSTR(e.ORG_UNIT_CODE,1,3)||
LPAD(TO_CHAR(a.REQUEST_SEQUENCE),4,'0')||' ',
a.REQUEST_TYPE_ST||a.REQUEST_YR||LPAD(TO_CHAR(a.REQUEST_SEQUENCE),4,'0')
||b.item_id),
d.VEGETATION_ST,
c.SEEDLOT_TEST_CODE,
c.SEEDLOT_NUMBER,
DECODE(d.REGISTERD_SEED_IND, -1,
c.SEEDLOT_NUMBER, c.SEEDLOT_NUMBER||'U'),
c.RQST_FROM_RESERVE+c.RQST_FROM_SURPLUS GRAMS,
c.RQST_TEST_RESERVE+c.RQST_TEST_SURPLUS TEST_GRAMS,
a.QTY_SEEDLINGS_RQST,
a.SPAR_FUND_SRCE_ST,
b.INHOUSE_INV_NO,
d.GENETIC_CLASS_CODE||DECODE(d.SUPERIOR_PRVNC_IND,-1,'+',' '),
d.SUPERIOR_PRVNC_IND,
b.REQUEST_SKEY,
b.LATEST_ACTIONED_DT,
b.DO_NOT_ACTION_IND,
--SUBSTR(Cns_Fn_Strip_Item_Id(a.request_type_st,b.request_skey,b.ITEM_ID),1,1),
b.item_id,
a.SEEDLING_STKTYP_CD||a.SEEDLING_CONTNR_CD,
a.SPAR_FUND_SRCE_ST,
a.SPR_RQST_STATUS_ST,
Cns_Fn_Get_Manual_Mc(a.request_skey,b.item_id),
decode(Cns_Fn_Get_Manual_Mc_Program(a.request_skey,b.item_id),-1,-1,0),
i.QA_IND,
Cns_Fn_Get_MMCLAST(a.request_skey,b.item_id),
Cns_Fn_Get_MMC2NDLAST(a.request_skey,b.item_id),
Cns_Fn_Get_MMCQA(a.request_skey,b.item_id)
FROM
CNS_T_SPAR_REQUEST a,
CNS_T_REQUEST_ITEM b,
CNS_T_REQUEST_SEEDLOT c,
CNS_T_SEEDLOT d,
CNS_T_ORG_UNIT e,
CNS_T_CODE_LIST_TABLE f,
CNS_T_CODE_SUBSET_TBL g,
REQ_HAS_QA_ACT i
WHERE   a.REQUEST_SKEY = b.REQUEST_SKEY
AND   b.REQUEST_SKEY = c.REQUEST_SKEY
AND   b.ITEM_ID = c.ITEM_ID
AND   c.SEEDLOT_NUMBER = d.SEEDLOT_NUMBER (+)
AND   f.COLUMN_NAME = g.COLUMN_NAME
AND   f.CODE_ARGUMENT = g.CODE_ARGUMENT
AND   g.CODE_SUBSET_NAME = 'WITHDRAWALS_TXN_ST'
AND   g.CODE_ARGUMENT = a.REQUEST_TYPE_ST
AND   a.ORG_UNIT_NO = e.ORG_UNIT_NO (+)
AND   b.REQUEST_SKEY = i.REQUEST_SKEY
AND   b.ITEM_ID = i.ITEM_ID;


-- CONSEP.CNS36 source

CREATE OR REPLACE VIEW CONSEP.CNS36
(REQUEST_SKEY,ITEM_ID,REQ_ID,REQUEST_ITEM,REQUEST_YR,SPR_RQST_STATUS_ST,SPAR_FUND_SRCE_ST,SEEDLOT_NUMBER,SEEDLOT_DISPLAY,VEGETATION_ST,BUYER_CLI_ACRONYM,BUYER_CLI_NO,BUYER_CLI_LOCN_CD,BUYER_CLI_NAME,SELLER_CLI_ACRONYM,SELLER_CLI_NO,SELLER_CLI_LOCN_CD,SELLER_CLI_NAME,BUYER_RESERVE_GRAMS,BUYER_SURPLUS_GRAMS,SELLER_RESERVE_GRAMS,SELLER_SURPLUS_GRAMS,RIA_SKEY,ACTUAL_BEGIN_DT_TM,ACTUAL_END_DT_TM,STNDRD_ACTIVITY_ID,ACTIVITY_TYPE_CD,TEST_RESULT_IND,COLL_ORG_UNIT,ROLLUP_REGION,TRANSACTION_DATE)
AS
SELECT
b.REQUEST_SKEY,
b.ITEM_ID,
'SST' || a.request_yr || LPAD(TO_CHAR(a.REQUEST_SEQUENCE),4,'0'),
'SST' || a.request_yr || LPAD(TO_CHAR(a.REQUEST_SEQUENCE),4,'0')||b.ITEM_ID,
a.REQUEST_YR,
a.SPR_RQST_STATUS_ST,
a.SPAR_FUND_SRCE_ST,
d.SEEDLOT_NUMBER,
DECODE(d.REGISTERD_SEED_IND, -1,d.SEEDLOT_NUMBER, d.SEEDLOT_NUMBER||'U'),
d.VEGETATION_ST,
buyac.CLIENT_ACRONYM,
buy.CLIENT_NUMBER,
buy.CLIENT_LOCN_CODE,
Cns_Fn_Get_Client_Name(buy.CLIENT_NUMBER,NULL),
sellac.CLIENT_ACRONYM,
sell.CLIENT_NUMBER,
sell.CLIENT_LOCN_CODE,
Cns_Fn_Get_Client_Name(sell.CLIENT_NUMBER,NULL),
buy.RQST_TO_RESERVE,
buy.RQST_TO_SURPLUS,
sell.RQST_FROM_RESERVE,
sell.RQST_FROM_SURPLUS,
r.RIA_SKEY,
r.ACTUAL_BEGIN_DT_TM,
r.ACTUAL_END_DT_TM,
r.STNDRD_ACTIVITY_ID,
r.ACTIVITY_TYPE_CD,
r.TEST_RESULT_IND,
ou.ORG_UNIT_CODE,
ou.ROLLUP_REGION_CODE,
trunc(trans_buy.ENTRY_TIMESTAMP)
FROM
CNS_T_SPAR_REQUEST a,
CNS_T_REQUEST_ITEM b,
CNS_T_REQUEST_SEEDLOT buy,
CNS_T_REQUEST_SEEDLOT sell,
CNS_T_SEEDLOT d,
CNS_T_RQST_ITM_ACTVTY r,
cns_t_client_acronym buyac,
cns_t_client_acronym sellac,
CNS_T_ORG_UNIT ou ,
SST_BUY_TRNSCTN trans_buy
WHERE
a.REQUEST_TYPE_ST = 'SST'
AND b.request_skey  = a.request_skey
AND buy.request_skey  = b.request_skey
AND buy.item_id  = b.item_id
AND (buy.RQST_TO_RESERVE + buy.RQST_TO_SURPLUS) > 0
AND buyac.CLIENT_NUMBER = buy.CLIENT_NUMBER
AND sell.request_skey  = b.request_skey
AND sell.item_id  = b.item_id
AND (sell.RQST_FROM_RESERVE + sell.RQST_FROM_SURPLUS) > 0
AND sellac.CLIENT_NUMBER = sell.CLIENT_NUMBER
AND d.seedlot_number  = buy.seedlot_number
AND r.request_skey (+) = b.request_skey
AND r.item_id (+) = b.item_id
AND d.org_unit_no = ou.org_unit_no(+)
AND trans_buy.REQUEST_SKEY(+) = b.request_skey
AND trans_buy.ITEM_ID(+) = b.item_id;


-- CONSEP.CNS37 source

CREATE OR REPLACE VIEW CONSEP.CNS37
(SEEDLOT_NUMBER,SEEDLOT_DISPLAY,REQUEST_ID,PLANNED_START_DT,RIA_SKEY,RQST_CLI_NO_ACRNM,RQST_CLI_LOCN_CD,RQST_CLI_NAME,RQST_CLI_CITY,VEGETATION_ST,PRIORITY_DT,STNDRD_ACTIVITY_DSC,SIGNIFICNT_STS_IND,PLANNED_END_DT,REVISED_START_DT,REVISED_END_DT,ACTUAL_BEGIN_DT_TM,ACTUAL_END_DT_TM,ITEM_ID,ACTIVITY_TYPE_CD,RQST_ITEM,EXTRCT_CLI_NO_ACRNM,EXTRCT_CLI_LOCN_CD,EXTRCT_CLI_NAME,EXTRCT_CLI_CITY,NO_OF_CONTAINERS,CLCTN_VOLUME,REQUEST_SKEY,TEST_RESULT_IND,LAST_CMNT_DT,PROCESS_RESULT_IND,PLANNED_START,STNDRD_ACTIVITY_ID)
AS
SELECT
--Modified July 2003 by mdellavi, suppress item_id display for SRQ/CSP type requests
          ria.seedlot_number,
          DECODE (s.registerd_seed_ind,
                  -1, ria.seedlot_number,
                  ria.seedlot_number || 'U'
                 ),
          ria.request_id,
          cns_fn_csp_date (ria.stndrd_activity_id, ria.planned_start_dt),
          ria.ria_skey,
          cns_fn_get_client_acronym (r.rqst_cli_number,
                                     NULL
                                    ) AS rqst_cli_no_acrnm,
          r.rqst_cli_locn_cd,
          cns_fn_get_client_name (r.rqst_cli_number, NULL) AS rqst_cli_name,
          cns_fn_get_client_city (r.rqst_cli_number,
                                  r.rqst_cli_locn_cd
                                 ) AS rqst_cli_city,
          r.vegetation_st, r.priority_dt,
          cns_fn_get_std_actvty_desc
                               (ria.stndrd_activity_id)
                                                       AS stndrd_activity_dsc,
          ria.significnt_sts_ind,
          cns_fn_csp_date (ria.stndrd_activity_id, ria.planned_end_dt),
          cns_fn_csp_date (ria.stndrd_activity_id, ria.revised_start_dt),
          cns_fn_csp_date (ria.stndrd_activity_id, ria.revised_end_dt),
          ria.actual_begin_dt_tm, ria.actual_end_dt_tm, ri.item_id,
          ria.activity_type_cd, ria.request_id || ' ' AS rqst_item,
          cns_fn_get_client_acronym
                                 (s.extrct_cli_number,
                                  NULL
                                 ) AS extrct_cli_no_acrnm,
          s.extrct_cli_locn_cd,
          cns_fn_get_client_name (s.extrct_cli_number,
                                  NULL
                                 ) AS extrct_cli_name,
          cns_fn_get_client_city (s.extrct_cli_number,
                                  s.extrct_cli_locn_cd
                                 ) AS extrct_cli_city,
          s.no_of_containers, s.clctn_volume, r.request_skey,
          ria.test_result_ind,
          cns_fn_get_lst_tsc_cmnt_dt (r.request_skey,
                                      ri.item_id
                                     ) AS last_cmnt_dt,
          ria.process_result_ind, ria.planned_start_dt,
          STNDRD_ACTIVITY_ID
     FROM cns_t_rqst_itm_actvty ria,
          cns_t_request_item ri,
          cns_t_spar_request r,
          cns_t_seedlot s,
          cns_t_code_subset_tbl c
    WHERE ria.seedlot_number = s.seedlot_number
      AND ria.request_skey = ri.request_skey
      AND ria.item_id = ri.item_id
      AND ri.request_skey = r.request_skey
      AND r.request_type_st = c.code_argument
      AND c.column_name = 'SEEDLOT_TRNSCTN_CD'
      AND c.code_subset_name = 'CSP_RQST_TYPE_ST';


-- CONSEP.CNS50A source

CREATE OR REPLACE VIEW CONSEP.CNS50A
(SEEDLOT_DISPLAY,SEEDLOT,SEEDLOT_STATUS_ST,SEEDLOT_STATUS_DSC,STATUS,VEGETATION_ST,GENETIC_SB_CLSS_CD,GENETIC_CLASS_CODE,SUPERIOR_PRVNC_IND,REGISTERD_SEED_IND,TO_BE_REGISTRD_IND,LATITUDE_DEGREES,LATITUDE_MINUTES,LONGITUDE_DEGREES,LONGITUDE_MINUTES,BGC_ZONE,BGC_SUBZONE,BGC_VARIANT,EXTRCT_CLI_NUMBER,ORIGINAL_SEED_QTY,EXTRCT_CLI_NO_ACRNM,EXTRCT_CLI_LOCN_CD,EXTRCT_CLI_NAME,EXTRCT_CLI_CITY,PROCESSNG_CMPLT_DT,EXTRACTION_ST_DT,EXTRACTION_END_DT,CLCTN_START_DT,CLCTN_END_DT,CLCTN_VOLUME,EXTRACTION_VOLUME,CLCTN_ELEVATION,AVAIL_SEED_QTY,POTENTIAL_TREES,SPZ_STRING,GCW_STRING,SEEDLOT_TEST_CODE,GERMINATION_PCT,TSC_COMMENT,REGISTERED_DT,CLASS,CURRENT_A_RANK_DATE,NEXT_RETEST_DATE,FREQ_DAYS,LATEST_SOWING_YR_USED,STORAGE_FCLTY_ID,START_LOC,END_LOC,NO_CONTAINERS,ORIGINAL_POTENTIAL_TREES,CSP_SSP_REQUEST,CSP_SSP_YEAR,DET_RATE,ORIG_GERM_PCT,ORIG_GERM_DATE,ORIG_GERM_TYPE,ORCHARD,ORCHARD_CLI_NUMBER,ORCHARD_CLI_NO_ACRNM,ORCHARD_CLI_LOCN_CD,CLCTN_SEED_PLAN_ZONE,ORIG_GERM_PV,ORIG_GERM_GV,EARLIEST_GERM_PCT,EARLIEST_GERM_DATE,EARLIEST_GERM_TYPE,EARLIEST_GERM_GV,EARLIEST_GERM_PVPD,ARANK_GT_STRING,SPU_STRING,ORCH_BEC_STRING)
AS
SELECT DECODE (a.registerd_seed_ind,
                  -1, a.seedlot_number,
                  0, a.seedlot_number || 'U'
                 ) seedlot_display,
          a.seedlot_number, a.seedlot_status_st,
          b.expanded_result seedlot_status_dsc,
          SUBSTR (cns_fn_get_lot_expired_active (a.seedlot_number), 1, 1),
          a.vegetation_st, a.genetic_sb_clss_cd, a.genetic_class_code,
          a.superior_prvnc_ind, a.registerd_seed_ind, a.to_be_registrd_ind,
          a.latitude_degrees, a.latitude_minutes, a.longitude_degrees,
          a.longitude_minutes, a.bgc_zone, a.bgc_subzone, a.bgc_variant,
          a.extrct_cli_number, a.original_seed_qty,
          SUBSTR (NVL (cns_fn_get_client_acronym (a.extrct_cli_number, NULL),
                       RPAD (a.extrct_cli_number, '0')
                      ),
                  1,
                  8
                 ),
          a.extrct_cli_locn_cd,
          SUBSTR (cns_fn_get_client_name (a.extrct_cli_number, NULL), 1, 100),
          SUBSTR (cns_fn_get_client_city (a.extrct_cli_number,
                                          a.extrct_cli_locn_cd
                                         ),
                  1,
                  30
                 ),
          a.processng_cmplt_dt, a.extraction_st_dt, a.extraction_end_dt,
          a.clctn_start_dt, a.clctn_end_dt, a.clctn_volume,
          a.extraction_volume, a.clctn_elevation, c.available_grams,
          c.potential_trees,
          SUBSTR (cns_fn_spz_string (a.seedlot_number), 1, 40),
          SUBSTR (cns_fn_gcw_string (a.seedlot_number), 1, 30),
          g.activity_type_cd, g.germination_pct, a.tsc_comment,
          TRUNC (a.registered_dt),
             a.genetic_class_code
          || DECODE (NVL (a.superior_prvnc_ind, 0), -1, '+', ' '),
          TRUNC (g.actual_end_dt_tm), nr.next_retest_date, freq_days,
          lsy.m_sowing_yr, storage_fclty_id,
          from_section_id || ' ' || from_shelf_id || ' ' || from_position_id,
          to_section_id || ' ' || to_shelf_id || ' ' || to_position_id,
          no_containers, original_potential_trees,
          cns_fn_get_csp_ssp_id (a.seedlot_number),
          cns_fn_get_csp_ssp_year (a.seedlot_number),
          TO_CHAR (DECODE (orig_g.activity_type_cd,
                           g.activity_type_cd, DECODE
                                       ((  g.actual_end_dt_tm
                                         - orig_g.test_end_date
                                        ),
                                        0, NULL,
                                        DECODE (TRUNC (g.actual_end_dt_tm),
                                                TRUNC (orig_g.test_end_date), NULL,
                                                  (  g.germination_pct
                                                   - orig_g.germination_pct
                                                  )
                                                / (  (  TRUNC
                                                           (g.actual_end_dt_tm)
                                                      - TRUNC
                                                           (orig_g.test_end_date
                                                           )
                                                     )
                                                   / 365
                                                  )
                                               )
                                       ),
                           NULL
                          ),
                   '99.99999999'
                  ),                                                --DET_RATE
          orig_g.germination_pct,                                -- orig_g_pct
                                 orig_g.test_end_date,          -- orig_g_date
          orig_g.activity_type_cd, a.orchard_id, orch.client_number,
          orch_own.client_acronym, orch.client_locn_code, spar_seedlot.seed_plan_zone_code,
          orig_g.pv, orig_g.gv, earliest_germ.germination_pct,
          earliest_germ.test_end_date, earliest_germ.activity_type_cd,
          earliest_germ.GV,
          earliest_germ.PVPD,
          cns_fn_sl_arank_gt_string(a.seedlot_number),
          SPUS.SPU_STRING,
          SPUS.BEC_STRING
     FROM cns_t_seedlot a,
          cns_t_code_list_table b,
          potential_trees c,
          rankagerm g,
          seedlot_next_retest_date nr,
          latest_sowing_yr_used lsy,
          assigned_inv inv,
          original_potential_trees origpt,
          original_germ_results_no_gsa orig_g,
          cns_t_orchard orch,
          cns_t_client_acronym orch_own,
          snp_t_seedlot spar_seedlot,
          earliest_germ_info earliest_germ,
          seedlot_plan_unit_summary SPUS
    WHERE a.seedlot_status_st = b.code_argument
      AND b.column_name = 'STATUS_CODE'
      AND c.seedlot_number = a.seedlot_number
      AND g.seedlot_number(+) = a.seedlot_number
      AND a.seedlot_number = nr.seedlot_number(+)
      AND a.seedlot_number = lsy.seedlot_number
      AND a.seedlot_number = inv.seedlot_number(+)
      AND a.seedlot_number = origpt.seedlot_number(+)
      AND a.seedlot_number = orig_g.seedlot_number
      AND a.orchard_id = orch.orchard_id(+)
      AND orch.client_number = orch_own.client_number(+)
      AND a.seedlot_number = spar_seedlot.seedlot_number
      AND a.seedlot_number = earliest_germ.seedlot_number(+)
      AND a.seedlot_number = SPUS.SEEDLOT_NUMBER(+);


-- CONSEP.CNS50A_TEMP source

CREATE OR REPLACE VIEW CONSEP.CNS50A_TEMP
(SEEDLOT_DISPLAY,SEEDLOT,SEEDLOT_STATUS_ST,SEEDLOT_STATUS_DSC,STATUS,VEGETATION_ST,GENETIC_SB_CLSS_CD,GENETIC_CLASS_CODE,SUPERIOR_PRVNC_IND,REGISTERD_SEED_IND,TO_BE_REGISTRD_IND,LATITUDE_DEGREES,LATITUDE_MINUTES,LONGITUDE_DEGREES,LONGITUDE_MINUTES,BGC_ZONE,BGC_SUBZONE,BGC_VARIANT,EXTRCT_CLI_NUMBER,ORIGINAL_SEED_QTY,EXTRCT_CLI_NO_ACRNM,EXTRCT_CLI_LOCN_CD,EXTRCT_CLI_NAME,EXTRCT_CLI_CITY,PROCESSNG_CMPLT_DT,EXTRACTION_ST_DT,EXTRACTION_END_DT,CLCTN_START_DT,CLCTN_END_DT,CLCTN_VOLUME,EXTRACTION_VOLUME,CLCTN_ELEVATION,AVAIL_SEED_QTY,POTENTIAL_TREES,SPZ_STRING,GCW_STRING,SEEDLOT_TEST_CODE,GERMINATION_PCT,TSC_COMMENT,REGISTERED_DT,CLASS,CURRENT_A_RANK_DATE,NEXT_RETEST_DATE,FREQ_DAYS,LATEST_SOWING_YR_USED,STORAGE_FCLTY_ID,START_LOC,END_LOC,NO_CONTAINERS,ORIGINAL_POTENTIAL_TREES,CSP_SSP_REQUEST,CSP_SSP_YEAR,DET_RATE,ORIG_GERM_PCT,ORIG_GERM_DATE,ORIG_GERM_TYPE,ORCHARD,ORCHARD_CLI_NUMBER,ORCHARD_CLI_NO_ACRNM,ORCHARD_CLI_LOCN_CD,CLCTN_SEED_PLAN_ZONE,ORIG_GERM_PV,ORIG_GERM_GV,EARLIEST_GERM_PCT,EARLIEST_GERM_DATE,EARLIEST_GERM_TYPE,EARLIEST_GERM_GV,EARLIEST_GERM_PVPD,ARANK_GT_STRING,SPU_STRING,ORCH_BEC_STRING)
AS
SELECT DECODE (a.registerd_seed_ind,
                  -1, a.seedlot_number,
                  0, a.seedlot_number || 'U'
                 ) seedlot_display,
          a.seedlot_number, a.seedlot_status_st,
          b.expanded_result seedlot_status_dsc,
          SUBSTR (cns_fn_get_lot_expired_active (a.seedlot_number), 1, 1),
          a.vegetation_st, a.genetic_sb_clss_cd, a.genetic_class_code,
          a.superior_prvnc_ind, a.registerd_seed_ind, a.to_be_registrd_ind,
          a.latitude_degrees, a.latitude_minutes, a.longitude_degrees,
          a.longitude_minutes, a.bgc_zone, a.bgc_subzone, a.bgc_variant,
          a.extrct_cli_number, a.original_seed_qty,
          SUBSTR (NVL (cns_fn_get_client_acronym (a.extrct_cli_number, NULL),
                       RPAD (a.extrct_cli_number, '0')
                      ),
                  1,
                  8
                 ),
          a.extrct_cli_locn_cd,
          SUBSTR (cns_fn_get_client_name (a.extrct_cli_number, NULL), 1, 100),
          SUBSTR (cns_fn_get_client_city (a.extrct_cli_number,
                                          a.extrct_cli_locn_cd
                                         ),
                  1,
                  30
                 ),
          a.processng_cmplt_dt, a.extraction_st_dt, a.extraction_end_dt,
          a.clctn_start_dt, a.clctn_end_dt, a.clctn_volume,
          a.extraction_volume, a.clctn_elevation, c.available_grams,
          c.potential_trees,
          SUBSTR (cns_fn_spz_string (a.seedlot_number), 1, 40),
          SUBSTR (cns_fn_gcw_string (a.seedlot_number), 1, 30),
          g.activity_type_cd, g.germination_pct, a.tsc_comment,
          TRUNC (a.registered_dt),
             a.genetic_class_code
          || DECODE (NVL (a.superior_prvnc_ind, 0), -1, '+', ' '),
          TRUNC (g.actual_end_dt_tm), nr.next_retest_date, freq_days,
          lsy.m_sowing_yr, storage_fclty_id,
          from_section_id || ' ' || from_shelf_id || ' ' || from_position_id,
          to_section_id || ' ' || to_shelf_id || ' ' || to_position_id,
          no_containers, original_potential_trees,
          cns_fn_get_csp_ssp_id (a.seedlot_number),
          cns_fn_get_csp_ssp_year (a.seedlot_number),
          TO_CHAR (DECODE (orig_g.activity_type_cd,
                           g.activity_type_cd, DECODE
                                       ((  g.actual_end_dt_tm
                                         - orig_g.test_end_date
                                        ),
                                        0, NULL,
                                        DECODE (TRUNC (g.actual_end_dt_tm),
                                                TRUNC (orig_g.test_end_date), NULL,
                                                  (  g.germination_pct
                                                   - orig_g.germination_pct
                                                  )
                                                / (  (  TRUNC
                                                           (g.actual_end_dt_tm)
                                                      - TRUNC
                                                           (orig_g.test_end_date
                                                           )
                                                     )
                                                   / 365
                                                  )
                                               )
                                       ),
                           NULL
                          ),
                   '99.99999999'
                  ),                                                --DET_RATE
          orig_g.germination_pct,                                -- orig_g_pct
                                 orig_g.test_end_date,          -- orig_g_date
          orig_g.activity_type_cd, a.orchard_id, orch.client_number,
          orch_own.client_acronym, orch.client_locn_code, spar_seedlot.seed_plan_zone_code,
          orig_g.pv, orig_g.gv, earliest_germ.germination_pct,
          earliest_germ.test_end_date, earliest_germ.activity_type_cd,
          earliest_germ.GV,
          earliest_germ.PVPD,
          cns_fn_sl_arank_gt_string(a.seedlot_number),
          SPUS.SPU_STRING,
          SPUS.BEC_STRING
     FROM cns_t_seedlot a,
          cns_t_code_list_table b,
          potential_trees c,
          rankagerm g,
          seedlot_next_retest_date nr,
          latest_sowing_yr_used lsy,
          assigned_inv inv,
          original_potential_trees origpt,
          original_germ_results_no_gsa orig_g,
          cns_t_orchard orch,
          cns_t_client_acronym orch_own,
          snp_t_seedlot spar_seedlot,
          earliest_germ_info earliest_germ,
          seedlot_plan_unit_summary SPUS
    WHERE a.seedlot_status_st = b.code_argument
      AND b.column_name = 'STATUS_CODE'
      AND c.seedlot_number = a.seedlot_number
      AND g.seedlot_number(+) = a.seedlot_number
      AND a.seedlot_number = nr.seedlot_number(+)
      AND a.seedlot_number = lsy.seedlot_number
      AND a.seedlot_number = inv.seedlot_number(+)
      AND a.seedlot_number = origpt.seedlot_number(+)
      AND a.seedlot_number = orig_g.seedlot_number
      AND a.orchard_id = orch.orchard_id(+)
      AND orch.client_number = orch_own.client_number(+)
      AND a.seedlot_number = spar_seedlot.seedlot_number
      AND a.seedlot_number = earliest_germ.seedlot_number(+)
      AND a.seedlot_number = SPUS.SEEDLOT_NUMBER(+);


-- CONSEP.CNS52SEEDLOT source

CREATE OR REPLACE VIEW CONSEP.CNS52SEEDLOT
(SEEDLOT_NUMBER,ORCHARD_ID,ORCHARD_NAME,SEEDLOT_DISPLAY,VEGETATION_ST,PRIORITY_IND,CROP_PRODUCTION_YR,GENETIC_CLASS_CODE,SUPERIOR_PRVNC_IND,GCW_STRING,NO_OF_CONTAINERS,CLCTN_VOLUME,ORIGINAL_SEED_QTY,YIELD_PER_HL,CLCTN_START_DT,CLCTN_END_DT,SEEDLOT_RCVD_DT,EXTRACTION_ST_DT,TESTING_CMPLT_DT,EXTRCT_CLI_NUMBER,EXTRCT_CLI_ACRONYM,EXTRCT_CLI_LOCN_CD,EXTRCT_CLIENT_NAME,BLENDING_CMPLT_DT,CURR_GERM_PCT,CURR_PV_PCT,CURR_PV_DAYS,CURR_GV,ORIG_GERM_PCT,ORIG_PV_PCT,ORIG_PV_DAYS,ORIG_GV,ORIGINAL_POTENTIAL_TREES)
AS
SELECT a.seedlot_number, d.orchard_id, d.orchard_name,
          DECODE (a.registerd_seed_ind,
                  -1, a.seedlot_number,
                  a.seedlot_number || 'U'
                 ),
          a.vegetation_st, cns_fn_get_priority_ind (a.seedlot_number, NULL),
          DECODE (TRUNC (TO_NUMBER (TO_CHAR (a.clctn_end_dt, 'MM')) / 7),
                  0, TO_NUMBER (TO_CHAR (a.clctn_end_dt, 'YYYY')),
                  TO_NUMBER (TO_CHAR (a.clctn_end_dt, 'YYYY') + 1)
                 ),
          a.genetic_class_code,
          DECODE (a.genetic_class_code,
                  'B', DECODE (a.superior_prvnc_ind, -1, '+', NULL),
                  NULL
                 ),
          SUBSTR (cns_fn_gcw_string (a.seedlot_number), 1, 30),
          a.no_of_containers, a.clctn_volume, a.original_seed_qty,
          DECODE (a.extraction_volume,
                  0, NULL,
                  a.original_seed_qty / (a.extraction_volume * 1000)
                 ),
          TRUNC (a.clctn_start_dt), TRUNC (a.clctn_end_dt),
          TRUNC (a.seedlot_rcvd_dt), TRUNC (a.extraction_st_dt),
          TRUNC (a.processng_cmplt_dt), a.extrct_cli_number,
          cns_fn_get_client_acronym (a.extrct_cli_number, NULL),
          a.extrct_cli_locn_cd,
          cns_fn_get_client_name (a.extrct_cli_number, NULL),
          TRUNC (cns_fn_get_lot_blended_dt (a.seedlot_number, NULL)),
          c.germination_pct, c.peak_value_grm_pct, c.peak_value_no_days,
          c.germination_value, cns_fn_get_origrank_germ (a.seedlot_number),
          cns_fn_get_origrank_pv (a.seedlot_number),
          cns_fn_get_origrank_pd (a.seedlot_number),
          cns_fn_get_origrank_gv (a.seedlot_number),
          original_potential_trees
     FROM cns_t_seedlot a,
          cns_t_rqst_itm_actvty b,
          cns_t_tsc_test_result c,
          cns_t_orchard d,
          original_potential_trees origpt
    WHERE a.seedlot_number = b.seedlot_number
      AND d.orchard_id(+) = a.orchard_id
      AND c.ria_skey = b.ria_skey
      AND c.test_category_cd = 'STD'
      AND c.test_rank = 'A'
      AND c.accept_result_ind = -1
      AND c.current_test_ind = -1
      and a.seedlot_number = ORIGPT.SEEDLOT_NUMBER(+);


-- CONSEP.CNS55 source

CREATE OR REPLACE VIEW CONSEP.CNS55
(INVENTORY_SKEY,SEEDLOT_NUMBER,REQUEST_ID,REQUEST_SKEY,ITEM_ID,STORAGE_STRT_DT_TM,STORAGE_END_DT_TM,STORAGE_FCLTY_ID,FROM_SECTION_ID,FROM_SHELF_ID,FROM_POSITION_ID,TO_SECTION_ID,TO_SHELF_ID,TO_POSITION_ID,CONTAINER_TYPE_CD,NO_CONTAINERS,TSC_PRODUCT_TYP_CD,RIA_SKEY,EMPTY_LOCN_COUNT,AVAIL_QTY,"COMMITTED",SEEDLOT_COUNT,ASSIGNED_LOC_STRING)
AS
SELECT
--Modified July 2003 by mdellavi, suppress item_id display for SRQ/CSP type requests
a.INVENTORY_SKEY,
a.SEEDLOT_NUMBER,
a.REQUEST_ID,
a.REQUEST_SKEY,
SUBSTR(Cns_Fn_Strip_Item_Id('',a.request_skey,a.ITEM_ID),1,1),
a.STORAGE_STRT_DT_TM,
a.STORAGE_END_DT_TM,
b.STORAGE_FCLTY_ID,
b.FROM_SECTION_ID,
b.FROM_SHELF_ID,
b.FROM_POSITION_ID,
b.TO_SECTION_ID,
b.TO_SHELF_ID,
b.TO_POSITION_ID,
b.CONTAINER_TYPE_CD,
b.NO_CONTAINERS,
b.TSC_PRODUCT_TYP_CD,
b.RIA_SKEY,
0,
AVAIL.AVAIL_QTY,
AVAIL.COMMITTED,
0,
NULL
FROM
  CNS_T_ASSIGNED_INV_DT a,
  CNS_T_ASSIGND_INV_LOC b,
  AVAIL_SEED_QTY_WITHFAMILY AVAIL

WHERE   a.INVENTORY_SKEY = b.INVENTORY_SKEY
AND  a.seedlot_number = AVAIL.seedlot_number;


-- CONSEP.CNS55_LOCNS_WITH_MORE_THAN_1_SEEDLOT source

CREATE OR REPLACE VIEW CONSEP.CNS55_LOCNS_WITH_MORE_THAN_1_SEEDLOT
(STORAGE_FCLTY_ID,FROM_SECTION_ID,FROM_SHELF_ID,FROM_POSITION_ID,TO_SECTION_ID,TO_SHELF_ID,TO_POSITION_ID,EMPTY_LOCN_COUNT,AVAIL_QTY,"COMMITTED",SEEDLOT_COUNT,INVLOCATIONKEY,ASSIGNED_LOC_STRING)
AS
SELECT DISTINCT
a.STORAGE_FCLTY_ID,
a.FROM_SECTION_ID,
a.FROM_SHELF_ID,
a.FROM_POSITION_ID,
a.TO_SECTION_ID,
a.TO_SHELF_ID,
a.TO_POSITION_ID,
Null,
LOCN_SUMS.AVAIL_QTY_SUM,
LOCN_SUMS.COMMITTED_SUM,
LOCN_SUMS.SEEDLOT_COUNT,
a.INVLOCATIONKEY,
cns_fn_Assigned_loc_multiple_SL_string(a.INVLOCATIONKEY)
FROM
  ALL_INV_LOCNS_ASSIGNED_PRODUCT_DETAILS A,
(SELECT SUM(A1.AVAIL_QTY_SUM) AS AVAIL_QTY_SUM, SUM(A1.COMMITTED_SUM) AS COMMITTED_SUM, SUM(A1.SEEDLOT_COUNT) AS SEEDLOT_COUNT, A1.INVLOCATIONKEYFROM
FROM  ASSIGNED_LOC_SUMS A1
GROUP BY INVLOCATIONKEYFROM ) LOCN_SUMS
where a.INVLOCATIONKEYFROM = LOCN_SUMS.INVLOCATIONKEYFROM
AND 1< LOCN_SUMS.SEEDLOT_COUNT;


-- CONSEP.CNS57INV source

CREATE OR REPLACE VIEW CONSEP.CNS57INV
(INHOUSE_INVNTRY_ID,VEGETATION_ST,SHIP_TO_CLI_NUMBER,SHIP_TO_CLI_LOC_CD,REQUIRED_BY_DT,ACTION_DT,SOWING_DT,SEEDLOT_TEST_CODE,DATE_CREATED,CLIENT_ACRONYM,CLIENT_NAME,REQUEST_ITEM,REQUEST_ID,SEEDLOT_NUMBER,NURSERY_COMMENT)
AS
SELECT DISTINCT
a.INHOUSE_INVNTRY_ID,
a.VEGETATION_ST,
a.SHIP_TO_CLI_NUMBER,
a.SHIP_TO_CLI_LOC_CD,
a.REQUIRED_BY_DT,
a.ACTION_DT,
a.SOWING_DT,
a.SEEDLOT_TEST_CODE,
a.DATE_CREATED,
CNS_FN_GET_CLI_NURS_ACRONYM(a.SHIP_TO_CLI_NUMBER,a.SHIP_TO_CLI_LOC_CD),
SUBSTR(cns_fn_get_client_name(a.SHIP_TO_CLI_NUMBER,NULL),1,100),
DECODE(e.REQUEST_TYPE_ST, 'SRQ', e.SOWING_YR||SUBSTR(f.ORG_UNIT_CODE,1,3)||
       LPAD(TO_CHAR(e.REQUEST_SEQUENCE),4,'0')||d.ITEM_ID,
       e.REQUEST_TYPE_ST||e.REQUEST_YR||
       LPAD(TO_CHAR(e.REQUEST_SEQUENCE),4,'0')||d.ITEM_ID),
DECODE(e.REQUEST_TYPE_ST, 'SRQ', e.SOWING_YR||SUBSTR(f.ORG_UNIT_CODE,1,3)||
       LPAD(TO_CHAR(e.REQUEST_SEQUENCE),4,'0'), e.REQUEST_TYPE_ST||
       e.REQUEST_YR||LPAD(TO_CHAR(e.REQUEST_SEQUENCE),4,'0')),
g.SEEDLOT_NUMBER,
wp.NURSERY_COMMENT
FROM    CNS_T_INHOUSE_INVNTRY a,
--	CNS_T_CLIENT_NURS_ACRONYM b,
	CNS_T_REQUEST_ITEM d,
	CNS_T_SPAR_REQUEST e,
	CNS_T_ORG_UNIT f,
	CNS_T_REQUEST_SEEDLOT g,
	(SELECT DISTINCT std.STD_WORKPLAN_SKEY, wn.CLIENT_NUMBER, wn.CLIENT_LOCN_CODE, wn.NURSERY_COMMENT,
                     ws.VEGETATION_ST, wt.SEEDLOT_TEST_CODE
	 FROM CNS_T_STD_WORKPLAN std,
	 	  CNS_T_WRKPLN_NURSERY wn,
	 	  CNS_T_WRKPLN_SPECIES ws,
	 	  CNS_T_WRKPLN_TST_TYPE wt
	WHERE std.EXPIRY_DT IS NULL
	AND	  wn.STD_WORKPLAN_SKEY (+) = std.STD_WORKPLAN_SKEY
	AND	  ws.STD_WORKPLAN_SKEY (+) = std.STD_WORKPLAN_SKEY
	AND   wt.STD_WORKPLAN_SKEY (+) = std.STD_WORKPLAN_SKEY) wp
WHERE
--a.SHIP_TO_CLI_NUMBER = b.CLIENT_NUMBER (+)
--AND     (a.SHIP_TO_CLI_LOC_CD = b.CLIENT_LOCN_CODE OR  B.CLIENT_LOCN_CODE is null)
        d.REQUEST_SKEY = e.REQUEST_SKEY
AND     e.ORG_UNIT_NO = f.ORG_UNIT_NO (+)
AND     d.INHOUSE_INV_NO = a.INHOUSE_INVNTRY_ID
AND     d.REQUEST_SKEY = g.REQUEST_SKEY
AND     d.ITEM_ID = g.ITEM_ID
AND     a.SHIP_TO_CLI_NUMBER = wp.CLIENT_NUMBER  (+)
AND     a.SHIP_TO_CLI_LOC_CD = wp.CLIENT_LOCN_CODE (+)
AND     a.VEGETATION_ST = wp.VEGETATION_ST (+)
AND     a.SEEDLOT_TEST_CODE = wp.SEEDLOT_TEST_CODE (+);


-- CONSEP.CNS57INVCONTENTS source

CREATE OR REPLACE VIEW CONSEP.CNS57INVCONTENTS
(INHOUSE_INV_NO,SEEDLOT_NUMBER,REQUEST_ID,SEEDLOT_NO,ITEM_ID,GRAMS,TEST_GRAMS,LABEL_IND,INVENTORY_IND,SOW_DT,SEEDLING_STKTYP_CD,SEEDLING_CONTNR_CD,QTY_SEEDLINGS_RQST,REQUEST_SKEY,CRITICAL_COMMENTS_IND,COMMENT_INDICATOR,LATEST_ACTIONED_DT,REQUIRED_BY_DT,STRAT_START_DT,STRAT_END_DT,SPECIAL_SERVICE,SHIP_DATE,WTH_REVISED_START_DT,BAG_CNT,MC,QA_IND,SL_LAB_CRIT_COMMENT)
AS
SELECT
--Modified July 2003 by mdellavi, suppress item_id display for SRQ/CSP type requests
          b.inhouse_inv_no, c.seedlot_number,
          DECODE (a.request_type_st,
                  'SRQ', a.sowing_yr
                   || SUBSTR (e.org_unit_code || '   ', 1, 3)
                   || LPAD (a.request_sequence, 4, '0'),
                     a.request_type_st
                  || a.request_yr
                  || LPAD (a.request_sequence, 4, '0')
                 ) AS request_id,
          DECODE (d.registerd_seed_ind,
                  -1, d.seedlot_number,
                  d.seedlot_number || 'U'
                 ) AS seedlot_no,
          SUBSTR (cns_fn_strip_item_id (a.request_type_st,
                                        a.request_skey,
                                        b.item_id
                                       ),
                  1,
                  1
                 ),
          c.rqst_from_reserve + c.rqst_from_surplus AS grams,
          c.rqst_test_reserve + c.rqst_test_surplus AS test_grams,
          b.label_ind, b.inventory_ind,
          DECODE (b.spcfied_sowing_dt,
                  NULL, b.rcmnded_sowing_dt,
                  b.spcfied_sowing_dt
                 ) AS sow_dt,
          a.seedling_stktyp_cd, a.seedling_contnr_cd, a.qty_seedlings_rqst,
          b.request_skey,
          cns_fn_critical_comments (b.request_skey, b.item_id),
          cns_fn_get_comment_ind (b.request_skey, b.item_id),
          b.latest_actioned_dt, a.required_by_dt,
          cns_fn_get_strat_start_date (a.request_skey, b.item_id),
          cns_fn_max_actvty_type_end_dt (a.request_skey, b.item_id, 'STR'),
          cns_fn_get_special_service (a.request_skey, b.item_id),
          cns_fn_max_actvty_type_end_dt (a.request_skey, b.item_id, 'SHP'),
          cns_fn_actvtytype_rvsd_strt_dt (a.request_skey, b.item_id, 'WTH'),
          cns_fn_get_bags (d.vegetation_st,
                           c.rqst_from_reserve + c.rqst_from_surplus
                          ),
          cns_fn_get_current_mc (c.seedlot_number),
          fn_req_has_qa (a.request_skey, b.item_id),
          cns_fn_lab_critical_comm(c.seedlot_number)
     FROM cns_t_spar_request a,
          cns_t_request_item b,
          cns_t_request_seedlot c,
          cns_t_seedlot d,
          cns_t_org_unit e
    WHERE a.request_skey = b.request_skey
      AND b.item_id = c.item_id
      AND b.request_skey = c.request_skey
      AND c.seedlot_number = d.seedlot_number
      AND a.org_unit_no = e.org_unit_no(+)
      AND b.inhouse_inv_no IS NOT NULL;


-- CONSEP.CNS58TRAYCONTENTS source

CREATE OR REPLACE VIEW CONSEP.CNS58TRAYCONTENTS
(GERMINATOR_TRAY_ID,VEGETATION_ST,ACTIVITY_TYPE_CD,ACTUAL_START_DATE,DATE_CREATED,RIA_SKEY,REQUEST_ID,REQUEST_SKEY,ITEM_ID,REQUEST_TYPE_ST,SEEDLOT_NUMBER,SOAK_START_DATE,SOAK_END_DATE,SEED_WITHDRAWAL_DATE,WARM_STRAT_START_DATE,DRYBACK_START_DATE,GERMINATOR_ENTRY,STRAT_START_DT,GERMINATOR_ID,STNDRD_ACTIVITY_ID,TEST_CATEGORY_CD)
AS
SELECT tray.germinator_tray_id,ria.vegetation_st, tray.ACTIVITY_TYPE_CD,
       tray.ACTUAL_START_DATE, tray.DATE_CREATED,
       ria.ria_skey,ria.request_id,
       ria.request_skey, ria.item_id, spar.request_type_st,
       NVL(ria.family_lot_number,ria.seedlot_number),
       ria.actual_begin_dt_tm,
       ria.actual_begin_dt_tm + NVL(regime.soak_hours,0)/24,
       test.seed_withdrawal_date, test.warm_strat_start_date,
       test.dryback_start_date, test.germinator_entry, test.strat_start_dt,
       test.GERMINATOR_ID,ria.STNDRD_ACTIVITY_ID,ria.TEST_CATEGORY_CD
FROM CNS_T_RQST_ITM_ACTVTY ria,
     CNS_T_GERMINATOR_TRAY tray,
     CNS_T_TSC_TEST_RESULT test,
     CNS_T_TEST_REGIME regime,
     CNS_T_SPAR_REQUEST spar,
     CNS_T_SEEDLOT lot
WHERE
     test.ria_skey = ria.ria_skey
AND  test.germinator_tray_id = tray.germinator_tray_id
AND  regime.seedlot_test_code (+) = test.activity_type_cd
AND  spar.request_skey = ria.request_skey
AND  test.germinator_tray_id IS NOT NULL
AND  ria.seedlot_number = lot.seedlot_number (+);


-- CONSEP.CNS65 source

CREATE OR REPLACE VIEW CONSEP.CNS65
(REQUEST_SKEY,RQST_STS,CLIENT_ACRONYM,REQUEST_CLIENT_ACRONYM,SHIPTO_CLI_NUM,SHIPTO_CLI_NUMBER,NRSRY_CLI_NUMBER,NRSRY_OBLIGATN_IND,SHIPTO_CLI_LOCN,SHIPTO_CLI_LOCN_CD,NRSRY_CLI_LOCN_CD,LATEST_ACTIONED_DT,SOW_DT,VEGETATION_ST,SEEDLOT_NUMBER,SEEDLOT_DISPLAY,INHOUSE_INV_NO,RQST_CLI_NUMBER,RQST_CLI_LOCN_CD,REQUEST_TYPE_ST,GRAMS,REQ_ID,REQ_ID_DISPLAY,ITEM_ID,STRAT_TYPE,GENETIC_CLASS_CODE,SUPERIOR_PRVNC_IND,SPAR_FUND_SRCE_ST,LABEL_IND,INVENTORY_IND,STOCK_TYPE,AGE_CLASS,TEST_GRAMS,GERMINATION_PCT,SEEDLOT_TEST_CODE,SHIP_DATE,WITHDRAWAL_DATE,STRAT_START_DATE,SPECIAL_SERVICE,SPECIAL_SERVICE_DATE,CRITICAL_COMMENTS_IND,PLANTING_SEASON_ST,ACT_ITEM_ID,DEFAULT_SOW_DATE,ORCHARD_ID,HAS_QA_ACT,CLASS,QTY_SEEDLINGS_RQST,DO_NOT_ACTION_IND,CALC_SOW_DATE,SOW_YR,SPEC_SOW_DATE,QTY_SEEDLINGS_CALC,ACTIVE_GTEST,SL_LAB_CRIT_COMMENT,SL_AVAIL_GRAMS,COUNT_OF_QA_TESTS,LAST_QA_DATE,WITHDRAWAL_END_DATE)
AS
SELECT
--Modified July 2003 by mdellavi, suppress item_id display for SRQ/CSP type requests
          a.request_skey, a.spr_rqst_status_st,
          cns_fn_get_cli_nurs_acronym (DECODE (b.shipto_cli_number,
                                               NULL, DECODE
                                                        (b.nrsry_obligatn_ind,
                                                         -1, b.nrsry_cli_number,
                                                         NULL
                                                        ),
                                               b.shipto_cli_number
                                              ),
                                       DECODE (b.shipto_cli_locn_cd,
                                               NULL, DECODE
                                                        (b.nrsry_obligatn_ind,
                                                         -1, b.nrsry_cli_locn_cd,
                                                         NULL
                                                        ),
                                               b.shipto_cli_locn_cd
                                              )
                                      ),
          cns_fn_get_client_acronym (a.rqst_cli_number, NULL),
          DECODE (b.shipto_cli_number,
                  NULL, DECODE (b.nrsry_obligatn_ind,
                                -1, b.nrsry_cli_number,
                                NULL
                               ),
                  b.shipto_cli_number
                 ),
          b.shipto_cli_number, b.nrsry_cli_number, b.nrsry_obligatn_ind,
          DECODE (b.shipto_cli_locn_cd,
                  NULL, DECODE (b.nrsry_obligatn_ind,
                                -1, b.nrsry_cli_locn_cd,
                                NULL
                               ),
                  b.shipto_cli_locn_cd
                 ),
          b.shipto_cli_locn_cd, b.nrsry_cli_locn_cd,
          TRUNC (b.latest_actioned_dt),
          TRUNC (DECODE (b.spcfied_sowing_dt,
                         NULL, b.rcmnded_sowing_dt,
                         b.spcfied_sowing_dt
                        )
                ) sow_dt,
          d.vegetation_st, d.seedlot_number,
          DECODE (d.registerd_seed_ind,
                  -1, d.seedlot_number,
                  d.seedlot_number || 'U'
                 ),
          b.inhouse_inv_no, a.rqst_cli_number, a.rqst_cli_locn_cd,
          a.request_type_st, c.rqst_from_reserve + c.rqst_from_surplus grams,
          DECODE (a.request_type_st,
                  'SRQ', a.sowing_yr
                   || SUBSTR (e.org_unit_code, 1, 3)
                   || LPAD (TO_CHAR (a.request_sequence), 4, '0'),
                     a.request_type_st
                  || a.request_yr
                  || LPAD (TO_CHAR (a.request_sequence), 4, '0')
                 ) req_id,
          DECODE
             (a.request_type_st,
              'SRQ', a.sowing_yr
               || SUBSTR (e.org_unit_code, 1, 3)
               || LPAD (TO_CHAR (a.request_sequence), 4, '0')
               || ' ',
                 a.request_type_st
              || a.request_yr
              || LPAD (TO_CHAR (a.request_sequence), 4, '0')
              || SUBSTR (cns_fn_strip_item_id (a.request_type_st,
                                               a.request_skey,
                                               b.item_id
                                              ),
                         1,
                         1
                        )
             ) req_id_display,
          SUBSTR (cns_fn_strip_item_id (a.request_type_st,
                                        a.request_skey,
                                        b.item_id
                                       ),
                  1,
                  1
                 ) item_id,
          c.seedlot_test_code, d.genetic_class_code, d.superior_prvnc_ind,
          a.spar_fund_srce_st, b.label_ind, b.inventory_ind,
          a.seedling_stktyp_cd || a.seedling_contnr_cd stock_type,
          a.seedling_stkage_cd,
          c.rqst_test_reserve + c.rqst_test_surplus test_grams,
          c.germination_pct, c.seedlot_test_code,
          cns_fn_get_ship_date (b.request_skey, b.item_id),
          cns_fn_get_withdrawal_date (b.request_skey, b.item_id),
          cns_fn_get_strat_start_date (b.request_skey, b.item_id),
          cns_fn_get_special_service (b.request_skey, b.item_id),
          cns_fn_get_spcl_svc_date (b.request_skey, b.item_id),
          cns_fn_critical_comments (b.request_skey, b.item_id),
          a.planting_season_st, b.item_id,
          DECODE (a.request_type_st,
                  'SRQ', cns_fn_m_def_sow_date (a.request_skey),
                  'N'
                 ),
          d.orchard_id, j.qa_ind,
             d.genetic_class_code
          || DECODE (NVL (d.superior_prvnc_ind, 0), -1, '+', ' '),
          a.qty_seedlings_rqst, b.do_not_action_ind,
          DECODE (a.request_type_st,
                  'SRQ', cns_fn_calc_sow_date (a.request_skey),
                  NULL
                 ),
          DECODE (a.request_type_st, 'SRQ', a.sowing_yr, a.request_yr),
          b.spcfied_sowing_dt, b.rqst_sdlngs_rsrvd + b.rqst_sdlngs_srpls,
          cns_fn_sl_curr_gtest_str (c.seedlot_number),
          NVL ((SELECT COUNT (ria.ria_skey)
                  FROM cns_t_rqst_itm_actvty ria,
                       cns_t_tsc_test_result tesres,
                       cns_t_test_regime tr
                 WHERE ria.seedlot_number = c.seedlot_number
                   AND ria.ria_skey = tesres.ria_skey
                   AND ria.stndrd_activity_id = tr.seedlot_test_code
                   AND tesres.accept_result_ind = -1
                   AND tesres.test_complete_ind = -1
                   AND intrmdt_cleanr_ind = -1
                   AND tesres.test_rank = 'A'
                   AND tesres.current_test_ind = -1),
               0
              ),
          avail_qty,
           --Modified August 2017 by ebiranbaum, include count and last date for QA tests - Enhancement request
           (SELECT COUNT (ria.ria_skey)
                  FROM
                   cns_t_spar_request sr,
                   cns_t_rqst_itm_actvty ria,
                   cns_t_tsc_test_result tesres,
                   cns_t_test_regime reg
               WHERE ria.seedlot_number = c.seedlot_number
               AND sr.request_skey = ria.request_skey
               AND sr.request_type_st = 'SRQ'
               AND ria.ria_skey = tesres.ria_skey
               AND reg.seedlot_test_code = ria.activity_type_cd
               AND ria.test_category_cd = 'QA'
               AND tesres.test_complete_ind = -1
               AND ria.ACTUAL_END_DT_TM IS NOT NULL)count_of_qa_tests,
               (SELECT to_char(max(ria.ACTUAL_END_DT_TM), 'YYYY')
               FROM
                   cns_t_spar_request sr,
                   cns_t_rqst_itm_actvty ria,
                   cns_t_tsc_test_result tesres,
                   cns_t_test_regime reg
               WHERE ria.seedlot_number = c.seedlot_number
               AND sr.request_skey = ria.request_skey
               AND sr.request_type_st = 'SRQ'
               AND ria.ria_skey = tesres.ria_skey
               AND reg.seedlot_test_code = ria.activity_type_cd
               AND ria.test_category_cd = 'QA'
               AND tesres.test_complete_ind = -1
               AND ria.ACTUAL_END_DT_TM IS NOT NULL)last_qa_date,
               cns_fn_get_withdrawal_end_date (b.request_skey, b.item_id)

     FROM cns_t_spar_request a,
          cns_t_request_item b,
          cns_t_request_seedlot c,
          cns_t_seedlot d,
          cns_t_org_unit e,
          req_has_qa_act j,
          avail_seed_qty avail
    WHERE a.request_skey = b.request_skey
      AND a.org_unit_no = e.org_unit_no
      AND b.request_skey = c.request_skey
      AND b.item_id = c.item_id
      AND c.seedlot_number = d.seedlot_number
      AND b.request_skey = j.request_skey
      AND b.item_id = j.item_id
      and c.seedlot_number = avail.seedlot_number;


-- CONSEP.CNS65_FAST source

CREATE OR REPLACE VIEW CONSEP.CNS65_FAST
(REQUEST_SKEY,RQST_STS,CLIENT_ACRONYM,REQUEST_CLIENT_ACRONYM,SHIPTO_CLI_NUM,SHIPTO_CLI_NUMBER,NRSRY_CLI_NUMBER,NRSRY_OBLIGATN_IND,SHIPTO_CLI_LOCN,SHIPTO_CLI_LOCN_CD,NRSRY_CLI_LOCN_CD,LATEST_ACTIONED_DT,SOW_DT,VEGETATION_ST,SEEDLOT_NUMBER,SEEDLOT_DISPLAY,INHOUSE_INV_NO,RQST_CLI_NUMBER,RQST_CLI_LOCN_CD,REQUEST_TYPE_ST,GRAMS,REQ_ID,REQ_ID_DISPLAY,ITEM_ID,STRAT_TYPE,GENETIC_CLASS_CODE,SUPERIOR_PRVNC_IND,SPAR_FUND_SRCE_ST,LABEL_IND,INVENTORY_IND,STOCK_TYPE,AGE_CLASS,TEST_GRAMS,GERMINATION_PCT,SEEDLOT_TEST_CODE,SHIP_DATE,WITHDRAWAL_DATE,STRAT_START_DATE,SPECIAL_SERVICE,SPECIAL_SERVICE_DATE,CRITICAL_COMMENTS_IND,PLANTING_SEASON_ST,ACT_ITEM_ID,DEFAULT_SOW_DATE,ORCHARD_ID,HAS_QA_ACT,CLASS,QTY_SEEDLINGS_RQST,DO_NOT_ACTION_IND,CALC_SOW_DATE,SOW_YR,SPEC_SOW_DATE,QTY_SEEDLINGS_CALC,ACTIVE_GTEST,SL_LAB_CRIT_COMMENT)
AS
SELECT
--Modified July 2003 by mdellavi, suppress item_id display for SRQ/CSP type requests
-- Fast view - no lab critical comments
          a.request_skey, a.spr_rqst_status_st,
          cns_fn_get_cli_nurs_acronym (DECODE (b.shipto_cli_number,
                                               NULL, DECODE
                                                        (b.nrsry_obligatn_ind,
                                                         -1, b.nrsry_cli_number,
                                                         NULL
                                                        ),
                                               b.shipto_cli_number
                                              ),
                                       DECODE (b.shipto_cli_locn_cd,
                                               NULL, DECODE
                                                        (b.nrsry_obligatn_ind,
                                                         -1, b.nrsry_cli_locn_cd,
                                                         NULL
                                                        ),
                                               b.shipto_cli_locn_cd
                                              )
                                      ),
          cns_fn_get_client_acronym (a.rqst_cli_number, NULL),
          DECODE (b.shipto_cli_number,
                  NULL, DECODE (b.nrsry_obligatn_ind,
                                -1, b.nrsry_cli_number,
                                NULL
                               ),
                  b.shipto_cli_number
                 ),
          b.shipto_cli_number, b.nrsry_cli_number, b.nrsry_obligatn_ind,
          DECODE (b.shipto_cli_locn_cd,
                  NULL, DECODE (b.nrsry_obligatn_ind,
                                -1, b.nrsry_cli_locn_cd,
                                NULL
                               ),
                  b.shipto_cli_locn_cd
                 ),
          b.shipto_cli_locn_cd, b.nrsry_cli_locn_cd,
          TRUNC (b.latest_actioned_dt),
          TRUNC (DECODE (b.spcfied_sowing_dt,
                         NULL, b.rcmnded_sowing_dt,
                         b.spcfied_sowing_dt
                        )
                ) sow_dt,
          d.vegetation_st, d.seedlot_number,
          DECODE (d.registerd_seed_ind,
                  -1, d.seedlot_number,
                  d.seedlot_number || 'U'
                 ),
          b.inhouse_inv_no, a.rqst_cli_number, a.rqst_cli_locn_cd,
          a.request_type_st, c.rqst_from_reserve + c.rqst_from_surplus grams,
          DECODE (a.request_type_st,
                  'SRQ', a.sowing_yr
                   || SUBSTR (e.org_unit_code, 1, 3)
                   || LPAD (TO_CHAR (a.request_sequence), 4, '0'),
                     a.request_type_st
                  || a.request_yr
                  || LPAD (TO_CHAR (a.request_sequence), 4, '0')
                 ) req_id,
          DECODE
             (a.request_type_st,
              'SRQ', a.sowing_yr
               || SUBSTR (e.org_unit_code, 1, 3)
               || LPAD (TO_CHAR (a.request_sequence), 4, '0')
               || ' ',
                 a.request_type_st
              || a.request_yr
              || LPAD (TO_CHAR (a.request_sequence), 4, '0')
              || SUBSTR (cns_fn_strip_item_id (a.request_type_st,
                                               a.request_skey,
                                               b.item_id
                                              ),
                         1,
                         1
                        )
             ) req_id_display,
          SUBSTR (cns_fn_strip_item_id (a.request_type_st,
                                        a.request_skey,
                                        b.item_id
                                       ),
                  1,
                  1
                 ) item_id,
          c.seedlot_test_code, d.genetic_class_code, d.superior_prvnc_ind,
          a.spar_fund_srce_st, b.label_ind, b.inventory_ind,
          a.seedling_stktyp_cd || a.seedling_contnr_cd stock_type,
          a.seedling_stkage_cd,
          c.rqst_test_reserve + c.rqst_test_surplus test_grams,
          c.germination_pct, c.seedlot_test_code,
          cns_fn_get_ship_date (b.request_skey, b.item_id),
          cns_fn_get_withdrawal_date (b.request_skey, b.item_id),
          cns_fn_get_strat_start_date (b.request_skey, b.item_id),
          cns_fn_get_special_service (b.request_skey, b.item_id),
          cns_fn_get_spcl_svc_date (b.request_skey, b.item_id),
          cns_fn_critical_comments (b.request_skey, b.item_id),
          a.planting_season_st, b.item_id,
          DECODE (a.request_type_st,
                  'SRQ', cns_fn_m_def_sow_date (a.request_skey),
                  'N'
                 ),
          d.orchard_id, j.qa_ind,
             d.genetic_class_code
          || DECODE (NVL (d.superior_prvnc_ind, 0), -1, '+', ' '),
          a.qty_seedlings_rqst, b.do_not_action_ind,
          DECODE (a.request_type_st,
                  'SRQ', cns_fn_calc_sow_date (a.request_skey),
                  NULL
                 ),
          DECODE (a.request_type_st, 'SRQ', a.sowing_yr, a.request_yr),
          b.spcfied_sowing_dt, b.rqst_sdlngs_rsrvd + b.rqst_sdlngs_srpls,

          cns_fn_sl_curr_gtest_str (c.seedlot_number),
          null
          --NVL ((SELECT COUNT (ria.ria_skey)
          --        FROM cns_t_rqst_itm_actvty ria,
          --             cns_t_tsc_test_result tesres,
          --            cns_t_test_regime tr
          --       WHERE ria.seedlot_number = c.seedlot_number
          --         AND ria.ria_skey = tesres.ria_skey
          --         AND ria.stndrd_activity_id = tr.seedlot_test_code
          --        AND tesres.accept_result_ind = -1
          --         AND tesres.test_complete_ind = -1
          --         AND intrmdt_cleanr_ind = -1
          --         AND tesres.test_rank = 'A'
          --         AND tesres.current_test_ind = -1),
          --     0
          --   )
     FROM cns_t_spar_request a,
          cns_t_request_item b,
          cns_t_request_seedlot c,
          cns_t_seedlot d,
          cns_t_org_unit e,
          req_has_qa_act j
    WHERE a.request_skey = b.request_skey
      AND a.org_unit_no = e.org_unit_no
      AND b.request_skey = c.request_skey
      AND b.item_id = c.item_id
      AND c.seedlot_number = d.seedlot_number
      AND b.request_skey = j.request_skey
      AND b.item_id = j.item_id;


-- CONSEP.CNS69ASSIGNED source

CREATE OR REPLACE VIEW CONSEP.CNS69ASSIGNED
(INVENTORY_SKEY,SEEDLOT_NUMBER,REQUEST_ID,REQUEST_SKEY,ITEM_ID,STORAGE_STRT_DT_TM,STORAGE_END_DT_TM,STORAGE_FCLTY_ID,FROM_SECTION_ID,FROM_SHELF_ID,FROM_POSITION_ID,TO_SECTION_ID,TO_SHELF_ID,TO_POSITION_ID,CONTAINER_TYPE_CD,NO_CONTAINERS,TSC_PRODUCT_TYP_CD,RIA_SKEY)
AS
SELECT
a.INVENTORY_SKEY,
a.SEEDLOT_NUMBER,
a.REQUEST_ID,
a.REQUEST_SKEY,
SUBSTR(Cns_Fn_Strip_Item_Id('',a.request_skey,a.ITEM_ID),1,1),
a.STORAGE_STRT_DT_TM,
a.STORAGE_END_DT_TM,
b.STORAGE_FCLTY_ID,
b.FROM_SECTION_ID,
b.FROM_SHELF_ID,
b.FROM_POSITION_ID,
b.TO_SECTION_ID,
b.TO_SHELF_ID,
b.TO_POSITION_ID,
b.CONTAINER_TYPE_CD,
b.NO_CONTAINERS,
b.TSC_PRODUCT_TYP_CD,
b.RIA_SKEY
FROM
   CNS_T_ASSIGNED_INV_DT a,
   CNS_T_ASSIGND_INV_LOC b
WHERE   a.INVENTORY_SKEY = b.INVENTORY_SKEY;


-- CONSEP.CNS73TESTREQUESTS source

CREATE OR REPLACE VIEW CONSEP.CNS73TESTREQUESTS
(RIA_SKEY,REQUEST_ID,REQUEST_STATUS,REQUEST_TYPE_ST,REQUEST_SKEY,SEEDLOT_NUMBER,GENETIC_CLASS_CODE,SUPERIOR_PRVNC_IND,VEGETATION_ST,SOAK_START_DATE,SOAK_END_DATE,TEST_END_DATE,SEED_WITHDRAWAL_DATE,WARM_STRAT_START_DATE,DRYBACK_START_DATE,GERMINATOR_ENTRY,STRAT_START_DT,REVISED_END_DT,TEST_CATEGORY_CD,ACTIVITY_TYPE_CD,GERMINATOR_ID,TEST_GRAMS,GERM_TEST_IND,GERMINATOR_TRAY_ID,HAS_QA_ACT)
AS
SELECT
 ria.ria_skey,ria.request_id,spar.spr_rqst_Status_st,
spar.request_type_st, ria.request_skey,
NVL(ria.family_lot_number,ria.seedlot_number),
genetic_class_code,superior_prvnc_ind,
ria.vegetation_st, TRUNC(ria.actual_begin_dt_tm),
TRUNC(ria.actual_begin_dt_tm + NVL(regime.soak_hours,0)/24),
trunc(ria.actual_end_dt_tm),
test.seed_withdrawal_date, test.warm_strat_start_date,
test.dryback_start_date, test.germinator_entry, test.strat_start_dt,
ria.revised_end_dt,
test.test_category_cd, test.activity_type_cd,
test.germinator_id,
cns_fn_get_rqst_test_grams (ria.request_skey,ria.item_id),
cns_fn_get_germ_test_ind(ria.ACTIVITY_TYPE_CD),
test.GERMINATOR_TRAY_ID ,
qa.QA_IND
FROM CNS_T_RQST_ITM_ACTVTY ria,
CNS_T_TSC_TEST_RESULT test,
CNS_T_TEST_REGIME regime,
CNS_T_SPAR_REQUEST spar,
CNS_T_SEEDLOT lot,
REQ_HAS_QA_ACT qa
WHERE
test.ria_skey = ria.ria_skey
AND  regime.seedlot_test_code (+) = test.activity_type_cd
AND  spar.request_skey = ria.request_skey
AND  spar.request_type_st IN ('RTS','TST','CSP','SSP','SRQ', 'ASP','DWP','USP','RSP')
AND  ria.seedlot_number = lot.seedlot_number (+)
AND  ria.request_skey = qa.request_skey
AND  ria.item_id = qa.item_id;


-- CONSEP.CNS92FAMILYLOT source

CREATE OR REPLACE VIEW CONSEP.CNS92FAMILYLOT
(FAMILY_LOT_NUMBER,ORCHARD_ID,ORCHARD_NAME,VEGETATION_ST,VEGETATION_ST_DESC,PRIORITY_IND,BLENDING_CMPLT_DT,CURR_GERM_PCT,CURR_PV_PCT,CURR_PV_DAYS,CURR_GV,TESTING_CMPLT_DT,ORIGINAL_SEED_QTY,YIELD_PER_KG,CLCTN_CLI_NUMBER,CLCTN_CLI_LOCN_CD,NO_OF_CONTAINERS,CLCTN_VOLUME,CLCTN_START_DT,CLCTN_END_DT,SEEDLOT_RCVD_DT,EXTRCT_CLI_NUMBER,EXTRCT_CLI_ACRONYM,EXTRCT_CLI_LOCN_CD,EXTRCT_CLIENT_NAME,EXTRACTION_ST_DT,SEEDS_PER_GRAM,LOT_CHARACTERISTIC,NO_CONTAINERS,REQUEST_YR)
AS
SELECT
a.FAMILY_LOT_NUMBER,
d.ORCHARD_ID,
d.ORCHARD_NAME,
a.VEGETATION_ST,
veg.EXPANDED_RESULT,
cns_fn_get_priority_ind(null,a.FAMILY_LOT_NUMBER),
bln.BLENDING_CMPLT_DT,
c.GERMINATION_PCT,
c.PEAK_VALUE_GRM_PCT,
c.PEAK_VALUE_NO_DAYS,
c.GERMINATION_VALUE,
tst.TESTING_CMPLT_DT,
bal.QUANTITY_OF_SEED,
decode(rcp.CLCTN_VOLUME,0,0,bal.QUANTITY_OF_SEED/rcp.CLCTN_VOLUME/1000) yield_per_kg,
a.CLCTN_CLI_NUMBER,
a.CLCTN_CLI_LOCN_CD,
rcp.NO_CONTAINERS,
rcp.CLCTN_VOLUME,
a.CLCTN_START_DT,
a.CLCTN_END_DT,
rcp.SEEDLOT_RCVD_DT,
a.EXTRCT_CLI_NUMBER,
cns_fn_GET_CLIENT_ACRONYM(a.EXTRCT_CLI_NUMBER, NULL),
a.EXTRCT_CLI_LOCN_CD,
cns_fn_GET_CLIENT_NAME(a.EXTRCT_CLI_NUMBER, NULL),
scr.EXTRACTION_ST_DT,
cns_fn_get_fl_current_spg(a.FAMILY_LOT_NUMBER),
a.LOT_CHARACTERISTIC,
NO_CONTAINERS,
sr.request_yr
FROM	CNS_T_FAMILY_LOT a,
CNS_T_RQST_ITM_ACTVTY b,
CNS_T_TSC_TEST_RESULT c,
CNS_T_ORCHARD d,
CNS_T_SPAR_REQUEST sr,
CNS_T_REQUEST_ITEM ri,
(SELECT a.code_argument, expanded_result
FROM 	CNS_T_CODE_LIST_TABLE a,
CNS_T_CODE_SUBSET_TBL b
WHERE b.CODE_ARGUMENT = a.CODE_ARGUMENT
AND   b.CODE_SUBSET_NAME = 'VEGETATION_ST'
AND   b.COLUMN_NAME = a.COLUMN_NAME ) veg,
(SELECT FAMILY_LOT_NUMBER, QUANTITY_OF_SEED
FROM cns_t_familylot_physbal p
WHERE p.OPENING_BAL_IND = -1) bal,
(SELECT FAMILY_LOT_NUMBER,  MAX(ACTUAL_END_DT_TM) as BLENDING_CMPLT_DT
FROM   	cns_t_rqst_itm_actvty a
WHERE   ACTIVITY_TYPE_CD = 'BLN'
AND	    FAMILY_LOT_NUMBER is not null
GROUP BY FAMILY_LOT_NUMBER ) bln,
(SELECT FAMILY_LOT_NUMBER,  MIN(ACTUAL_BEGIN_DT_TM) as EXTRACTION_ST_DT
FROM    cns_t_rqst_itm_actvty a
WHERE  ACTIVITY_TYPE_CD = 'SCR'
AND	FAMILY_LOT_NUMBER is not null
GROUP BY FAMILY_LOT_NUMBER ) scr,
FAMILYLOT_RECEIPT rcp,
(SELECT	  FAMILY_LOT_NUMBER,  MAX(ria.ACTUAL_END_DT_TM) as TESTING_CMPLT_DT
FROM    CNS_T_RQST_ITM_ACTVTY ria,
CNS_T_TSC_TEST_RESULT tst
WHERE
tst.RIA_SKEY          = ria.RIA_SKEY
AND tst.CURRENT_TEST_IND  = -1
AND tst.STANDARD_TEST_IND = -1
AND tst.ACCEPT_RESULT_IND = -1
AND	FAMILY_LOT_NUMBER is not null
GROUP BY FAMILY_LOT_NUMBER ) tst,
CNS_T_TEST_REGIME regime
WHERE 	a.VEGETATION_ST = veg.CODE_ARGUMENT
AND 	bln.FAMILY_LOT_NUMBER(+) = a.FAMILY_LOT_NUMBER
AND 	bal.FAMILY_LOT_NUMBER(+) = a.FAMILY_LOT_NUMBER
AND 	rcp.FAMILY_LOT_NUMBER(+) = a.FAMILY_LOT_NUMBER
AND 	scr.FAMILY_LOT_NUMBER(+) = a.FAMILY_LOT_NUMBER
AND 	tst.FAMILY_LOT_NUMBER(+) = a.FAMILY_LOT_NUMBER
AND 	d.ORCHARD_ID (+) = a.ORCHARD_ID
AND 	c.RIA_SKEY	 = b.RIA_SKEY
and		b.FAMILY_LOT_NUMBER = a.FAMILY_LOT_NUMBER
AND		b.REQUEST_SKEY IS NOT NULL
AND 	c.TEST_CATEGORY_CD  = 'STD'
AND 	c.ACCEPT_RESULT_IND = -1
AND 	c.CURRENT_TEST_IND  = -1
AND     b.stndrd_ACTIVITY_ID = regime.SEEDLOT_TEST_CODE
AND     a.FAMILY_LOT_NUMBER is not null
AND     sr.request_skey = ri.request_skey
AND     ri.FAMILY_LOT_NUMBER = a.FAMILY_LOT_NUMBER;


-- CONSEP.CNS92FAMILYLOT_ORIG source

CREATE OR REPLACE VIEW CONSEP.CNS92FAMILYLOT_ORIG
(FAMILY_LOT_NUMBER,ORCHARD_ID,ORCHARD_NAME,VEGETATION_ST,VEGETATION_ST_DESC,PRIORITY_IND,BLENDING_CMPLT_DT,CURR_GERM_PCT,CURR_PV_PCT,CURR_PV_DAYS,CURR_GV,TESTING_CMPLT_DT,ORIGINAL_SEED_QTY,YIELD_PER_KG,CLCTN_CLI_NUMBER,CLCTN_CLI_LOCN_CD,NO_OF_CONTAINERS,CLCTN_VOLUME,CLCTN_START_DT,CLCTN_END_DT,SEEDLOT_RCVD_DT,EXTRCT_CLI_NUMBER,EXTRCT_CLI_ACRONYM,EXTRCT_CLI_LOCN_CD,EXTRCT_CLIENT_NAME,EXTRACTION_ST_DT,SEEDS_PER_GRAM,LOT_CHARACTERISTIC)
AS
SELECT
a.FAMILY_LOT_NUMBER,
d.ORCHARD_ID,
d.ORCHARD_NAME,
a.VEGETATION_ST,
veg.EXPANDED_RESULT,
cns_fn_get_priority_ind(null,a.FAMILY_LOT_NUMBER),
bln.BLENDING_CMPLT_DT,
c.GERMINATION_PCT,
c.PEAK_VALUE_GRM_PCT,
c.PEAK_VALUE_NO_DAYS,
c.GERMINATION_VALUE,
tst.TESTING_CMPLT_DT,
bal.QUANTITY_OF_SEED,
decode(nvl(rcp.CLCTN_VOLUME,0),0,0,bal.QUANTITY_OF_SEED)/(rcp.CLCTN_VOLUME*1000) yield_per_kg,
a.CLCTN_CLI_NUMBER,
a.CLCTN_CLI_LOCN_CD,
rcp.NO_CONTAINERS,
rcp.CLCTN_VOLUME,
a.CLCTN_START_DT,
a.CLCTN_END_DT,
rcp.SEEDLOT_RCVD_DT,
a.EXTRCT_CLI_NUMBER,
cns_fn_GET_CLIENT_ACRONYM(a.EXTRCT_CLI_NUMBER, NULL),
a.EXTRCT_CLI_LOCN_CD,
cns_fn_GET_CLIENT_NAME(a.EXTRCT_CLI_NUMBER, NULL),
scr.EXTRACTION_ST_DT,
cns_fn_get_fl_current_spg(a.FAMILY_LOT_NUMBER),
a.LOT_CHARACTERISTIC
FROM	CNS_T_FAMILY_LOT a,
CNS_T_RQST_ITM_ACTVTY b,
CNS_T_TSC_TEST_RESULT c,
CNS_T_ORCHARD d,
(SELECT a.code_argument, expanded_result
FROM 	CNS_T_CODE_LIST_TABLE a,
CNS_T_CODE_SUBSET_TBL b
WHERE b.CODE_ARGUMENT = a.CODE_ARGUMENT
AND   b.CODE_SUBSET_NAME = 'VEGETATION_ST'
AND   b.COLUMN_NAME = a.COLUMN_NAME ) veg,
(SELECT FAMILY_LOT_NUMBER, QUANTITY_OF_SEED
FROM cns_t_familylot_physbal p
WHERE p.OPENING_BAL_IND = -1) bal,
(SELECT FAMILY_LOT_NUMBER,  MAX(ACTUAL_END_DT_TM) as BLENDING_CMPLT_DT
FROM   	cns_t_rqst_itm_actvty a
WHERE   ACTIVITY_TYPE_CD = 'BLN'
AND	    FAMILY_LOT_NUMBER is not null
GROUP BY FAMILY_LOT_NUMBER ) bln,
(SELECT FAMILY_LOT_NUMBER,  MIN(ACTUAL_BEGIN_DT_TM) as EXTRACTION_ST_DT
FROM    cns_t_rqst_itm_actvty a
WHERE  ACTIVITY_TYPE_CD = 'SCR'
AND	FAMILY_LOT_NUMBER is not null
GROUP BY FAMILY_LOT_NUMBER ) scr,
(SELECT FAMILY_LOT_NUMBER, MIN(ACTUAL_ARRVL_DT_TM) as SEEDLOT_RCVD_DT,
SUM(NVL(A.NO_CONTAINERS,0)* NVL(VOL_PER_CONTAINER,0)) AS CLCTN_VOLUME,
SUM(NVL(a.NO_CONTAINERS,0)) AS NO_CONTAINERS
FROM
cns_t_ship_rcpt_item a
WHERE
A.FAMILY_LOT_NUMBER is not null
GROUP BY FAMILY_LOT_NUMBER ) rcp,
(SELECT	  FAMILY_LOT_NUMBER,  MAX(ria.ACTUAL_END_DT_TM) as TESTING_CMPLT_DT
FROM    CNS_T_RQST_ITM_ACTVTY ria,
CNS_T_TSC_TEST_RESULT tst
WHERE
tst.RIA_SKEY          = ria.RIA_SKEY
AND tst.CURRENT_TEST_IND  = -1
AND tst.STANDARD_TEST_IND = -1
AND tst.ACCEPT_RESULT_IND = -1
AND	FAMILY_LOT_NUMBER is not null
GROUP BY FAMILY_LOT_NUMBER ) tst
WHERE 	a.VEGETATION_ST = veg.CODE_ARGUMENT
AND 	bln.FAMILY_LOT_NUMBER(+) = a.FAMILY_LOT_NUMBER
AND 	bal.FAMILY_LOT_NUMBER(+) = a.FAMILY_LOT_NUMBER
AND 	rcp.FAMILY_LOT_NUMBER(+) = a.FAMILY_LOT_NUMBER
AND 	scr.FAMILY_LOT_NUMBER(+) = a.FAMILY_LOT_NUMBER
AND 	tst.FAMILY_LOT_NUMBER(+) = a.FAMILY_LOT_NUMBER
AND 	d.ORCHARD_ID (+) = a.ORCHARD_ID
AND 	c.RIA_SKEY	 = b.RIA_SKEY
and		b.FAMILY_LOT_NUMBER = a.FAMILY_LOT_NUMBER
AND		b.REQUEST_SKEY IS NOT NULL
AND 	c.TEST_CATEGORY_CD  = 'STD'
AND 	c.ACCEPT_RESULT_IND = -1
AND 	c.CURRENT_TEST_IND  = -1;


-- CONSEP.CNS93FAMILYLOTSUMMARY source

CREATE OR REPLACE VIEW CONSEP.CNS93FAMILYLOTSUMMARY
(FAMILY_LOT_NUMBER,REQUEST_ID,REQUEST_SKEY,REQUEST_YR,ORCHARD_ID,ORCHARD_NAME,VEGETATION_ST,VEGETATION_ST_DESC,SEEDLOT_TEST_CODE,CURR_GERM_PCT,MC,PUR,SPG,ORIGINAL_SEED_QTY,TRANSACTION_AMOUNT,CLCTN_VOLUME,CLCTN_CLI_NUMBER,CLCTN_CLI_LOCN_CD,CLCTN_CLIENT_ACRONYM,CLCTN_CLIENT_NAME,STORAGE_FCLTY_DESC,FROM_SECTION_ID,FROM_SHELF_ID,FROM_POSITION_ID,TO_SECTION_ID,TO_SHELF_ID,TO_POSITION_ID,REVISED_END_DT,NON_STD_SEEDLOT_TEST_CODE,CURR_NON_STD_GERM_PCT,NON_STD_REVISED_END_DT,CAE_MC,CAL,FUS,SIR,FAMILY_LOT_COMMENT,CLIENT_REF,SPAR_CLIENT_REF,OTHER_TEST_RESULT)
AS
SELECT a.family_lot_number,
             b.request_type_st
          || b.request_yr
          || LPAD (TO_CHAR (b.request_sequence), 4, '0') request_id,
          b.request_skey, b.request_yr, d.orchard_id, d.orchard_name,
          a.vegetation_st, clt.expanded_result,
          germ.activity_type_cd seedlot_test_code, germ.germination_pct,
          cns_fn_get_fl_current_mc (a.family_lot_number),
          cns_fn_get_fl_current_pur (a.family_lot_number),
          cns_fn_get_fl_current_spg (a.family_lot_number),
          bal.quantity_of_seed original_seed_qty,
          cns_fn_get_fl_txn (a.family_lot_number) transaction_amount,
          cns_fn_get_fl_clctn_vol (a.family_lot_number) clctn_volume,
          a.clctn_cli_number, a.clctn_cli_locn_cd,
          cns_fn_get_client_acronym (a.clctn_cli_number, NULL),
          cns_fn_get_client_name (a.clctn_cli_number, NULL),
          invf.storage_fclty_desc, invloc.from_section_id,
          invloc.from_shelf_id, invloc.from_position_id, invloc.to_section_id,
          invloc.to_shelf_id, invloc.to_position_id, germ.actual_end_dt_tm,
          germ_non_std.activity_type_cd, germ_non_std.germination_pct,
          germ_non_std.actual_end_dt_tm,
          cns_fn_get_fl_current_cae_mc (a.family_lot_number), cal, fus, sir,
          family_lot_comment, a.client_reference, b.client_reference, cns_fn_fam_other_test_string(a.family_lot_number)
     FROM cns_t_family_lot a,
          cns_t_request_item ri,
          cns_t_spar_request b,
          cns_t_orchard d,
          cns_t_code_list_table clt,
          cns_t_code_subset_tbl cst,
          cns_t_familylot_physbal bal,
          cns_t_assigned_inv_dt invdt,
          cns_t_assignd_inv_loc invloc,
          cns_t_inventory_fclty invf,
          familylot_germ_latest germ,
          familylot_germ_latest_non_std germ_non_std,
          family_fungal_results_current fungal
    WHERE cst.code_subset_name = 'VEGETATION_ST'
      AND a.vegetation_st = cst.code_argument
      AND cst.code_argument = clt.code_argument
      AND cst.column_name = clt.column_name
      AND ri.family_lot_number = a.family_lot_number
      AND ri.request_skey = b.request_skey
      AND d.orchard_id(+) = a.orchard_id
      AND b.request_type_st IN ('CSP', 'SSP', 'USP', 'ASP')
      AND b.spr_rqst_status_st <> 'CAN'
      AND bal.family_lot_number(+) = a.family_lot_number
      AND bal.opening_bal_ind(+) = -1
      AND germ.family_lot_number(+) = a.family_lot_number
      AND ri.request_skey = invdt.request_skey(+)
      AND invdt.storage_end_dt_tm(+) IS NULL
      AND invloc.inventory_skey(+) = invdt.inventory_skey
      AND invf.storage_fclty_id(+) = invloc.storage_fclty_id
      AND germ_non_std.family_lot_number(+) = a.family_lot_number
      AND fungal.family_lot_number(+) = a.family_lot_number;


-- CONSEP.CNS94_BASIC_DATA source

CREATE OR REPLACE VIEW CONSEP.CNS94_BASIC_DATA
(SHIP_REQUEST_SKEY,SHIP_ITEM_ID,SEEDLOT_NUMBER,GRAMS_RETURNED,RETURN_COMMENT,RETURN_DATE,RETURN_CLIENT_NUMBER,RETURN_CLIENT_LOCN_CODE,PROCESS_REQUEST_SKEY,PROCESS_ITEM_ID,RETURN_STATUS,RIA_SKEY,BOXID_STORE_DATE,REQUEST_ID,VEGETATION_ST,NEW_SEEDLOT_NUMBER,RQST_CLI_NUMBER,RQST_CLI_LOCN_CD,GRAMS,REQUEST_YR,NEW_SL_RETURN_STATUS)
AS
SELECT sr.ship_request_skey, sr.ship_item_id, sr.seedlot_number,
          sr.grams_returned, sr.return_comment, sr.return_date,
          sr.return_client_number, sr.return_client_locn_code,
          sr.process_request_skey, sr.process_item_id, sr.return_status,
          sr.ria_skey, sr.boxid_store_date, ria.request_id, ria.vegetation_st,
          req_sl.seedlot_number AS new_seedlot_number,
          spar_req.rqst_cli_number, spar_req.rqst_cli_locn_cd,
          NVL ((  req_sl_1.rqst_from_reserve
                + req_sl_1.rqst_from_surplus
                + req_sl_1.rqst_test_reserve
                + req_sl_1.rqst_test_surplus
               ),
               0
              ) AS grams,
          spar_req.sowing_yr request_yr,
          seedlot.seedlot_status_st AS new_sl_return_status
     FROM cns_t_seedlot_return sr,
          cns_t_rqst_itm_actvty ria,
          cns_t_request_seedlot req_sl,
          cns_t_spar_request spar_req,
          cns_t_request_seedlot req_sl_1,
          cns_t_seedlot seedlot
    WHERE sr.ria_skey = ria.ria_skey(+)
      AND sr.process_request_skey = req_sl.request_skey(+)
      AND sr.process_item_id = req_sl.item_id(+)
      AND sr.ship_request_skey = spar_req.request_skey(+)
      AND spar_req.request_skey = req_sl_1.request_skey(+)
      AND req_sl.seedlot_number = seedlot.seedlot_number(+);


-- CONSEP.CNS94_BASIC_DATA1 source

CREATE OR REPLACE VIEW CONSEP.CNS94_BASIC_DATA1
(SHIP_REQUEST_SKEY,SHIP_ITEM_ID,SEEDLOT_NUMBER,GRAMS_RETURNED,RETURN_COMMENT,RETURN_DATE,RETURN_CLIENT_NUMBER,RETURN_CLIENT_LOCN_CODE,PROCESS_REQUEST_SKEY,PROCESS_ITEM_ID,RETURN_STATUS,RIA_SKEY,BOXID_STORE_DATE,REQUEST_ID,VEGETATION_ST,NEW_SEEDLOT_NUMBER,RQST_CLI_NUMBER,RQST_CLI_LOCN_CD,RQST_FROM_RESERVE,RQST_FROM_SURPLUS,RQST_TEST_RESERVE,RQST_TEST_SURPLUS,REQUEST_YR,NEW_SL_RETURN_STATUS)
AS
SELECT sr.ship_request_skey, sr.ship_item_id, sr.seedlot_number,
          sr.grams_returned, sr.return_comment, sr.return_date,
          sr.return_client_number, sr.return_client_locn_code,
          sr.process_request_skey, sr.process_item_id, sr.return_status,
          sr.ria_skey, sr.boxid_store_date, ria.request_id, ria.vegetation_st,
          req_sl.seedlot_number AS new_seedlot_number,
          spar_req.rqst_cli_number, spar_req.rqst_cli_locn_cd,
          req_sl_1.rqst_from_reserve,
          req_sl_1.rqst_from_surplus,
          req_sl_1.rqst_test_reserve,
          req_sl_1.rqst_test_surplus,

          spar_req.sowing_yr request_yr,
          seedlot.seedlot_status_st AS new_sl_return_status
     FROM cns_t_seedlot_return sr,
          cns_t_rqst_itm_actvty ria,
          cns_t_request_seedlot req_sl,
          cns_t_spar_request spar_req,
          cns_t_request_seedlot req_sl_1,
          cns_t_seedlot seedlot
    WHERE sr.ria_skey = ria.ria_skey(+)
      AND sr.process_request_skey = req_sl.request_skey(+)
      AND sr.process_item_id = req_sl.item_id(+)
      AND sr.ship_request_skey = spar_req.request_skey(+)
      AND spar_req.request_skey = req_sl_1.request_skey(+)
      AND req_sl.seedlot_number = seedlot.seedlot_number(+);


-- CONSEP.CNS94_SUMMARY source

CREATE OR REPLACE VIEW CONSEP.CNS94_SUMMARY
(SHIP_REQUEST_SKEY,SHIP_ITEM_ID,SEEDLOT_NUMBER,GRAMS_RETURNED,RETURN_COMMENT,RETURN_DATE,RETURN_STATUS_DISPLAY,RETURN_CLIENT_NUMBER,RETURN_CLIENT_LOCN_CODE,RETURN_CLIENT_ACRONYM,PROCESS_REQUEST_SKEY,PROCESS_ITEM_ID,RIA_SKEY,BOXID_STORE_DATE,REQUEST_ID,VEGETATION_ST,NEW_SEEDLOT_NUMBER,RQST_CLI_NUMBER,RQST_CLI_LOCN_CD,RQST_CLI_ACRONYM,GRAMS,STRAT_DATE,SHIP_DATE,QAR_MC,SL_MC,SL_GERM,SL_GERM_TYPE,SL_GERM_DATE,QA1_GERM,QA1_GERM_DATE,QA2_GERM_REQUIRED_DATE,QA2_GERM,QA2_GERM_DATE,AVAIL_GRAMS,VALUE_AMT,ASSOC_REQUESTS,RSP_REQUEST,NEW_SL_ORIG_QTY,NEW_SL_ORIG_POT_TREES,REQUEST_YR,RSP_AVAIL_GRAMS,RSP_MC,RSP_GERM,RSP_GERM_DATE,RSP_GERM_TYPE,RSP_6_MONTH_RESTEST_DATE,NEW_SL_RETURN_STATUS,NEW_SL_6_MONTH_RSLT,RETURN_STATUS,SPZ_STR,GW)
AS
SELECT /*+RULE*/
          sr.ship_request_skey, sr.ship_item_id, sr.seedlot_number,
          sr.grams_returned, sr.return_comment, sr.return_date,
          DECODE (sr.return_status,
                  'INP', 'In_Prog',
                  'DES', 'Destry',
                  'NSL', 'New_SL',
                  'BLK', 'Bulked'
                 ),
          sr.return_client_number, sr.return_client_locn_code,
          cns_fn_get_cli_nurs_acronym (sr.return_client_number,
                                       sr.return_client_locn_code
                                      ),
          sr.process_request_skey, sr.process_item_id, sr.ria_skey,
          sr.boxid_store_date, ria.request_id, ria.vegetation_st,
          rs2.seedlot_number, spar.rqst_cli_number, spar.rqst_cli_locn_cd,
          cns_fn_get_client_acronym (spar.rqst_cli_number, NULL),
          rs1.rqst_from_reserve + rs1.rqst_from_surplus,
          cns_fn_get_strat_start_date (sr.ship_request_skey, sr.ship_item_id),
          cns_fn_get_ship_date (sr.ship_request_skey, sr.ship_item_id),
          mc_rs.moisture_pct, ctr.moisture_pct, ctr.germination_pct,
          ctr.activity_type_cd, TRUNC (ctr.current_a_rank_date),
          gt1.germination_pct, TRUNC (gt1.actual_end_dt_tm),
          TRUNC (ADD_MONTHS (mc_rs.actual_end_dt_tm, 6)), gt2.germination_pct,
          TRUNC (gt2.actual_end_dt_tm), asq.avail_qty,
            NVL (sr.grams_returned, 0)
          * price.price_per_kg_seedlot
          / 1000 value_amt,
          cns_fn_assoc_req_string (sr.ria_skey),
             spar2.request_type_st
          || spar2.request_yr
          || LPAD (TO_CHAR (spar2.request_sequence), 4, '0'),
          new_sl.original_seed_qty,
          original_potential_trees.original_potential_trees, spar.sowing_yr,
          newsl.avail_qty, newsl_tests.moisture_pct,
          newsl_tests.germination_pct, TRUNC (newsl_tests.test_end_date),
          newsl_tests.activity_type_cd,
          TRUNC
               (ADD_MONTHS (cns_fn_get_seedlot_storage_dt (rs2.seedlot_number),
                            6
                           )
               ),
          DECODE (sr.return_status, 'DES', 'EXP', new_sl.seedlot_status_st),
          cns_fn_rsp_2nd_germ_str
              (ADD_MONTHS (cns_fn_get_seedlot_storage_dt (rs2.seedlot_number),
                           6
                          ),
               rs2.seedlot_number
              ),
          sr.return_status, spz_string, g_value
     FROM cns_t_seedlot_return sr,
          cns_t_rqst_itm_actvty ria,
          cns_t_request_seedlot rs1,
          cns_t_spar_request spar,
          cns_t_request_seedlot rs2,
          cns_t_spar_request spar2,
          cns_t_seedlot new_sl,
          original_potential_trees,
          current_test_results ctr,
          avail_seed_qty asq,
          (SELECT associatd_ria_skey, moisture_pct, actual_end_dt_tm,
                  a.activity_type_cd
             FROM cns_t_rqst_itm_actvty a, cns_t_tsc_test_result b
            WHERE a.ria_skey = b.ria_skey
              AND a.item_id = 'A'
              AND stndrd_activity_id = 'MCR') mc_rs,
          (SELECT associatd_ria_skey, germination_pct, actual_end_dt_tm,
                  a.activity_type_cd
             FROM cns_t_rqst_itm_actvty a,
                  cns_t_tsc_test_result b,
                  cns_t_test_regime tr
            WHERE a.ria_skey = b.ria_skey
              AND a.item_id = 'A'
              AND stndrd_activity_id = seedlot_test_code
              AND work_centre_id IS NULL) gt1,
          (SELECT associatd_ria_skey, germination_pct, actual_end_dt_tm,
                  a.activity_type_cd
             FROM cns_t_rqst_itm_actvty a,
                  cns_t_tsc_test_result b,
                  cns_t_test_regime tr
            WHERE a.ria_skey = b.ria_skey
              AND a.item_id = 'A'
              AND work_centre_id = 'B'
              AND stndrd_activity_id = seedlot_test_code) gt2,
          seedlot_price_kg price,
          avail_seed_qty newsl,
          original_germ_results newsl_tests,
          spz_all spz,
          sl_g_worth_values gw
    WHERE sr.ria_skey = ria.ria_skey
      AND sr.ship_request_skey = rs1.request_skey(+)
      AND sr.ship_request_skey = spar.request_skey(+)
      AND sr.seedlot_number = ctr.seedlot_number
      AND sr.seedlot_number = asq.seedlot_number
      AND sr.process_request_skey = rs2.request_skey(+)
      AND sr.process_request_skey = spar2.request_skey(+)
      AND sr.ria_skey = gt1.associatd_ria_skey(+)
      --AND CTR.ACTIVITY_TYPE_CD = GT1.ACTIVITY_TYPE_CD
      AND sr.ria_skey = gt2.associatd_ria_skey(+)
      --AND CTR.ACTIVITY_TYPE_CD = GT2.ACTIVITY_TYPE_CD
      AND sr.seedlot_number = price.seedlot_number
      AND sr.ria_skey = mc_rs.associatd_ria_skey(+)
      AND new_sl.seedlot_number(+) = rs2.seedlot_number
      AND original_potential_trees.seedlot_number(+) = rs2.seedlot_number
      AND newsl.seedlot_number(+) = rs2.seedlot_number
      AND newsl_tests.seedlot_number(+) = rs2.seedlot_number
      AND sr.seedlot_number = spz.seedlot_number
      AND sr.seedlot_number = gw.seedlot_number(+);


-- CONSEP.CNS97_REQ_YR source

CREATE OR REPLACE VIEW CONSEP.CNS97_REQ_YR
(REQUEST_SKEY,REQ_YR)
AS
SELECT   sr.request_skey,
DECODE(sr.REQUEST_TYPE_ST,'SRQ',sr.SOWING_YR,sr.REQUEST_YR)
FROM    CNS_T_SPAR_REQUEST sr;


-- CONSEP.CNSB05 source

CREATE OR REPLACE VIEW CONSEP.CNSB05
(REQUEST_SKEY,SPR_RQST_STATUS_ST,RIA_SKEY,UPDATE_TIMESTAMP,REQUEST_ID,ITEM_ID,STNDRD_ACTIVITY_ID,PLANNED_START_DT,PLANNED_END_DT,ACTUAL_BEGIN_DT_TM,ACTUAL_END_DT_TM,PROCESS_COMMIT_IND,SIGNIFICNT_STS_IND,SEEDLOT_NUMBER)
AS
SELECT
--Modified July 2003 by mdellavi, suppress item_id display for SRQ/CSP type requests
a.REQUEST_SKEY, a.SPR_RQST_STATUS_ST, c.RIA_SKEY,
c.UPDATE_TIMESTAMP, c.REQUEST_ID, SUBSTR(Cns_Fn_Strip_Item_Id(a.request_type_st,a.request_skey,b.ITEM_ID),1,1),
c.STNDRD_ACTIVITY_ID,
c.PLANNED_START_DT, c.PLANNED_END_DT,
c.ACTUAL_BEGIN_DT_TM, c.ACTUAL_END_DT_TM,
c.PROCESS_COMMIT_IND, c.SIGNIFICNT_STS_IND, c.SEEDLOT_NUMBER
FROM
CNS_T_SPAR_REQUEST a,
CNS_T_REQUEST_ITEM b,
CNS_T_RQST_ITM_ACTVTY c
WHERE a.request_skey    = b.request_skey
AND b.request_skey    = c.request_skey
AND b.item_id            = c.item_id
and a.request_skey    <> 0
and  c.SIGNIFICNT_STS_IND = -1
AND a.request_skey IN
(SELECT DISTINCT(d.request_skey) FROM CNS_T_SPAR_REQUEST d,
CNS_T_RQST_ITM_ACTVTY e
WHERE d.request_skey = e.request_skey
and  d.request_skey <> 0
and e.update_timestamp is not null
AND    e.update_timestamp > (SELECT LAST_SEND_DATE FROM CNS_T_SEND_DATE
WHERE application = 'CNSLB05') );


-- CONSEP.CNSL20_GERMLIST source

CREATE OR REPLACE VIEW CONSEP.CNSL20_GERMLIST
(SAMPLE_SPC,SAMPLE_ID,REQUEST_ITEM,REQUEST_ID,ITEM_ID,SEEDLOT_NUMBER,RIA_SKEY,ACTIVITY_TYPE_CD,TEST_CATEGORY_CD,TEST_RANK,GERMINATION_PCT,GERMINATION_VALUE,GERMINATOR_NO,SHELF_NO,POSITION_NO,SEEDLOT_NO,VEGETATION_ST,REGISTERD_SEED_IND,ACTIVITY_DSC)
AS
SELECT
--Modified July 2003 by mdellavi, suppress item_id display for SRQ/CSP type requests
   ri.VEGETATION_ST ,ri.SAMPLE_ID
  ,ria.REQUEST_ID||SUBSTR(Cns_Fn_Strip_Item_Id('',ria.request_skey,ria.ITEM_ID),1,1)
  ,ria.REQUEST_ID ,SUBSTR(Cns_Fn_Strip_Item_Id('',ria.request_skey,ria.ITEM_ID),1,1)
  ,ria.SEEDLOT_NUMBER, test.RIA_SKEY ,test.ACTIVITY_TYPE_CD
  ,test.TEST_CATEGORY_CD, test.TEST_RANK ,test.GERMINATION_PCT
  ,test.GERMINATION_VALUE ,loc.GERMINATOR_NO ,loc.SHELF_NO, loc.POSITION_NO
  ,DECODE(lot.REGISTERD_SEED_IND, -1,lot.SEEDLOT_NUMBER, lot.SEEDLOT_NUMBER||'U')
  ,lot.VEGETATION_ST,lot.REGISTERD_SEED_IND ,cl.EXPANDED_RESULT
 FROM
    CNS_T_CODE_LIST_TABLE cl
   ,CNS_T_ASSIGND_GERM_LOC loc
   ,CNS_T_TSC_TEST_RESULT test
   ,CNS_T_REQUEST_ITEM ri
   ,CNS_T_RQST_ITM_ACTVTY ria
   ,CNS_T_SEEDLOT lot
 WHERE
     cl.COLUMN_NAME = 'ACTIVITY_TYPE_CD'
 AND ria.ACTIVITY_TYPE_CD = cl.CODE_ARGUMENT
 AND test.RIA_SKEY = loc.RIA_SKEY
 AND ria.RIA_SKEY = test.RIA_SKEY
 AND ri.REQUEST_SKEY = ria.REQUEST_SKEY
 AND ri.ITEM_ID = ria.ITEM_ID
 AND ria.seedlot_number = lot.seedlot_number(+);


-- CONSEP.CNSL25_DAILY_ABNORMAL_SUM source

CREATE OR REPLACE VIEW CONSEP.CNSL25_DAILY_ABNORMAL_SUM
(RIA_SKEY,REP1_TOTAL_ABNORMALS,REP2_TOTAL_ABNORMALS,REP3_TOTAL_ABNORMALS,REP4_TOTAL_ABNORMALS)
AS
SELECT G.RIA_SKEY,
       SUM(NVL(A1.RP1_NO_ABNRM_RE,0)+NVL(A2.RP1_NO_ABNRM_RE,0)+NVL(A3.RP1_NO_ABNRM_RE,0)+NVL(A4.RP1_NO_ABNRM_RE,0)+NVL(A5.RP1_NO_ABNRM_RE,0)+NVL(A6.RP1_NO_ABNRM_RE,0)+NVL(A7.RP1_NO_ABNRM_RE,0)+NVL(A8.RP1_NO_ABNRM_RE,0)+NVL(A9.RP1_NO_ABNRM_RE,0)+NVL(A10.RP1_NO_ABNRM_RE,0)+NVL(A11.RP1_NO_ABNRM_RE,0)+NVL(A12.RP1_NO_ABNRM_RE,0)+NVL(A13.RP1_NO_ABNRM_RE,0)+
           NVL(A1.RP1_NO_ABNRM_SR,0)+NVL(A2.RP1_NO_ABNRM_SR,0)+NVL(A3.RP1_NO_ABNRM_SR,0)+NVL(A4.RP1_NO_ABNRM_SR,0)+NVL(A5.RP1_NO_ABNRM_SR,0)+NVL(A6.RP1_NO_ABNRM_SR,0)+NVL(A7.RP1_NO_ABNRM_SR,0)+NVL(A8.RP1_NO_ABNRM_SR,0)+NVL(A9.RP1_NO_ABNRM_SR,0)+NVL(A10.RP1_NO_ABNRM_SR,0)+NVL(A11.RP1_NO_ABNRM_SR,0)+NVL(A12.RP1_NO_ABNRM_SR,0)+NVL(A13.RP1_NO_ABNRM_SR,0)+
           NVL(A1.RP1_NO_ABNRM_SH,0)+NVL(A2.RP1_NO_ABNRM_SH,0)+NVL(A3.RP1_NO_ABNRM_SH,0)+NVL(A4.RP1_NO_ABNRM_SH,0)+NVL(A5.RP1_NO_ABNRM_SH,0)+NVL(A6.RP1_NO_ABNRM_SH,0)+NVL(A7.RP1_NO_ABNRM_SH,0)+NVL(A8.RP1_NO_ABNRM_SH,0)+NVL(A9.RP1_NO_ABNRM_SH,0)+NVL(A10.RP1_NO_ABNRM_SH,0)+NVL(A11.RP1_NO_ABNRM_SH,0)+NVL(A12.RP1_NO_ABNRM_SH,0)+NVL(A13.RP1_NO_ABNRM_SH,0)+
           NVL(A1.RP1_NO_ABNRM_RN,0)+NVL(A2.RP1_NO_ABNRM_RN,0)+NVL(A3.RP1_NO_ABNRM_RN,0)+NVL(A4.RP1_NO_ABNRM_RN,0)+NVL(A5.RP1_NO_ABNRM_RN,0)+NVL(A6.RP1_NO_ABNRM_RN,0)+NVL(A7.RP1_NO_ABNRM_RN,0)+NVL(A8.RP1_NO_ABNRM_RN,0)+NVL(A9.RP1_NO_ABNRM_RN,0)+NVL(A10.RP1_NO_ABNRM_RN,0)+NVL(A11.RP1_NO_ABNRM_RN,0)+NVL(A12.RP1_NO_ABNRM_RN,0)+NVL(A13.RP1_NO_ABNRM_RN,0)+
           NVL(A1.RP1_NO_ABNRM_TH,0)+NVL(A2.RP1_NO_ABNRM_TH,0)+NVL(A3.RP1_NO_ABNRM_TH,0)+NVL(A4.RP1_NO_ABNRM_TH,0)+NVL(A5.RP1_NO_ABNRM_TH,0)+NVL(A6.RP1_NO_ABNRM_TH,0)+NVL(A7.RP1_NO_ABNRM_TH,0)+NVL(A8.RP1_NO_ABNRM_TH,0)+NVL(A9.RP1_NO_ABNRM_TH,0)+NVL(A10.RP1_NO_ABNRM_TH,0)+NVL(A11.RP1_NO_ABNRM_TH,0)+NVL(A12.RP1_NO_ABNRM_TH,0)+NVL(A13.RP1_NO_ABNRM_TH,0)+
           NVL(A1.RP1_NO_ABNRM_TR,0)+NVL(A2.RP1_NO_ABNRM_TR,0)+NVL(A3.RP1_NO_ABNRM_TR,0)+NVL(A4.RP1_NO_ABNRM_TR,0)+NVL(A5.RP1_NO_ABNRM_TR,0)+NVL(A6.RP1_NO_ABNRM_TR,0)+NVL(A7.RP1_NO_ABNRM_TR,0)+NVL(A8.RP1_NO_ABNRM_TR,0)+NVL(A9.RP1_NO_ABNRM_TR,0)+NVL(A10.RP1_NO_ABNRM_TR,0)+NVL(A11.RP1_NO_ABNRM_TR,0)+NVL(A12.RP1_NO_ABNRM_TR,0)+NVL(A13.RP1_NO_ABNRM_TR,0)+
           NVL(A1.RP1_NO_ABNRM_TW,0)+NVL(A2.RP1_NO_ABNRM_TW,0)+NVL(A3.RP1_NO_ABNRM_TW,0)+NVL(A4.RP1_NO_ABNRM_TW,0)+NVL(A5.RP1_NO_ABNRM_TW,0)+NVL(A6.RP1_NO_ABNRM_TW,0)+NVL(A7.RP1_NO_ABNRM_TW,0)+NVL(A8.RP1_NO_ABNRM_TW,0)+NVL(A9.RP1_NO_ABNRM_TW,0)+NVL(A10.RP1_NO_ABNRM_TW,0)+NVL(A11.RP1_NO_ABNRM_TW,0)+NVL(A12.RP1_NO_ABNRM_TW,0)+NVL(A13.RP1_NO_ABNRM_TW,0)+
           NVL(A1.RP1_NO_ABNRM_CM,0)+NVL(A2.RP1_NO_ABNRM_CM,0)+NVL(A3.RP1_NO_ABNRM_CM,0)+NVL(A4.RP1_NO_ABNRM_CM,0)+NVL(A5.RP1_NO_ABNRM_CM,0)+NVL(A6.RP1_NO_ABNRM_CM,0)+NVL(A7.RP1_NO_ABNRM_CM,0)+NVL(A8.RP1_NO_ABNRM_CM,0)+NVL(A9.RP1_NO_ABNRM_CM,0)+NVL(A10.RP1_NO_ABNRM_CM,0)+NVL(A11.RP1_NO_ABNRM_CM,0)+NVL(A12.RP1_NO_ABNRM_CM,0)+NVL(A13.RP1_NO_ABNRM_CM,0)+
           NVL(A1.RP1_NO_ABNRM_WEAK,0)+NVL(A2.RP1_NO_ABNRM_WEAK,0)+NVL(A3.RP1_NO_ABNRM_WEAK,0)+NVL(A4.RP1_NO_ABNRM_WEAK,0)+NVL(A5.RP1_NO_ABNRM_WEAK,0)+NVL(A6.RP1_NO_ABNRM_WEAK,0)+NVL(A7.RP1_NO_ABNRM_WEAK,0)+NVL(A8.RP1_NO_ABNRM_WEAK,0)+NVL(A9.RP1_NO_ABNRM_WEAK,0)+NVL(A10.RP1_NO_ABNRM_WEAK,0)+NVL(A11.RP1_NO_ABNRM_WEAK,0)+NVL(A12.RP1_NO_ABNRM_WEAK,0)+NVL(A13.RP1_NO_ABNRM_WEAK,0)+
           NVL(A1.RP1_NO_ABNRM_OTHER,0)+NVL(A2.RP1_NO_ABNRM_OTHER,0)+NVL(A3.RP1_NO_ABNRM_OTHER,0)+NVL(A4.RP1_NO_ABNRM_OTHER,0)+NVL(A5.RP1_NO_ABNRM_OTHER,0)+NVL(A6.RP1_NO_ABNRM_OTHER,0)+NVL(A7.RP1_NO_ABNRM_OTHER,0)+NVL(A8.RP1_NO_ABNRM_OTHER,0)+NVL(A9.RP1_NO_ABNRM_OTHER,0)+NVL(A10.RP1_NO_ABNRM_OTHER,0)+NVL(A11.RP1_NO_ABNRM_OTHER,0)+NVL(A12.RP1_NO_ABNRM_OTHER,0)+NVL(A13.RP1_NO_ABNRM_OTHER,0)+
           NVL(A1.RP1_NO_ABNRM_PRGRM,0)+NVL(A2.RP1_NO_ABNRM_PRGRM,0)+NVL(A3.RP1_NO_ABNRM_PRGRM,0)+NVL(A4.RP1_NO_ABNRM_PRGRM,0)+NVL(A5.RP1_NO_ABNRM_PRGRM,0)+NVL(A6.RP1_NO_ABNRM_PRGRM,0)+NVL(A7.RP1_NO_ABNRM_PRGRM,0)+NVL(A8.RP1_NO_ABNRM_PRGRM,0)+NVL(A9.RP1_NO_ABNRM_PRGRM,0)+NVL(A10.RP1_NO_ABNRM_PRGRM,0)+NVL(A11.RP1_NO_ABNRM_PRGRM,0)+NVL(A12.RP1_NO_ABNRM_PRGRM,0)+NVL(A13.RP1_NO_ABNRM_PRGRM,0)) AS rep1_total_abnormals,
       SUM(NVL(A1.RP2_NO_ABNRM_RE,0)+NVL(A2.RP2_NO_ABNRM_RE,0)+NVL(A3.RP2_NO_ABNRM_RE,0)+NVL(A4.RP2_NO_ABNRM_RE,0)+NVL(A5.RP2_NO_ABNRM_RE,0)+NVL(A6.RP2_NO_ABNRM_RE,0)+NVL(A7.RP2_NO_ABNRM_RE,0)+NVL(A8.RP2_NO_ABNRM_RE,0)+NVL(A9.RP2_NO_ABNRM_RE,0)+NVL(A10.RP2_NO_ABNRM_RE,0)+NVL(A11.RP2_NO_ABNRM_RE,0)+NVL(A12.RP2_NO_ABNRM_RE,0)+NVL(A13.RP2_NO_ABNRM_RE,0)+
           NVL(A1.RP2_NO_ABNRM_SR,0)+NVL(A2.RP2_NO_ABNRM_SR,0)+NVL(A3.RP2_NO_ABNRM_SR,0)+NVL(A4.RP2_NO_ABNRM_SR,0)+NVL(A5.RP2_NO_ABNRM_SR,0)+NVL(A6.RP2_NO_ABNRM_SR,0)+NVL(A7.RP2_NO_ABNRM_SR,0)+NVL(A8.RP2_NO_ABNRM_SR,0)+NVL(A9.RP2_NO_ABNRM_SR,0)+NVL(A10.RP2_NO_ABNRM_SR,0)+NVL(A11.RP2_NO_ABNRM_SR,0)+NVL(A12.RP2_NO_ABNRM_SR,0)+NVL(A13.RP2_NO_ABNRM_SR,0)+
           NVL(A1.RP2_NO_ABNRM_SH,0)+NVL(A2.RP2_NO_ABNRM_SH,0)+NVL(A3.RP2_NO_ABNRM_SH,0)+NVL(A4.RP2_NO_ABNRM_SH,0)+NVL(A5.RP2_NO_ABNRM_SH,0)+NVL(A6.RP2_NO_ABNRM_SH,0)+NVL(A7.RP2_NO_ABNRM_SH,0)+NVL(A8.RP2_NO_ABNRM_SH,0)+NVL(A9.RP2_NO_ABNRM_SH,0)+NVL(A10.RP2_NO_ABNRM_SH,0)+NVL(A11.RP2_NO_ABNRM_SH,0)+NVL(A12.RP2_NO_ABNRM_SH,0)+NVL(A13.RP2_NO_ABNRM_SH,0)+
           NVL(A1.RP2_NO_ABNRM_RN,0)+NVL(A2.RP2_NO_ABNRM_RN,0)+NVL(A3.RP2_NO_ABNRM_RN,0)+NVL(A4.RP2_NO_ABNRM_RN,0)+NVL(A5.RP2_NO_ABNRM_RN,0)+NVL(A6.RP2_NO_ABNRM_RN,0)+NVL(A7.RP2_NO_ABNRM_RN,0)+NVL(A8.RP2_NO_ABNRM_RN,0)+NVL(A9.RP2_NO_ABNRM_RN,0)+NVL(A10.RP2_NO_ABNRM_RN,0)+NVL(A11.RP2_NO_ABNRM_RN,0)+NVL(A12.RP2_NO_ABNRM_RN,0)+NVL(A13.RP2_NO_ABNRM_RN,0)+
           NVL(A1.RP2_NO_ABNRM_TH,0)+NVL(A2.RP2_NO_ABNRM_TH,0)+NVL(A3.RP2_NO_ABNRM_TH,0)+NVL(A4.RP2_NO_ABNRM_TH,0)+NVL(A5.RP2_NO_ABNRM_TH,0)+NVL(A6.RP2_NO_ABNRM_TH,0)+NVL(A7.RP2_NO_ABNRM_TH,0)+NVL(A8.RP2_NO_ABNRM_TH,0)+NVL(A9.RP2_NO_ABNRM_TH,0)+NVL(A10.RP2_NO_ABNRM_TH,0)+NVL(A11.RP2_NO_ABNRM_TH,0)+NVL(A12.RP2_NO_ABNRM_TH,0)+NVL(A13.RP2_NO_ABNRM_TH,0)+
           NVL(A1.RP2_NO_ABNRM_TR,0)+NVL(A2.RP2_NO_ABNRM_TR,0)+NVL(A3.RP2_NO_ABNRM_TR,0)+NVL(A4.RP2_NO_ABNRM_TR,0)+NVL(A5.RP2_NO_ABNRM_TR,0)+NVL(A6.RP2_NO_ABNRM_TR,0)+NVL(A7.RP2_NO_ABNRM_TR,0)+NVL(A8.RP2_NO_ABNRM_TR,0)+NVL(A9.RP2_NO_ABNRM_TR,0)+NVL(A10.RP2_NO_ABNRM_TR,0)+NVL(A11.RP2_NO_ABNRM_TR,0)+NVL(A12.RP2_NO_ABNRM_TR,0)+NVL(A13.RP2_NO_ABNRM_TR,0)+
           NVL(A1.RP2_NO_ABNRM_TW,0)+NVL(A2.RP2_NO_ABNRM_TW,0)+NVL(A3.RP2_NO_ABNRM_TW,0)+NVL(A4.RP2_NO_ABNRM_TW,0)+NVL(A5.RP2_NO_ABNRM_TW,0)+NVL(A6.RP2_NO_ABNRM_TW,0)+NVL(A7.RP2_NO_ABNRM_TW,0)+NVL(A8.RP2_NO_ABNRM_TW,0)+NVL(A9.RP2_NO_ABNRM_TW,0)+NVL(A10.RP2_NO_ABNRM_TW,0)+NVL(A11.RP2_NO_ABNRM_TW,0)+NVL(A12.RP2_NO_ABNRM_TW,0)+NVL(A13.RP2_NO_ABNRM_TW,0)+
           NVL(A1.RP2_NO_ABNRM_CM,0)+NVL(A2.RP2_NO_ABNRM_CM,0)+NVL(A3.RP2_NO_ABNRM_CM,0)+NVL(A4.RP2_NO_ABNRM_CM,0)+NVL(A5.RP2_NO_ABNRM_CM,0)+NVL(A6.RP2_NO_ABNRM_CM,0)+NVL(A7.RP2_NO_ABNRM_CM,0)+NVL(A8.RP2_NO_ABNRM_CM,0)+NVL(A9.RP2_NO_ABNRM_CM,0)+NVL(A10.RP2_NO_ABNRM_CM,0)+NVL(A11.RP2_NO_ABNRM_CM,0)+NVL(A12.RP2_NO_ABNRM_CM,0)+NVL(A13.RP2_NO_ABNRM_CM,0)+
           NVL(A1.RP2_NO_ABNRM_WEAK,0)+NVL(A2.RP2_NO_ABNRM_WEAK,0)+NVL(A3.RP2_NO_ABNRM_WEAK,0)+NVL(A4.RP2_NO_ABNRM_WEAK,0)+NVL(A5.RP2_NO_ABNRM_WEAK,0)+NVL(A6.RP2_NO_ABNRM_WEAK,0)+NVL(A7.RP2_NO_ABNRM_WEAK,0)+NVL(A8.RP2_NO_ABNRM_WEAK,0)+NVL(A9.RP2_NO_ABNRM_WEAK,0)+NVL(A10.RP2_NO_ABNRM_WEAK,0)+NVL(A11.RP2_NO_ABNRM_WEAK,0)+NVL(A12.RP2_NO_ABNRM_WEAK,0)+NVL(A13.RP2_NO_ABNRM_WEAK,0)+
           NVL(A1.RP2_NO_ABNRM_OTHER,0)+NVL(A2.RP2_NO_ABNRM_OTHER,0)+NVL(A3.RP2_NO_ABNRM_OTHER,0)+NVL(A4.RP2_NO_ABNRM_OTHER,0)+NVL(A5.RP2_NO_ABNRM_OTHER,0)+NVL(A6.RP2_NO_ABNRM_OTHER,0)+NVL(A7.RP2_NO_ABNRM_OTHER,0)+NVL(A8.RP2_NO_ABNRM_OTHER,0)+NVL(A9.RP2_NO_ABNRM_OTHER,0)+NVL(A10.RP2_NO_ABNRM_OTHER,0)+NVL(A11.RP2_NO_ABNRM_OTHER,0)+NVL(A12.RP2_NO_ABNRM_OTHER,0)+NVL(A13.RP2_NO_ABNRM_OTHER,0)+
           NVL(A1.RP2_NO_ABNRM_PRGRM,0)+NVL(A2.RP2_NO_ABNRM_PRGRM,0)+NVL(A3.RP2_NO_ABNRM_PRGRM,0)+NVL(A4.RP2_NO_ABNRM_PRGRM,0)+NVL(A5.RP2_NO_ABNRM_PRGRM,0)+NVL(A6.RP2_NO_ABNRM_PRGRM,0)+NVL(A7.RP2_NO_ABNRM_PRGRM,0)+NVL(A8.RP2_NO_ABNRM_PRGRM,0)+NVL(A9.RP2_NO_ABNRM_PRGRM,0)+NVL(A10.RP2_NO_ABNRM_PRGRM,0)+NVL(A11.RP2_NO_ABNRM_PRGRM,0)+NVL(A12.RP2_NO_ABNRM_PRGRM,0)+NVL(A13.RP2_NO_ABNRM_PRGRM,0)) AS rep2_total_abnormals,
       SUM(NVL(A1.RP3_NO_ABNRM_RE,0)+NVL(A2.RP3_NO_ABNRM_RE,0)+NVL(A3.RP3_NO_ABNRM_RE,0)+NVL(A4.RP3_NO_ABNRM_RE,0)+NVL(A5.RP3_NO_ABNRM_RE,0)+NVL(A6.RP3_NO_ABNRM_RE,0)+NVL(A7.RP3_NO_ABNRM_RE,0)+NVL(A8.RP3_NO_ABNRM_RE,0)+NVL(A9.RP3_NO_ABNRM_RE,0)+NVL(A10.RP3_NO_ABNRM_RE,0)+NVL(A11.RP3_NO_ABNRM_RE,0)+NVL(A12.RP3_NO_ABNRM_RE,0)+NVL(A13.RP3_NO_ABNRM_RE,0)+
           NVL(A1.RP3_NO_ABNRM_SR,0)+NVL(A2.RP3_NO_ABNRM_SR,0)+NVL(A3.RP3_NO_ABNRM_SR,0)+NVL(A4.RP3_NO_ABNRM_SR,0)+NVL(A5.RP3_NO_ABNRM_SR,0)+NVL(A6.RP3_NO_ABNRM_SR,0)+NVL(A7.RP3_NO_ABNRM_SR,0)+NVL(A8.RP3_NO_ABNRM_SR,0)+NVL(A9.RP3_NO_ABNRM_SR,0)+NVL(A10.RP3_NO_ABNRM_SR,0)+NVL(A11.RP3_NO_ABNRM_SR,0)+NVL(A12.RP3_NO_ABNRM_SR,0)+NVL(A13.RP3_NO_ABNRM_SR,0)+
           NVL(A1.RP3_NO_ABNRM_SH,0)+NVL(A2.RP3_NO_ABNRM_SH,0)+NVL(A3.RP3_NO_ABNRM_SH,0)+NVL(A4.RP3_NO_ABNRM_SH,0)+NVL(A5.RP3_NO_ABNRM_SH,0)+NVL(A6.RP3_NO_ABNRM_SH,0)+NVL(A7.RP3_NO_ABNRM_SH,0)+NVL(A8.RP3_NO_ABNRM_SH,0)+NVL(A9.RP3_NO_ABNRM_SH,0)+NVL(A10.RP3_NO_ABNRM_SH,0)+NVL(A11.RP3_NO_ABNRM_SH,0)+NVL(A12.RP3_NO_ABNRM_SH,0)+NVL(A13.RP3_NO_ABNRM_SH,0)+
           NVL(A1.RP3_NO_ABNRM_RN,0)+NVL(A2.RP3_NO_ABNRM_RN,0)+NVL(A3.RP3_NO_ABNRM_RN,0)+NVL(A4.RP3_NO_ABNRM_RN,0)+NVL(A5.RP3_NO_ABNRM_RN,0)+NVL(A6.RP3_NO_ABNRM_RN,0)+NVL(A7.RP3_NO_ABNRM_RN,0)+NVL(A8.RP3_NO_ABNRM_RN,0)+NVL(A9.RP3_NO_ABNRM_RN,0)+NVL(A10.RP3_NO_ABNRM_RN,0)+NVL(A11.RP3_NO_ABNRM_RN,0)+NVL(A12.RP3_NO_ABNRM_RN,0)+NVL(A13.RP3_NO_ABNRM_RN,0)+
           NVL(A1.RP3_NO_ABNRM_TH,0)+NVL(A2.RP3_NO_ABNRM_TH,0)+NVL(A3.RP3_NO_ABNRM_TH,0)+NVL(A4.RP3_NO_ABNRM_TH,0)+NVL(A5.RP3_NO_ABNRM_TH,0)+NVL(A6.RP3_NO_ABNRM_TH,0)+NVL(A7.RP3_NO_ABNRM_TH,0)+NVL(A8.RP3_NO_ABNRM_TH,0)+NVL(A9.RP3_NO_ABNRM_TH,0)+NVL(A10.RP3_NO_ABNRM_TH,0)+NVL(A11.RP3_NO_ABNRM_TH,0)+NVL(A12.RP3_NO_ABNRM_TH,0)+NVL(A13.RP3_NO_ABNRM_TH,0)+
           NVL(A1.RP3_NO_ABNRM_TR,0)+NVL(A2.RP3_NO_ABNRM_TR,0)+NVL(A3.RP3_NO_ABNRM_TR,0)+NVL(A4.RP3_NO_ABNRM_TR,0)+NVL(A5.RP3_NO_ABNRM_TR,0)+NVL(A6.RP3_NO_ABNRM_TR,0)+NVL(A7.RP3_NO_ABNRM_TR,0)+NVL(A8.RP3_NO_ABNRM_TR,0)+NVL(A9.RP3_NO_ABNRM_TR,0)+NVL(A10.RP3_NO_ABNRM_TR,0)+NVL(A11.RP3_NO_ABNRM_TR,0)+NVL(A12.RP3_NO_ABNRM_TR,0)+NVL(A13.RP3_NO_ABNRM_TR,0)+
           NVL(A1.RP3_NO_ABNRM_TW,0)+NVL(A2.RP3_NO_ABNRM_TW,0)+NVL(A3.RP3_NO_ABNRM_TW,0)+NVL(A4.RP3_NO_ABNRM_TW,0)+NVL(A5.RP3_NO_ABNRM_TW,0)+NVL(A6.RP3_NO_ABNRM_TW,0)+NVL(A7.RP3_NO_ABNRM_TW,0)+NVL(A8.RP3_NO_ABNRM_TW,0)+NVL(A9.RP3_NO_ABNRM_TW,0)+NVL(A10.RP3_NO_ABNRM_TW,0)+NVL(A11.RP3_NO_ABNRM_TW,0)+NVL(A12.RP3_NO_ABNRM_TW,0)+NVL(A13.RP3_NO_ABNRM_TW,0)+
           NVL(A1.RP3_NO_ABNRM_CM,0)+NVL(A2.RP3_NO_ABNRM_CM,0)+NVL(A3.RP3_NO_ABNRM_CM,0)+NVL(A4.RP3_NO_ABNRM_CM,0)+NVL(A5.RP3_NO_ABNRM_CM,0)+NVL(A6.RP3_NO_ABNRM_CM,0)+NVL(A7.RP3_NO_ABNRM_CM,0)+NVL(A8.RP3_NO_ABNRM_CM,0)+NVL(A9.RP3_NO_ABNRM_CM,0)+NVL(A10.RP3_NO_ABNRM_CM,0)+NVL(A11.RP3_NO_ABNRM_CM,0)+NVL(A12.RP3_NO_ABNRM_CM,0)+NVL(A13.RP3_NO_ABNRM_CM,0)+
           NVL(A1.RP3_NO_ABNRM_WEAK,0)+NVL(A2.RP3_NO_ABNRM_WEAK,0)+NVL(A3.RP3_NO_ABNRM_WEAK,0)+NVL(A4.RP3_NO_ABNRM_WEAK,0)+NVL(A5.RP3_NO_ABNRM_WEAK,0)+NVL(A6.RP3_NO_ABNRM_WEAK,0)+NVL(A7.RP3_NO_ABNRM_WEAK,0)+NVL(A8.RP3_NO_ABNRM_WEAK,0)+NVL(A9.RP3_NO_ABNRM_WEAK,0)+NVL(A10.RP3_NO_ABNRM_WEAK,0)+NVL(A11.RP3_NO_ABNRM_WEAK,0)+NVL(A12.RP3_NO_ABNRM_WEAK,0)+NVL(A13.RP3_NO_ABNRM_WEAK,0)+
           NVL(A1.RP3_NO_ABNRM_OTHER,0)+NVL(A2.RP3_NO_ABNRM_OTHER,0)+NVL(A3.RP3_NO_ABNRM_OTHER,0)+NVL(A4.RP3_NO_ABNRM_OTHER,0)+NVL(A5.RP3_NO_ABNRM_OTHER,0)+NVL(A6.RP3_NO_ABNRM_OTHER,0)+NVL(A7.RP3_NO_ABNRM_OTHER,0)+NVL(A8.RP3_NO_ABNRM_OTHER,0)+NVL(A9.RP3_NO_ABNRM_OTHER,0)+NVL(A10.RP3_NO_ABNRM_OTHER,0)+NVL(A11.RP3_NO_ABNRM_OTHER,0)+NVL(A12.RP3_NO_ABNRM_OTHER,0)+NVL(A13.RP3_NO_ABNRM_OTHER,0)+
           NVL(A1.RP3_NO_ABNRM_PRGRM,0)+NVL(A2.RP3_NO_ABNRM_PRGRM,0)+NVL(A3.RP3_NO_ABNRM_PRGRM,0)+NVL(A4.RP3_NO_ABNRM_PRGRM,0)+NVL(A5.RP3_NO_ABNRM_PRGRM,0)+NVL(A6.RP3_NO_ABNRM_PRGRM,0)+NVL(A7.RP3_NO_ABNRM_PRGRM,0)+NVL(A8.RP3_NO_ABNRM_PRGRM,0)+NVL(A9.RP3_NO_ABNRM_PRGRM,0)+NVL(A10.RP3_NO_ABNRM_PRGRM,0)+NVL(A11.RP3_NO_ABNRM_PRGRM,0)+NVL(A12.RP3_NO_ABNRM_PRGRM,0)+NVL(A13.RP3_NO_ABNRM_PRGRM,0)) AS rep3_total_abnormals,
       SUM(NVL(A1.RP4_NO_ABNRM_RE,0)+NVL(A2.RP4_NO_ABNRM_RE,0)+NVL(A3.RP4_NO_ABNRM_RE,0)+NVL(A4.RP4_NO_ABNRM_RE,0)+NVL(A5.RP4_NO_ABNRM_RE,0)+NVL(A6.RP4_NO_ABNRM_RE,0)+NVL(A7.RP4_NO_ABNRM_RE,0)+NVL(A8.RP4_NO_ABNRM_RE,0)+NVL(A9.RP4_NO_ABNRM_RE,0)+NVL(A10.RP4_NO_ABNRM_RE,0)+NVL(A11.RP4_NO_ABNRM_RE,0)+NVL(A12.RP4_NO_ABNRM_RE,0)+NVL(A13.RP4_NO_ABNRM_RE,0)+
           NVL(A1.RP4_NO_ABNRM_SR,0)+NVL(A2.RP4_NO_ABNRM_SR,0)+NVL(A3.RP4_NO_ABNRM_SR,0)+NVL(A4.RP4_NO_ABNRM_SR,0)+NVL(A5.RP4_NO_ABNRM_SR,0)+NVL(A6.RP4_NO_ABNRM_SR,0)+NVL(A7.RP4_NO_ABNRM_SR,0)+NVL(A8.RP4_NO_ABNRM_SR,0)+NVL(A9.RP4_NO_ABNRM_SR,0)+NVL(A10.RP4_NO_ABNRM_SR,0)+NVL(A11.RP4_NO_ABNRM_SR,0)+NVL(A12.RP4_NO_ABNRM_SR,0)+NVL(A13.RP4_NO_ABNRM_SR,0)+
           NVL(A1.RP4_NO_ABNRM_SH,0)+NVL(A2.RP4_NO_ABNRM_SH,0)+NVL(A3.RP4_NO_ABNRM_SH,0)+NVL(A4.RP4_NO_ABNRM_SH,0)+NVL(A5.RP4_NO_ABNRM_SH,0)+NVL(A6.RP4_NO_ABNRM_SH,0)+NVL(A7.RP4_NO_ABNRM_SH,0)+NVL(A8.RP4_NO_ABNRM_SH,0)+NVL(A9.RP4_NO_ABNRM_SH,0)+NVL(A10.RP4_NO_ABNRM_SH,0)+NVL(A11.RP4_NO_ABNRM_SH,0)+NVL(A12.RP4_NO_ABNRM_SH,0)+NVL(A13.RP4_NO_ABNRM_SH,0)+
           NVL(A1.RP4_NO_ABNRM_RN,0)+NVL(A2.RP4_NO_ABNRM_RN,0)+NVL(A3.RP4_NO_ABNRM_RN,0)+NVL(A4.RP4_NO_ABNRM_RN,0)+NVL(A5.RP4_NO_ABNRM_RN,0)+NVL(A6.RP4_NO_ABNRM_RN,0)+NVL(A7.RP4_NO_ABNRM_RN,0)+NVL(A8.RP4_NO_ABNRM_RN,0)+NVL(A9.RP4_NO_ABNRM_RN,0)+NVL(A10.RP4_NO_ABNRM_RN,0)+NVL(A11.RP4_NO_ABNRM_RN,0)+NVL(A12.RP4_NO_ABNRM_RN,0)+NVL(A13.RP4_NO_ABNRM_RN,0)+
           NVL(A1.RP4_NO_ABNRM_TH,0)+NVL(A2.RP4_NO_ABNRM_TH,0)+NVL(A3.RP4_NO_ABNRM_TH,0)+NVL(A4.RP4_NO_ABNRM_TH,0)+NVL(A5.RP4_NO_ABNRM_TH,0)+NVL(A6.RP4_NO_ABNRM_TH,0)+NVL(A7.RP4_NO_ABNRM_TH,0)+NVL(A8.RP4_NO_ABNRM_TH,0)+NVL(A9.RP4_NO_ABNRM_TH,0)+NVL(A10.RP4_NO_ABNRM_TH,0)+NVL(A11.RP4_NO_ABNRM_TH,0)+NVL(A12.RP4_NO_ABNRM_TH,0)+NVL(A13.RP4_NO_ABNRM_TH,0)+
           NVL(A1.RP4_NO_ABNRM_TR,0)+NVL(A2.RP4_NO_ABNRM_TR,0)+NVL(A3.RP4_NO_ABNRM_TR,0)+NVL(A4.RP4_NO_ABNRM_TR,0)+NVL(A5.RP4_NO_ABNRM_TR,0)+NVL(A6.RP4_NO_ABNRM_TR,0)+NVL(A7.RP4_NO_ABNRM_TR,0)+NVL(A8.RP4_NO_ABNRM_TR,0)+NVL(A9.RP4_NO_ABNRM_TR,0)+NVL(A10.RP4_NO_ABNRM_TR,0)+NVL(A11.RP4_NO_ABNRM_TR,0)+NVL(A12.RP4_NO_ABNRM_TR,0)+NVL(A13.RP4_NO_ABNRM_TR,0)+
           NVL(A1.RP4_NO_ABNRM_TW,0)+NVL(A2.RP4_NO_ABNRM_TW,0)+NVL(A3.RP4_NO_ABNRM_TW,0)+NVL(A4.RP4_NO_ABNRM_TW,0)+NVL(A5.RP4_NO_ABNRM_TW,0)+NVL(A6.RP4_NO_ABNRM_TW,0)+NVL(A7.RP4_NO_ABNRM_TW,0)+NVL(A8.RP4_NO_ABNRM_TW,0)+NVL(A9.RP4_NO_ABNRM_TW,0)+NVL(A10.RP4_NO_ABNRM_TW,0)+NVL(A11.RP4_NO_ABNRM_TW,0)+NVL(A12.RP4_NO_ABNRM_TW,0)+NVL(A13.RP4_NO_ABNRM_TW,0)+
           NVL(A1.RP4_NO_ABNRM_CM,0)+NVL(A2.RP4_NO_ABNRM_CM,0)+NVL(A3.RP4_NO_ABNRM_CM,0)+NVL(A4.RP4_NO_ABNRM_CM,0)+NVL(A5.RP4_NO_ABNRM_CM,0)+NVL(A6.RP4_NO_ABNRM_CM,0)+NVL(A7.RP4_NO_ABNRM_CM,0)+NVL(A8.RP4_NO_ABNRM_CM,0)+NVL(A9.RP4_NO_ABNRM_CM,0)+NVL(A10.RP4_NO_ABNRM_CM,0)+NVL(A11.RP4_NO_ABNRM_CM,0)+NVL(A12.RP4_NO_ABNRM_CM,0)+NVL(A13.RP4_NO_ABNRM_CM,0)+
           NVL(A1.RP4_NO_ABNRM_WEAK,0)+NVL(A2.RP4_NO_ABNRM_WEAK,0)+NVL(A3.RP4_NO_ABNRM_WEAK,0)+NVL(A4.RP4_NO_ABNRM_WEAK,0)+NVL(A5.RP4_NO_ABNRM_WEAK,0)+NVL(A6.RP4_NO_ABNRM_WEAK,0)+NVL(A7.RP4_NO_ABNRM_WEAK,0)+NVL(A8.RP4_NO_ABNRM_WEAK,0)+NVL(A9.RP4_NO_ABNRM_WEAK,0)+NVL(A10.RP4_NO_ABNRM_WEAK,0)+NVL(A11.RP4_NO_ABNRM_WEAK,0)+NVL(A12.RP4_NO_ABNRM_WEAK,0)+NVL(A13.RP4_NO_ABNRM_WEAK,0)+
           NVL(A1.RP4_NO_ABNRM_OTHER,0)+NVL(A2.RP4_NO_ABNRM_OTHER,0)+NVL(A3.RP4_NO_ABNRM_OTHER,0)+NVL(A4.RP4_NO_ABNRM_OTHER,0)+NVL(A5.RP4_NO_ABNRM_OTHER,0)+NVL(A6.RP4_NO_ABNRM_OTHER,0)+NVL(A7.RP4_NO_ABNRM_OTHER,0)+NVL(A8.RP4_NO_ABNRM_OTHER,0)+NVL(A9.RP4_NO_ABNRM_OTHER,0)+NVL(A10.RP4_NO_ABNRM_OTHER,0)+NVL(A11.RP4_NO_ABNRM_OTHER,0)+NVL(A12.RP4_NO_ABNRM_OTHER,0)+NVL(A13.RP4_NO_ABNRM_OTHER,0)+
           NVL(A1.RP4_NO_ABNRM_PRGRM,0)+NVL(A2.RP4_NO_ABNRM_PRGRM,0)+NVL(A3.RP4_NO_ABNRM_PRGRM,0)+NVL(A4.RP4_NO_ABNRM_PRGRM,0)+NVL(A5.RP4_NO_ABNRM_PRGRM,0)+NVL(A6.RP4_NO_ABNRM_PRGRM,0)+NVL(A7.RP4_NO_ABNRM_PRGRM,0)+NVL(A8.RP4_NO_ABNRM_PRGRM,0)+NVL(A9.RP4_NO_ABNRM_PRGRM,0)+NVL(A10.RP4_NO_ABNRM_PRGRM,0)+NVL(A11.RP4_NO_ABNRM_PRGRM,0)+NVL(A12.RP4_NO_ABNRM_PRGRM,0)+NVL(A13.RP4_NO_ABNRM_PRGRM,0)) AS rep4_total_abnormals
  FROM cns_t_germ_count G,
       cns_t_daily_abnormal A1,
       cns_t_daily_abnormal A2,
       cns_t_daily_abnormal A3,
       cns_t_daily_abnormal A4,
       cns_t_daily_abnormal A5,
       cns_t_daily_abnormal A6,
       cns_t_daily_abnormal A7,
       cns_t_daily_abnormal A8,
       cns_t_daily_abnormal A9,
       cns_t_daily_abnormal A10,
       cns_t_daily_abnormal A11,
       cns_t_daily_abnormal A12,
       cns_t_daily_abnormal A13
 WHERE G.DAILY_GERM_SKEY1 = A1.DAILY_GERM_SKEY(+)
   AND G.DAILY_GERM_SKEY2 = A2.DAILY_GERM_SKEY(+)
   AND G.DAILY_GERM_SKEY3 = A3.DAILY_GERM_SKEY(+)
   AND G.DAILY_GERM_SKEY4 = A4.DAILY_GERM_SKEY(+)
   AND G.DAILY_GERM_SKEY5 = A5.DAILY_GERM_SKEY(+)
   AND G.DAILY_GERM_SKEY6 = A6.DAILY_GERM_SKEY(+)
   AND G.DAILY_GERM_SKEY7 = A7.DAILY_GERM_SKEY(+)
   AND G.DAILY_GERM_SKEY8 = A8.DAILY_GERM_SKEY(+)
   AND G.DAILY_GERM_SKEY9 = A9.DAILY_GERM_SKEY(+)
   AND G.DAILY_GERM_SKEY10 = A10.DAILY_GERM_SKEY(+)
   AND G.DAILY_GERM_SKEY11 = A11.DAILY_GERM_SKEY(+)
   AND G.DAILY_GERM_SKEY12 = A12.DAILY_GERM_SKEY(+)
   AND G.DAILY_GERM_SKEY13 = A13.DAILY_GERM_SKEY(+)
GROUP BY ria_skey;


-- CONSEP.CNSL25_DAILY_ABNORMAL_SUMMARY_TOTALS source

CREATE OR REPLACE VIEW CONSEP.CNSL25_DAILY_ABNORMAL_SUMMARY_TOTALS
(RIA_SKEY,ABNORMAL_TOTAL,TOTAL_SEEDS,ABNORMAL_PCT)
AS
Select DAS.ria_skey,
sum( REP1_TOTAL_ABNORMALS+ REP2_TOTAL_ABNORMALS+ REP3_TOTAL_ABNORMALS+ REP2_TOTAL_ABNORMALS),
sum(GTS.TOTAL_NO_SEEDS),

round(sum( REP1_TOTAL_ABNORMALS+ REP2_TOTAL_ABNORMALS+ REP3_TOTAL_ABNORMALS+ REP2_TOTAL_ABNORMALS)/ sum(GTS.TOTAL_NO_SEEDS) * 100,2)
from CNSL25_DAILY_ABNORMAL_SUM DAS,
GERM_TEST_SEED_TOTALS GTS
where
DAS.ria_skey = GTS.ria_skey
group by DAS.ria_skey;


-- CONSEP.CNSL25_DAILY_ABNORMAL_TOTALS source

CREATE OR REPLACE VIEW CONSEP.CNSL25_DAILY_ABNORMAL_TOTALS
(RIA_SKEY,SUMOFRP1_NO_ABNRM_RE,SUMOFRP1_NO_ABNRM_SR,SUMOFRP1_NO_ABNRM_SH,SUMOFRP1_NO_ABNRM_RN,SUMOFRP1_NO_ABNRM_TH,SUMOFRP1_NO_ABNRM_TR,SUMOFRP1_NO_ABNRM_TW,SUMOFRP1_NO_ABNRM_CM,SUMOFRP1_NO_ABNRM_WEAK,SUMOFRP1_NO_ABNRM_OTHER,SUMOFRP1_NO_ABNRM_PRGRM,SUMOFRP2_NO_ABNRM_RE,SUMOFRP2_NO_ABNRM_SR,SUMOFRP2_NO_ABNRM_SH,SUMOFRP2_NO_ABNRM_RN,SUMOFRP2_NO_ABNRM_TH,SUMOFRP2_NO_ABNRM_TR,SUMOFRP2_NO_ABNRM_TW,SUMOFRP2_NO_ABNRM_CM,SUMOFRP2_NO_ABNRM_WEAK,SUMOFRP2_NO_ABNRM_OTHER,SUMOFRP2_NO_ABNRM_PRGRM,SUMOFRP3_NO_ABNRM_RE,SUMOFRP3_NO_ABNRM_SR,SUMOFRP3_NO_ABNRM_SH,SUMOFRP3_NO_ABNRM_RN,SUMOFRP3_NO_ABNRM_TH,SUMOFRP3_NO_ABNRM_TR,SUMOFRP3_NO_ABNRM_TW,SUMOFRP3_NO_ABNRM_CM,SUMOFRP3_NO_ABNRM_WEAK,SUMOFRP3_NO_ABNRM_OTHER,SUMOFRP3_NO_ABNRM_PRGRM,SUMOFRP4_NO_ABNRM_RE,SUMOFRP4_NO_ABNRM_SR,SUMOFRP4_NO_ABNRM_SH,SUMOFRP4_NO_ABNRM_RN,SUMOFRP4_NO_ABNRM_TH,SUMOFRP4_NO_ABNRM_TR,SUMOFRP4_NO_ABNRM_TW,SUMOFRP4_NO_ABNRM_CM,SUMOFRP4_NO_ABNRM_WEAK,SUMOFRP4_NO_ABNRM_OTHER,SUMOFRP4_NO_ABNRM_PRGRM)
AS
SELECT G.RIA_SKEY,
       SUM(NVL(A1.RP1_NO_ABNRM_RE,0)+NVL(A2.RP1_NO_ABNRM_RE,0)+NVL(A3.RP1_NO_ABNRM_RE,0)+NVL(A4.RP1_NO_ABNRM_RE,0)+NVL(A5.RP1_NO_ABNRM_RE,0)+NVL(A6.RP1_NO_ABNRM_RE,0)+NVL(A7.RP1_NO_ABNRM_RE,0)+NVL(A8.RP1_NO_ABNRM_RE,0)+NVL(A9.RP1_NO_ABNRM_RE,0)+NVL(A10.RP1_NO_ABNRM_RE,0)+NVL(A11.RP1_NO_ABNRM_RE,0)+NVL(A12.RP1_NO_ABNRM_RE,0)+NVL(A13.RP1_NO_ABNRM_RE,0)) SUMOFRP1_NO_ABNRM_RE,
       SUM(NVL(A1.RP1_NO_ABNRM_SR,0)+NVL(A2.RP1_NO_ABNRM_SR,0)+NVL(A3.RP1_NO_ABNRM_SR,0)+NVL(A4.RP1_NO_ABNRM_SR,0)+NVL(A5.RP1_NO_ABNRM_SR,0)+NVL(A6.RP1_NO_ABNRM_SR,0)+NVL(A7.RP1_NO_ABNRM_SR,0)+NVL(A8.RP1_NO_ABNRM_SR,0)+NVL(A9.RP1_NO_ABNRM_SR,0)+NVL(A10.RP1_NO_ABNRM_SR,0)+NVL(A11.RP1_NO_ABNRM_SR,0)+NVL(A12.RP1_NO_ABNRM_SR,0)+NVL(A13.RP1_NO_ABNRM_SR,0)) SUMOFRP1_NO_ABNRM_SR,
       SUM(NVL(A1.RP1_NO_ABNRM_SH,0)+NVL(A2.RP1_NO_ABNRM_SH,0)+NVL(A3.RP1_NO_ABNRM_SH,0)+NVL(A4.RP1_NO_ABNRM_SH,0)+NVL(A5.RP1_NO_ABNRM_SH,0)+NVL(A6.RP1_NO_ABNRM_SH,0)+NVL(A7.RP1_NO_ABNRM_SH,0)+NVL(A8.RP1_NO_ABNRM_SH,0)+NVL(A9.RP1_NO_ABNRM_SH,0)+NVL(A10.RP1_NO_ABNRM_SH,0)+NVL(A11.RP1_NO_ABNRM_SH,0)+NVL(A12.RP1_NO_ABNRM_SH,0)+NVL(A13.RP1_NO_ABNRM_SH,0)) SUMOFRP1_NO_ABNRM_SH,
       SUM(NVL(A1.RP1_NO_ABNRM_RN,0)+NVL(A2.RP1_NO_ABNRM_RN,0)+NVL(A3.RP1_NO_ABNRM_RN,0)+NVL(A4.RP1_NO_ABNRM_RN,0)+NVL(A5.RP1_NO_ABNRM_RN,0)+NVL(A6.RP1_NO_ABNRM_RN,0)+NVL(A7.RP1_NO_ABNRM_RN,0)+NVL(A8.RP1_NO_ABNRM_RN,0)+NVL(A9.RP1_NO_ABNRM_RN,0)+NVL(A10.RP1_NO_ABNRM_RN,0)+NVL(A11.RP1_NO_ABNRM_RN,0)+NVL(A12.RP1_NO_ABNRM_RN,0)+NVL(A13.RP1_NO_ABNRM_RN,0)) SUMOFRP1_NO_ABNRM_RN,
       SUM(NVL(A1.RP1_NO_ABNRM_TH,0)+NVL(A2.RP1_NO_ABNRM_TH,0)+NVL(A3.RP1_NO_ABNRM_TH,0)+NVL(A4.RP1_NO_ABNRM_TH,0)+NVL(A5.RP1_NO_ABNRM_TH,0)+NVL(A6.RP1_NO_ABNRM_TH,0)+NVL(A7.RP1_NO_ABNRM_TH,0)+NVL(A8.RP1_NO_ABNRM_TH,0)+NVL(A9.RP1_NO_ABNRM_TH,0)+NVL(A10.RP1_NO_ABNRM_TH,0)+NVL(A11.RP1_NO_ABNRM_TH,0)+NVL(A12.RP1_NO_ABNRM_TH,0)+NVL(A13.RP1_NO_ABNRM_TH,0)) SUMOFRP1_NO_ABNRM_TH,
       SUM(NVL(A1.RP1_NO_ABNRM_TR,0)+NVL(A2.RP1_NO_ABNRM_TR,0)+NVL(A3.RP1_NO_ABNRM_TR,0)+NVL(A4.RP1_NO_ABNRM_TR,0)+NVL(A5.RP1_NO_ABNRM_TR,0)+NVL(A6.RP1_NO_ABNRM_TR,0)+NVL(A7.RP1_NO_ABNRM_TR,0)+NVL(A8.RP1_NO_ABNRM_TR,0)+NVL(A9.RP1_NO_ABNRM_TR,0)+NVL(A10.RP1_NO_ABNRM_TR,0)+NVL(A11.RP1_NO_ABNRM_TR,0)+NVL(A12.RP1_NO_ABNRM_TR,0)+NVL(A13.RP1_NO_ABNRM_TR,0)) SUMOFRP1_NO_ABNRM_TR,
       SUM(NVL(A1.RP1_NO_ABNRM_TW,0)+NVL(A2.RP1_NO_ABNRM_TW,0)+NVL(A3.RP1_NO_ABNRM_TW,0)+NVL(A4.RP1_NO_ABNRM_TW,0)+NVL(A5.RP1_NO_ABNRM_TW,0)+NVL(A6.RP1_NO_ABNRM_TW,0)+NVL(A7.RP1_NO_ABNRM_TW,0)+NVL(A8.RP1_NO_ABNRM_TW,0)+NVL(A9.RP1_NO_ABNRM_TW,0)+NVL(A10.RP1_NO_ABNRM_TW,0)+NVL(A11.RP1_NO_ABNRM_TW,0)+NVL(A12.RP1_NO_ABNRM_TW,0)+NVL(A13.RP1_NO_ABNRM_TW,0)) SUMOFRP1_NO_ABNRM_TW,
       SUM(NVL(A1.RP1_NO_ABNRM_CM,0)+NVL(A2.RP1_NO_ABNRM_CM,0)+NVL(A3.RP1_NO_ABNRM_CM,0)+NVL(A4.RP1_NO_ABNRM_CM,0)+NVL(A5.RP1_NO_ABNRM_CM,0)+NVL(A6.RP1_NO_ABNRM_CM,0)+NVL(A7.RP1_NO_ABNRM_CM,0)+NVL(A8.RP1_NO_ABNRM_CM,0)+NVL(A9.RP1_NO_ABNRM_CM,0)+NVL(A10.RP1_NO_ABNRM_CM,0)+NVL(A11.RP1_NO_ABNRM_CM,0)+NVL(A12.RP1_NO_ABNRM_CM,0)+NVL(A13.RP1_NO_ABNRM_CM,0)) SUMOFRP1_NO_ABNRM_CM,
       SUM(NVL(A1.RP1_NO_ABNRM_WEAK,0)+NVL(A2.RP1_NO_ABNRM_WEAK,0)+NVL(A3.RP1_NO_ABNRM_WEAK,0)+NVL(A4.RP1_NO_ABNRM_WEAK,0)+NVL(A5.RP1_NO_ABNRM_WEAK,0)+NVL(A6.RP1_NO_ABNRM_WEAK,0)+NVL(A7.RP1_NO_ABNRM_WEAK,0)+NVL(A8.RP1_NO_ABNRM_WEAK,0)+NVL(A9.RP1_NO_ABNRM_WEAK,0)+NVL(A10.RP1_NO_ABNRM_WEAK,0)+NVL(A11.RP1_NO_ABNRM_WEAK,0)+NVL(A12.RP1_NO_ABNRM_WEAK,0)+NVL(A13.RP1_NO_ABNRM_WEAK,0)) SUMOFRP1_NO_ABNRM_WEAK,
       SUM(NVL(A1.RP1_NO_ABNRM_OTHER,0)+NVL(A2.RP1_NO_ABNRM_OTHER,0)+NVL(A3.RP1_NO_ABNRM_OTHER,0)+NVL(A4.RP1_NO_ABNRM_OTHER,0)+NVL(A5.RP1_NO_ABNRM_OTHER,0)+NVL(A6.RP1_NO_ABNRM_OTHER,0)+NVL(A7.RP1_NO_ABNRM_OTHER,0)+NVL(A8.RP1_NO_ABNRM_OTHER,0)+NVL(A9.RP1_NO_ABNRM_OTHER,0)+NVL(A10.RP1_NO_ABNRM_OTHER,0)+NVL(A11.RP1_NO_ABNRM_OTHER,0)+NVL(A12.RP1_NO_ABNRM_OTHER,0)+NVL(A13.RP1_NO_ABNRM_OTHER,0)) SUMOFRP1_NO_ABNRM_OTHER,
       SUM(NVL(A1.RP1_NO_ABNRM_PRGRM,0)+NVL(A2.RP1_NO_ABNRM_PRGRM,0)+NVL(A3.RP1_NO_ABNRM_PRGRM,0)+NVL(A4.RP1_NO_ABNRM_PRGRM,0)+NVL(A5.RP1_NO_ABNRM_PRGRM,0)+NVL(A6.RP1_NO_ABNRM_PRGRM,0)+NVL(A7.RP1_NO_ABNRM_PRGRM,0)+NVL(A8.RP1_NO_ABNRM_PRGRM,0)+NVL(A9.RP1_NO_ABNRM_PRGRM,0)+NVL(A10.RP1_NO_ABNRM_PRGRM,0)+NVL(A11.RP1_NO_ABNRM_PRGRM,0)+NVL(A12.RP1_NO_ABNRM_PRGRM,0)+NVL(A13.RP1_NO_ABNRM_PRGRM,0)) SUMOFRP1_NO_ABNRM_PRGRM,
       SUM(NVL(A1.RP2_NO_ABNRM_RE,0)+NVL(A2.RP2_NO_ABNRM_RE,0)+NVL(A3.RP2_NO_ABNRM_RE,0)+NVL(A4.RP2_NO_ABNRM_RE,0)+NVL(A5.RP2_NO_ABNRM_RE,0)+NVL(A6.RP2_NO_ABNRM_RE,0)+NVL(A7.RP2_NO_ABNRM_RE,0)+NVL(A8.RP2_NO_ABNRM_RE,0)+NVL(A9.RP2_NO_ABNRM_RE,0)+NVL(A10.RP2_NO_ABNRM_RE,0)+NVL(A11.RP2_NO_ABNRM_RE,0)+NVL(A12.RP2_NO_ABNRM_RE,0)+NVL(A13.RP2_NO_ABNRM_RE,0)) SUMOFRP2_NO_ABNRM_RE,
       SUM(NVL(A1.RP2_NO_ABNRM_SR,0)+NVL(A2.RP2_NO_ABNRM_SR,0)+NVL(A3.RP2_NO_ABNRM_SR,0)+NVL(A4.RP2_NO_ABNRM_SR,0)+NVL(A5.RP2_NO_ABNRM_SR,0)+NVL(A6.RP2_NO_ABNRM_SR,0)+NVL(A7.RP2_NO_ABNRM_SR,0)+NVL(A8.RP2_NO_ABNRM_SR,0)+NVL(A9.RP2_NO_ABNRM_SR,0)+NVL(A10.RP2_NO_ABNRM_SR,0)+NVL(A11.RP2_NO_ABNRM_SR,0)+NVL(A12.RP2_NO_ABNRM_SR,0)+NVL(A13.RP2_NO_ABNRM_SR,0)) SUMOFRP2_NO_ABNRM_SR,
       SUM(NVL(A1.RP2_NO_ABNRM_SH,0)+NVL(A2.RP2_NO_ABNRM_SH,0)+NVL(A3.RP2_NO_ABNRM_SH,0)+NVL(A4.RP2_NO_ABNRM_SH,0)+NVL(A5.RP2_NO_ABNRM_SH,0)+NVL(A6.RP2_NO_ABNRM_SH,0)+NVL(A7.RP2_NO_ABNRM_SH,0)+NVL(A8.RP2_NO_ABNRM_SH,0)+NVL(A9.RP2_NO_ABNRM_SH,0)+NVL(A10.RP2_NO_ABNRM_SH,0)+NVL(A11.RP2_NO_ABNRM_SH,0)+NVL(A12.RP2_NO_ABNRM_SH,0)+NVL(A13.RP2_NO_ABNRM_SH,0)) SUMOFRP2_NO_ABNRM_SH,
       SUM(NVL(A1.RP2_NO_ABNRM_RN,0)+NVL(A2.RP2_NO_ABNRM_RN,0)+NVL(A3.RP2_NO_ABNRM_RN,0)+NVL(A4.RP2_NO_ABNRM_RN,0)+NVL(A5.RP2_NO_ABNRM_RN,0)+NVL(A6.RP2_NO_ABNRM_RN,0)+NVL(A7.RP2_NO_ABNRM_RN,0)+NVL(A8.RP2_NO_ABNRM_RN,0)+NVL(A9.RP2_NO_ABNRM_RN,0)+NVL(A10.RP2_NO_ABNRM_RN,0)+NVL(A11.RP2_NO_ABNRM_RN,0)+NVL(A12.RP2_NO_ABNRM_RN,0)+NVL(A13.RP2_NO_ABNRM_RN,0)) SUMOFRP2_NO_ABNRM_RN,
       SUM(NVL(A1.RP2_NO_ABNRM_TH,0)+NVL(A2.RP2_NO_ABNRM_TH,0)+NVL(A3.RP2_NO_ABNRM_TH,0)+NVL(A4.RP2_NO_ABNRM_TH,0)+NVL(A5.RP2_NO_ABNRM_TH,0)+NVL(A6.RP2_NO_ABNRM_TH,0)+NVL(A7.RP2_NO_ABNRM_TH,0)+NVL(A8.RP2_NO_ABNRM_TH,0)+NVL(A9.RP2_NO_ABNRM_TH,0)+NVL(A10.RP2_NO_ABNRM_TH,0)+NVL(A11.RP2_NO_ABNRM_TH,0)+NVL(A12.RP2_NO_ABNRM_TH,0)+NVL(A13.RP2_NO_ABNRM_TH,0)) SUMOFRP2_NO_ABNRM_TH,
       SUM(NVL(A1.RP2_NO_ABNRM_TR,0)+NVL(A2.RP2_NO_ABNRM_TR,0)+NVL(A3.RP2_NO_ABNRM_TR,0)+NVL(A4.RP2_NO_ABNRM_TR,0)+NVL(A5.RP2_NO_ABNRM_TR,0)+NVL(A6.RP2_NO_ABNRM_TR,0)+NVL(A7.RP2_NO_ABNRM_TR,0)+NVL(A8.RP2_NO_ABNRM_TR,0)+NVL(A9.RP2_NO_ABNRM_TR,0)+NVL(A10.RP2_NO_ABNRM_TR,0)+NVL(A11.RP2_NO_ABNRM_TR,0)+NVL(A12.RP2_NO_ABNRM_TR,0)+NVL(A13.RP2_NO_ABNRM_TR,0)) SUMOFRP2_NO_ABNRM_TR,
       SUM(NVL(A1.RP2_NO_ABNRM_TW,0)+NVL(A2.RP2_NO_ABNRM_TW,0)+NVL(A3.RP2_NO_ABNRM_TW,0)+NVL(A4.RP2_NO_ABNRM_TW,0)+NVL(A5.RP2_NO_ABNRM_TW,0)+NVL(A6.RP2_NO_ABNRM_TW,0)+NVL(A7.RP2_NO_ABNRM_TW,0)+NVL(A8.RP2_NO_ABNRM_TW,0)+NVL(A9.RP2_NO_ABNRM_TW,0)+NVL(A10.RP2_NO_ABNRM_TW,0)+NVL(A11.RP2_NO_ABNRM_TW,0)+NVL(A12.RP2_NO_ABNRM_TW,0)+NVL(A13.RP2_NO_ABNRM_TW,0)) SUMOFRP2_NO_ABNRM_TW,
       SUM(NVL(A1.RP2_NO_ABNRM_CM,0)+NVL(A2.RP2_NO_ABNRM_CM,0)+NVL(A3.RP2_NO_ABNRM_CM,0)+NVL(A4.RP2_NO_ABNRM_CM,0)+NVL(A5.RP2_NO_ABNRM_CM,0)+NVL(A6.RP2_NO_ABNRM_CM,0)+NVL(A7.RP2_NO_ABNRM_CM,0)+NVL(A8.RP2_NO_ABNRM_CM,0)+NVL(A9.RP2_NO_ABNRM_CM,0)+NVL(A10.RP2_NO_ABNRM_CM,0)+NVL(A11.RP2_NO_ABNRM_CM,0)+NVL(A12.RP2_NO_ABNRM_CM,0)+NVL(A13.RP2_NO_ABNRM_CM,0)) SUMOFRP2_NO_ABNRM_CM,
       SUM(NVL(A1.RP2_NO_ABNRM_WEAK,0)+NVL(A2.RP2_NO_ABNRM_WEAK,0)+NVL(A3.RP2_NO_ABNRM_WEAK,0)+NVL(A4.RP2_NO_ABNRM_WEAK,0)+NVL(A5.RP2_NO_ABNRM_WEAK,0)+NVL(A6.RP2_NO_ABNRM_WEAK,0)+NVL(A7.RP2_NO_ABNRM_WEAK,0)+NVL(A8.RP2_NO_ABNRM_WEAK,0)+NVL(A9.RP2_NO_ABNRM_WEAK,0)+NVL(A10.RP2_NO_ABNRM_WEAK,0)+NVL(A11.RP2_NO_ABNRM_WEAK,0)+NVL(A12.RP2_NO_ABNRM_WEAK,0)+NVL(A13.RP2_NO_ABNRM_WEAK,0)) SUMOFRP2_NO_ABNRM_WEAK,
       SUM(NVL(A1.RP2_NO_ABNRM_OTHER,0)+NVL(A2.RP2_NO_ABNRM_OTHER,0)+NVL(A3.RP2_NO_ABNRM_OTHER,0)+NVL(A4.RP2_NO_ABNRM_OTHER,0)+NVL(A5.RP2_NO_ABNRM_OTHER,0)+NVL(A6.RP2_NO_ABNRM_OTHER,0)+NVL(A7.RP2_NO_ABNRM_OTHER,0)+NVL(A8.RP2_NO_ABNRM_OTHER,0)+NVL(A9.RP2_NO_ABNRM_OTHER,0)+NVL(A10.RP2_NO_ABNRM_OTHER,0)+NVL(A11.RP2_NO_ABNRM_OTHER,0)+NVL(A12.RP2_NO_ABNRM_OTHER,0)+NVL(A13.RP2_NO_ABNRM_OTHER,0)) SUMOFRP2_NO_ABNRM_OTHER,
       SUM(NVL(A1.RP2_NO_ABNRM_PRGRM,0)+NVL(A2.RP2_NO_ABNRM_PRGRM,0)+NVL(A3.RP2_NO_ABNRM_PRGRM,0)+NVL(A4.RP2_NO_ABNRM_PRGRM,0)+NVL(A5.RP2_NO_ABNRM_PRGRM,0)+NVL(A6.RP2_NO_ABNRM_PRGRM,0)+NVL(A7.RP2_NO_ABNRM_PRGRM,0)+NVL(A8.RP2_NO_ABNRM_PRGRM,0)+NVL(A9.RP2_NO_ABNRM_PRGRM,0)+NVL(A10.RP2_NO_ABNRM_PRGRM,0)+NVL(A11.RP2_NO_ABNRM_PRGRM,0)+NVL(A12.RP2_NO_ABNRM_PRGRM,0)+NVL(A13.RP2_NO_ABNRM_PRGRM,0)) SUMOFRP2_NO_ABNRM_PRGRM,
       SUM(NVL(A1.RP3_NO_ABNRM_RE,0)+NVL(A2.RP3_NO_ABNRM_RE,0)+NVL(A3.RP3_NO_ABNRM_RE,0)+NVL(A4.RP3_NO_ABNRM_RE,0)+NVL(A5.RP3_NO_ABNRM_RE,0)+NVL(A6.RP3_NO_ABNRM_RE,0)+NVL(A7.RP3_NO_ABNRM_RE,0)+NVL(A8.RP3_NO_ABNRM_RE,0)+NVL(A9.RP3_NO_ABNRM_RE,0)+NVL(A10.RP3_NO_ABNRM_RE,0)+NVL(A11.RP3_NO_ABNRM_RE,0)+NVL(A12.RP3_NO_ABNRM_RE,0)+NVL(A13.RP3_NO_ABNRM_RE,0)) SUMOFRP3_NO_ABNRM_RE,
       SUM(NVL(A1.RP3_NO_ABNRM_SR,0)+NVL(A2.RP3_NO_ABNRM_SR,0)+NVL(A3.RP3_NO_ABNRM_SR,0)+NVL(A4.RP3_NO_ABNRM_SR,0)+NVL(A5.RP3_NO_ABNRM_SR,0)+NVL(A6.RP3_NO_ABNRM_SR,0)+NVL(A7.RP3_NO_ABNRM_SR,0)+NVL(A8.RP3_NO_ABNRM_SR,0)+NVL(A9.RP3_NO_ABNRM_SR,0)+NVL(A10.RP3_NO_ABNRM_SR,0)+NVL(A11.RP3_NO_ABNRM_SR,0)+NVL(A12.RP3_NO_ABNRM_SR,0)+NVL(A13.RP3_NO_ABNRM_SR,0)) SUMOFRP3_NO_ABNRM_SR,
       SUM(NVL(A1.RP3_NO_ABNRM_SH,0)+NVL(A2.RP3_NO_ABNRM_SH,0)+NVL(A3.RP3_NO_ABNRM_SH,0)+NVL(A4.RP3_NO_ABNRM_SH,0)+NVL(A5.RP3_NO_ABNRM_SH,0)+NVL(A6.RP3_NO_ABNRM_SH,0)+NVL(A7.RP3_NO_ABNRM_SH,0)+NVL(A8.RP3_NO_ABNRM_SH,0)+NVL(A9.RP3_NO_ABNRM_SH,0)+NVL(A10.RP3_NO_ABNRM_SH,0)+NVL(A11.RP3_NO_ABNRM_SH,0)+NVL(A12.RP3_NO_ABNRM_SH,0)+NVL(A13.RP3_NO_ABNRM_SH,0)) SUMOFRP3_NO_ABNRM_SH,
       SUM(NVL(A1.RP3_NO_ABNRM_RN,0)+NVL(A2.RP3_NO_ABNRM_RN,0)+NVL(A3.RP3_NO_ABNRM_RN,0)+NVL(A4.RP3_NO_ABNRM_RN,0)+NVL(A5.RP3_NO_ABNRM_RN,0)+NVL(A6.RP3_NO_ABNRM_RN,0)+NVL(A7.RP3_NO_ABNRM_RN,0)+NVL(A8.RP3_NO_ABNRM_RN,0)+NVL(A9.RP3_NO_ABNRM_RN,0)+NVL(A10.RP3_NO_ABNRM_RN,0)+NVL(A11.RP3_NO_ABNRM_RN,0)+NVL(A12.RP3_NO_ABNRM_RN,0)+NVL(A13.RP3_NO_ABNRM_RN,0)) SUMOFRP3_NO_ABNRM_RN,
       SUM(NVL(A1.RP3_NO_ABNRM_TH,0)+NVL(A2.RP3_NO_ABNRM_TH,0)+NVL(A3.RP3_NO_ABNRM_TH,0)+NVL(A4.RP3_NO_ABNRM_TH,0)+NVL(A5.RP3_NO_ABNRM_TH,0)+NVL(A6.RP3_NO_ABNRM_TH,0)+NVL(A7.RP3_NO_ABNRM_TH,0)+NVL(A8.RP3_NO_ABNRM_TH,0)+NVL(A9.RP3_NO_ABNRM_TH,0)+NVL(A10.RP3_NO_ABNRM_TH,0)+NVL(A11.RP3_NO_ABNRM_TH,0)+NVL(A12.RP3_NO_ABNRM_TH,0)+NVL(A13.RP3_NO_ABNRM_TH,0)) SUMOFRP3_NO_ABNRM_TH,
       SUM(NVL(A1.RP3_NO_ABNRM_TR,0)+NVL(A2.RP3_NO_ABNRM_TR,0)+NVL(A3.RP3_NO_ABNRM_TR,0)+NVL(A4.RP3_NO_ABNRM_TR,0)+NVL(A5.RP3_NO_ABNRM_TR,0)+NVL(A6.RP3_NO_ABNRM_TR,0)+NVL(A7.RP3_NO_ABNRM_TR,0)+NVL(A8.RP3_NO_ABNRM_TR,0)+NVL(A9.RP3_NO_ABNRM_TR,0)+NVL(A10.RP3_NO_ABNRM_TR,0)+NVL(A11.RP3_NO_ABNRM_TR,0)+NVL(A12.RP3_NO_ABNRM_TR,0)+NVL(A13.RP3_NO_ABNRM_TR,0)) SUMOFRP3_NO_ABNRM_TR,
       SUM(NVL(A1.RP3_NO_ABNRM_TW,0)+NVL(A2.RP3_NO_ABNRM_TW,0)+NVL(A3.RP3_NO_ABNRM_TW,0)+NVL(A4.RP3_NO_ABNRM_TW,0)+NVL(A5.RP3_NO_ABNRM_TW,0)+NVL(A6.RP3_NO_ABNRM_TW,0)+NVL(A7.RP3_NO_ABNRM_TW,0)+NVL(A8.RP3_NO_ABNRM_TW,0)+NVL(A9.RP3_NO_ABNRM_TW,0)+NVL(A10.RP3_NO_ABNRM_TW,0)+NVL(A11.RP3_NO_ABNRM_TW,0)+NVL(A12.RP3_NO_ABNRM_TW,0)+NVL(A13.RP3_NO_ABNRM_TW,0)) SUMOFRP3_NO_ABNRM_TW,
       SUM(NVL(A1.RP3_NO_ABNRM_CM,0)+NVL(A2.RP3_NO_ABNRM_CM,0)+NVL(A3.RP3_NO_ABNRM_CM,0)+NVL(A4.RP3_NO_ABNRM_CM,0)+NVL(A5.RP3_NO_ABNRM_CM,0)+NVL(A6.RP3_NO_ABNRM_CM,0)+NVL(A7.RP3_NO_ABNRM_CM,0)+NVL(A8.RP3_NO_ABNRM_CM,0)+NVL(A9.RP3_NO_ABNRM_CM,0)+NVL(A10.RP3_NO_ABNRM_CM,0)+NVL(A11.RP3_NO_ABNRM_CM,0)+NVL(A12.RP3_NO_ABNRM_CM,0)+NVL(A13.RP3_NO_ABNRM_CM,0)) SUMOFRP3_NO_ABNRM_CM,
       SUM(NVL(A1.RP3_NO_ABNRM_WEAK,0)+NVL(A2.RP3_NO_ABNRM_WEAK,0)+NVL(A3.RP3_NO_ABNRM_WEAK,0)+NVL(A4.RP3_NO_ABNRM_WEAK,0)+NVL(A5.RP3_NO_ABNRM_WEAK,0)+NVL(A6.RP3_NO_ABNRM_WEAK,0)+NVL(A7.RP3_NO_ABNRM_WEAK,0)+NVL(A8.RP3_NO_ABNRM_WEAK,0)+NVL(A9.RP3_NO_ABNRM_WEAK,0)+NVL(A10.RP3_NO_ABNRM_WEAK,0)+NVL(A11.RP3_NO_ABNRM_WEAK,0)+NVL(A12.RP3_NO_ABNRM_WEAK,0)+NVL(A13.RP3_NO_ABNRM_WEAK,0)) SUMOFRP3_NO_ABNRM_WEAK,
       SUM(NVL(A1.RP3_NO_ABNRM_OTHER,0)+NVL(A2.RP3_NO_ABNRM_OTHER,0)+NVL(A3.RP3_NO_ABNRM_OTHER,0)+NVL(A4.RP3_NO_ABNRM_OTHER,0)+NVL(A5.RP3_NO_ABNRM_OTHER,0)+NVL(A6.RP3_NO_ABNRM_OTHER,0)+NVL(A7.RP3_NO_ABNRM_OTHER,0)+NVL(A8.RP3_NO_ABNRM_OTHER,0)+NVL(A9.RP3_NO_ABNRM_OTHER,0)+NVL(A10.RP3_NO_ABNRM_OTHER,0)+NVL(A11.RP3_NO_ABNRM_OTHER,0)+NVL(A12.RP3_NO_ABNRM_OTHER,0)+NVL(A13.RP3_NO_ABNRM_OTHER,0)) SUMOFRP3_NO_ABNRM_OTHER,
       SUM(NVL(A1.RP3_NO_ABNRM_PRGRM,0)+NVL(A2.RP3_NO_ABNRM_PRGRM,0)+NVL(A3.RP3_NO_ABNRM_PRGRM,0)+NVL(A4.RP3_NO_ABNRM_PRGRM,0)+NVL(A5.RP3_NO_ABNRM_PRGRM,0)+NVL(A6.RP3_NO_ABNRM_PRGRM,0)+NVL(A7.RP3_NO_ABNRM_PRGRM,0)+NVL(A8.RP3_NO_ABNRM_PRGRM,0)+NVL(A9.RP3_NO_ABNRM_PRGRM,0)+NVL(A10.RP3_NO_ABNRM_PRGRM,0)+NVL(A11.RP3_NO_ABNRM_PRGRM,0)+NVL(A12.RP3_NO_ABNRM_PRGRM,0)+NVL(A13.RP3_NO_ABNRM_PRGRM,0)) SUMOFRP3_NO_ABNRM_PRGRM,
       SUM(NVL(A1.RP4_NO_ABNRM_RE,0)+NVL(A2.RP4_NO_ABNRM_RE,0)+NVL(A3.RP4_NO_ABNRM_RE,0)+NVL(A4.RP4_NO_ABNRM_RE,0)+NVL(A5.RP4_NO_ABNRM_RE,0)+NVL(A6.RP4_NO_ABNRM_RE,0)+NVL(A7.RP4_NO_ABNRM_RE,0)+NVL(A8.RP4_NO_ABNRM_RE,0)+NVL(A9.RP4_NO_ABNRM_RE,0)+NVL(A10.RP4_NO_ABNRM_RE,0)+NVL(A11.RP4_NO_ABNRM_RE,0)+NVL(A12.RP4_NO_ABNRM_RE,0)+NVL(A13.RP4_NO_ABNRM_RE,0)) SUMOFRP4_NO_ABNRM_RE,
       SUM(NVL(A1.RP4_NO_ABNRM_SR,0)+NVL(A2.RP4_NO_ABNRM_SR,0)+NVL(A3.RP4_NO_ABNRM_SR,0)+NVL(A4.RP4_NO_ABNRM_SR,0)+NVL(A5.RP4_NO_ABNRM_SR,0)+NVL(A6.RP4_NO_ABNRM_SR,0)+NVL(A7.RP4_NO_ABNRM_SR,0)+NVL(A8.RP4_NO_ABNRM_SR,0)+NVL(A9.RP4_NO_ABNRM_SR,0)+NVL(A10.RP4_NO_ABNRM_SR,0)+NVL(A11.RP4_NO_ABNRM_SR,0)+NVL(A12.RP4_NO_ABNRM_SR,0)+NVL(A13.RP4_NO_ABNRM_SR,0)) SUMOFRP4_NO_ABNRM_SR,
       SUM(NVL(A1.RP4_NO_ABNRM_SH,0)+NVL(A2.RP4_NO_ABNRM_SH,0)+NVL(A3.RP4_NO_ABNRM_SH,0)+NVL(A4.RP4_NO_ABNRM_SH,0)+NVL(A5.RP4_NO_ABNRM_SH,0)+NVL(A6.RP4_NO_ABNRM_SH,0)+NVL(A7.RP4_NO_ABNRM_SH,0)+NVL(A8.RP4_NO_ABNRM_SH,0)+NVL(A9.RP4_NO_ABNRM_SH,0)+NVL(A10.RP4_NO_ABNRM_SH,0)+NVL(A11.RP4_NO_ABNRM_SH,0)+NVL(A12.RP4_NO_ABNRM_SH,0)+NVL(A13.RP4_NO_ABNRM_SH,0)) SUMOFRP4_NO_ABNRM_SH,
       SUM(NVL(A1.RP4_NO_ABNRM_RN,0)+NVL(A2.RP4_NO_ABNRM_RN,0)+NVL(A3.RP4_NO_ABNRM_RN,0)+NVL(A4.RP4_NO_ABNRM_RN,0)+NVL(A5.RP4_NO_ABNRM_RN,0)+NVL(A6.RP4_NO_ABNRM_RN,0)+NVL(A7.RP4_NO_ABNRM_RN,0)+NVL(A8.RP4_NO_ABNRM_RN,0)+NVL(A9.RP4_NO_ABNRM_RN,0)+NVL(A10.RP4_NO_ABNRM_RN,0)+NVL(A11.RP4_NO_ABNRM_RN,0)+NVL(A12.RP4_NO_ABNRM_RN,0)+NVL(A13.RP4_NO_ABNRM_RN,0)) SUMOFRP4_NO_ABNRM_RN,
       SUM(NVL(A1.RP4_NO_ABNRM_TH,0)+NVL(A2.RP4_NO_ABNRM_TH,0)+NVL(A3.RP4_NO_ABNRM_TH,0)+NVL(A4.RP4_NO_ABNRM_TH,0)+NVL(A5.RP4_NO_ABNRM_TH,0)+NVL(A6.RP4_NO_ABNRM_TH,0)+NVL(A7.RP4_NO_ABNRM_TH,0)+NVL(A8.RP4_NO_ABNRM_TH,0)+NVL(A9.RP4_NO_ABNRM_TH,0)+NVL(A10.RP4_NO_ABNRM_TH,0)+NVL(A11.RP4_NO_ABNRM_TH,0)+NVL(A12.RP4_NO_ABNRM_TH,0)+NVL(A13.RP4_NO_ABNRM_TH,0)) SUMOFRP4_NO_ABNRM_TH,
       SUM(NVL(A1.RP4_NO_ABNRM_TR,0)+NVL(A2.RP4_NO_ABNRM_TR,0)+NVL(A3.RP4_NO_ABNRM_TR,0)+NVL(A4.RP4_NO_ABNRM_TR,0)+NVL(A5.RP4_NO_ABNRM_TR,0)+NVL(A6.RP4_NO_ABNRM_TR,0)+NVL(A7.RP4_NO_ABNRM_TR,0)+NVL(A8.RP4_NO_ABNRM_TR,0)+NVL(A9.RP4_NO_ABNRM_TR,0)+NVL(A10.RP4_NO_ABNRM_TR,0)+NVL(A11.RP4_NO_ABNRM_TR,0)+NVL(A12.RP4_NO_ABNRM_TR,0)+NVL(A13.RP4_NO_ABNRM_TR,0)) SUMOFRP4_NO_ABNRM_TR,
       SUM(NVL(A1.RP4_NO_ABNRM_TW,0)+NVL(A2.RP4_NO_ABNRM_TW,0)+NVL(A3.RP4_NO_ABNRM_TW,0)+NVL(A4.RP4_NO_ABNRM_TW,0)+NVL(A5.RP4_NO_ABNRM_TW,0)+NVL(A6.RP4_NO_ABNRM_TW,0)+NVL(A7.RP4_NO_ABNRM_TW,0)+NVL(A8.RP4_NO_ABNRM_TW,0)+NVL(A9.RP4_NO_ABNRM_TW,0)+NVL(A10.RP4_NO_ABNRM_TW,0)+NVL(A11.RP4_NO_ABNRM_TW,0)+NVL(A12.RP4_NO_ABNRM_TW,0)+NVL(A13.RP4_NO_ABNRM_TW,0)) SUMOFRP4_NO_ABNRM_TW,
       SUM(NVL(A1.RP4_NO_ABNRM_CM,0)+NVL(A2.RP4_NO_ABNRM_CM,0)+NVL(A3.RP4_NO_ABNRM_CM,0)+NVL(A4.RP4_NO_ABNRM_CM,0)+NVL(A5.RP4_NO_ABNRM_CM,0)+NVL(A6.RP4_NO_ABNRM_CM,0)+NVL(A7.RP4_NO_ABNRM_CM,0)+NVL(A8.RP4_NO_ABNRM_CM,0)+NVL(A9.RP4_NO_ABNRM_CM,0)+NVL(A10.RP4_NO_ABNRM_CM,0)+NVL(A11.RP4_NO_ABNRM_CM,0)+NVL(A12.RP4_NO_ABNRM_CM,0)+NVL(A13.RP4_NO_ABNRM_CM,0)) SUMOFRP4_NO_ABNRM_CM,
       SUM(NVL(A1.RP4_NO_ABNRM_WEAK,0)+NVL(A2.RP4_NO_ABNRM_WEAK,0)+NVL(A3.RP4_NO_ABNRM_WEAK,0)+NVL(A4.RP4_NO_ABNRM_WEAK,0)+NVL(A5.RP4_NO_ABNRM_WEAK,0)+NVL(A6.RP4_NO_ABNRM_WEAK,0)+NVL(A7.RP4_NO_ABNRM_WEAK,0)+NVL(A8.RP4_NO_ABNRM_WEAK,0)+NVL(A9.RP4_NO_ABNRM_WEAK,0)+NVL(A10.RP4_NO_ABNRM_WEAK,0)+NVL(A11.RP4_NO_ABNRM_WEAK,0)+NVL(A12.RP4_NO_ABNRM_WEAK,0)+NVL(A13.RP4_NO_ABNRM_WEAK,0)) SUMOFRP4_NO_ABNRM_WEAK,
       SUM(NVL(A1.RP4_NO_ABNRM_OTHER,0)+NVL(A2.RP4_NO_ABNRM_OTHER,0)+NVL(A3.RP4_NO_ABNRM_OTHER,0)+NVL(A4.RP4_NO_ABNRM_OTHER,0)+NVL(A5.RP4_NO_ABNRM_OTHER,0)+NVL(A6.RP4_NO_ABNRM_OTHER,0)+NVL(A7.RP4_NO_ABNRM_OTHER,0)+NVL(A8.RP4_NO_ABNRM_OTHER,0)+NVL(A9.RP4_NO_ABNRM_OTHER,0)+NVL(A10.RP4_NO_ABNRM_OTHER,0)+NVL(A11.RP4_NO_ABNRM_OTHER,0)+NVL(A12.RP4_NO_ABNRM_OTHER,0)+NVL(A13.RP4_NO_ABNRM_OTHER,0)) SUMOFRP4_NO_ABNRM_OTHER,
       SUM(NVL(A1.RP4_NO_ABNRM_PRGRM,0)+NVL(A2.RP4_NO_ABNRM_PRGRM,0)+NVL(A3.RP4_NO_ABNRM_PRGRM,0)+NVL(A4.RP4_NO_ABNRM_PRGRM,0)+NVL(A5.RP4_NO_ABNRM_PRGRM,0)+NVL(A6.RP4_NO_ABNRM_PRGRM,0)+NVL(A7.RP4_NO_ABNRM_PRGRM,0)+NVL(A8.RP4_NO_ABNRM_PRGRM,0)+NVL(A9.RP4_NO_ABNRM_PRGRM,0)+NVL(A10.RP4_NO_ABNRM_PRGRM,0)+NVL(A11.RP4_NO_ABNRM_PRGRM,0)+NVL(A12.RP4_NO_ABNRM_PRGRM,0)+NVL(A13.RP4_NO_ABNRM_PRGRM,0)) SUMOFRP4_NO_ABNRM_PRGRM
  FROM cns_t_germ_count G,
       cns_t_daily_abnormal A1,
       cns_t_daily_abnormal A2,
       cns_t_daily_abnormal A3,
       cns_t_daily_abnormal A4,
       cns_t_daily_abnormal A5,
       cns_t_daily_abnormal A6,
       cns_t_daily_abnormal A7,
       cns_t_daily_abnormal A8,
       cns_t_daily_abnormal A9,
       cns_t_daily_abnormal A10,
       cns_t_daily_abnormal A11,
       cns_t_daily_abnormal A12,
       cns_t_daily_abnormal A13
 WHERE G.DAILY_GERM_SKEY1 = A1.DAILY_GERM_SKEY(+)
   AND G.DAILY_GERM_SKEY2 = A2.DAILY_GERM_SKEY(+)
   AND G.DAILY_GERM_SKEY3 = A3.DAILY_GERM_SKEY(+)
   AND G.DAILY_GERM_SKEY4 = A4.DAILY_GERM_SKEY(+)
   AND G.DAILY_GERM_SKEY5 = A5.DAILY_GERM_SKEY(+)
   AND G.DAILY_GERM_SKEY6 = A6.DAILY_GERM_SKEY(+)
   AND G.DAILY_GERM_SKEY7 = A7.DAILY_GERM_SKEY(+)
   AND G.DAILY_GERM_SKEY8 = A8.DAILY_GERM_SKEY(+)
   AND G.DAILY_GERM_SKEY9 = A9.DAILY_GERM_SKEY(+)
   AND G.DAILY_GERM_SKEY10 = A10.DAILY_GERM_SKEY(+)
   AND G.DAILY_GERM_SKEY11 = A11.DAILY_GERM_SKEY(+)
   AND G.DAILY_GERM_SKEY12 = A12.DAILY_GERM_SKEY(+)
   AND G.DAILY_GERM_SKEY13 = A13.DAILY_GERM_SKEY(+)
GROUP BY ria_skey;


-- CONSEP.CNSL25_DAILY_AB_TOT_BY_CAT source

CREATE OR REPLACE VIEW CONSEP.CNSL25_DAILY_AB_TOT_BY_CAT
(RIA_SKEY,RE_SUM,SR_SUM,SH_SUM,RN_SUM,TH_SUM,TR_SUM,TW_SUM,CM_SUM,WEAK_SUM,OTHER_SUM,PRGRM_SUM)
AS
SELECT RIA_SKEY,
       SUMOFRP1_NO_ABNRM_RE+SUMOFRP2_NO_ABNRM_RE+SUMOFRP3_NO_ABNRM_RE+SUMOFRP4_NO_ABNRM_RE,
       SUMOFRP1_NO_ABNRM_SR+SUMOFRP2_NO_ABNRM_SR+SUMOFRP3_NO_ABNRM_SR+SUMOFRP4_NO_ABNRM_SR,
       SUMOFRP1_NO_ABNRM_SH+SUMOFRP2_NO_ABNRM_SH+SUMOFRP3_NO_ABNRM_SH+SUMOFRP4_NO_ABNRM_SH,
       SUMOFRP1_NO_ABNRM_RN+SUMOFRP2_NO_ABNRM_RN+SUMOFRP3_NO_ABNRM_RN+SUMOFRP4_NO_ABNRM_RN,
       SUMOFRP1_NO_ABNRM_TH+SUMOFRP2_NO_ABNRM_TH+SUMOFRP3_NO_ABNRM_TH+SUMOFRP4_NO_ABNRM_TH,
	   SUMOFRP1_NO_ABNRM_TR+SUMOFRP2_NO_ABNRM_TR+SUMOFRP3_NO_ABNRM_TR+SUMOFRP4_NO_ABNRM_TR,
       SUMOFRP1_NO_ABNRM_TW+SUMOFRP2_NO_ABNRM_TW+SUMOFRP3_NO_ABNRM_TW+SUMOFRP4_NO_ABNRM_TW,
       SUMOFRP1_NO_ABNRM_CM+SUMOFRP2_NO_ABNRM_CM+SUMOFRP3_NO_ABNRM_CM+SUMOFRP4_NO_ABNRM_CM,
       SUMOFRP1_NO_ABNRM_WEAK+SUMOFRP2_NO_ABNRM_WEAK+SUMOFRP3_NO_ABNRM_WEAK+SUMOFRP4_NO_ABNRM_WEAK,
       SUMOFRP1_NO_ABNRM_OTHER+SUMOFRP2_NO_ABNRM_OTHER+SUMOFRP3_NO_ABNRM_OTHER+SUMOFRP4_NO_ABNRM_OTHER,
       SUMOFRP1_NO_ABNRM_PRGRM+SUMOFRP2_NO_ABNRM_PRGRM+SUMOFRP3_NO_ABNRM_PRGRM+SUMOFRP4_NO_ABNRM_PRGRM
  FROM CNSL25_DAILY_ABNORMAL_TOTALS;


-- CONSEP.CNSL25_DAILY_GERM_FLAT source

CREATE OR REPLACE VIEW CONSEP.CNSL25_DAILY_GERM_FLAT
(RIA_SKEY,DAILY_GERM_SKEY1,COUNT_DT1,DAY_NO_OF_TEST1,REP1_NO_SEEDS_GERM1,REP2_NO_SEEDS_GERM1,REP3_NO_SEEDS_GERM1,REP4_NO_SEEDS_GERM1,CUMULATIVE_GERM1,DAILY_GERM_SKEY2,COUNT_DT2,DAY_NO_OF_TEST2,REP1_NO_SEEDS_GERM2,REP2_NO_SEEDS_GERM2,REP3_NO_SEEDS_GERM2,REP4_NO_SEEDS_GERM2,CUMULATIVE_GERM2,DAILY_GERM_SKEY3,COUNT_DT3,DAY_NO_OF_TEST3,REP1_NO_SEEDS_GERM3,REP2_NO_SEEDS_GERM3,REP3_NO_SEEDS_GERM3,REP4_NO_SEEDS_GERM3,CUMULATIVE_GERM3,DAILY_GERM_SKEY4,COUNT_DT4,DAY_NO_OF_TEST4,REP1_NO_SEEDS_GERM4,REP2_NO_SEEDS_GERM4,REP3_NO_SEEDS_GERM4,REP4_NO_SEEDS_GERM4,CUMULATIVE_GERM4,DAILY_GERM_SKEY5,COUNT_DT5,DAY_NO_OF_TEST5,REP1_NO_SEEDS_GERM5,REP2_NO_SEEDS_GERM5,REP3_NO_SEEDS_GERM5,REP4_NO_SEEDS_GERM5,CUMULATIVE_GERM5,DAILY_GERM_SKEY6,COUNT_DT6,DAY_NO_OF_TEST6,REP1_NO_SEEDS_GERM6,REP2_NO_SEEDS_GERM6,REP3_NO_SEEDS_GERM6,REP4_NO_SEEDS_GERM6,CUMULATIVE_GERM6,DAILY_GERM_SKEY7,COUNT_DT7,DAY_NO_OF_TEST7,REP1_NO_SEEDS_GERM7,REP2_NO_SEEDS_GERM7,REP3_NO_SEEDS_GERM7,REP4_NO_SEEDS_GERM7,CUMULATIVE_GERM7,DAILY_GERM_SKEY8,COUNT_DT8,DAY_NO_OF_TEST8,REP1_NO_SEEDS_GERM8,REP2_NO_SEEDS_GERM8,REP3_NO_SEEDS_GERM8,REP4_NO_SEEDS_GERM8,CUMULATIVE_GERM8,DAILY_GERM_SKEY9,COUNT_DT9,DAY_NO_OF_TEST9,REP1_NO_SEEDS_GERM9,REP2_NO_SEEDS_GERM9,REP3_NO_SEEDS_GERM9,REP4_NO_SEEDS_GERM9,CUMULATIVE_GERM9,DAILY_GERM_SKEY10,COUNT_DT10,DAY_NO_OF_TEST10,REP1_NO_SEEDS_GERM10,REP2_NO_SEEDS_GERM10,REP3_NO_SEEDS_GERM10,REP4_NO_SEEDS_GERM10,CUMULATIVE_GERM10,DAILY_GERM_SKEY11,COUNT_DT11,DAY_NO_OF_TEST11,REP1_NO_SEEDS_GERM11,REP2_NO_SEEDS_GERM11,REP3_NO_SEEDS_GERM11,REP4_NO_SEEDS_GERM11,CUMULATIVE_GERM11,DAILY_GERM_SKEY12,COUNT_DT12,DAY_NO_OF_TEST12,REP1_NO_SEEDS_GERM12,REP2_NO_SEEDS_GERM12,REP3_NO_SEEDS_GERM12,REP4_NO_SEEDS_GERM12,CUMULATIVE_GERM12,DAILY_GERM_SKEY13,COUNT_DT13,DAY_NO_OF_TEST13,REP1_NO_SEEDS_GERM13,REP2_NO_SEEDS_GERM13,REP3_NO_SEEDS_GERM13,REP4_NO_SEEDS_GERM13,CUMULATIVE_GERM13)
AS
SELECT sub."RIA_SKEY",sub."DAILY_GERM_SKEY1",sub."COUNT_DT1",sub."DAY_NO_OF_TEST1",sub."REP1_NO_SEEDS_GERM1",sub."REP2_NO_SEEDS_GERM1",sub."REP3_NO_SEEDS_GERM1",sub."REP4_NO_SEEDS_GERM1",sub."CUMULATIVE_GERM1",sub."DAILY_GERM_SKEY2",sub."COUNT_DT2",sub."DAY_NO_OF_TEST2",sub."REP1_NO_SEEDS_GERM2",sub."REP2_NO_SEEDS_GERM2",sub."REP3_NO_SEEDS_GERM2",sub."REP4_NO_SEEDS_GERM2",sub."CUMULATIVE_GERM2",sub."DAILY_GERM_SKEY3",sub."COUNT_DT3",sub."DAY_NO_OF_TEST3",sub."REP1_NO_SEEDS_GERM3",sub."REP2_NO_SEEDS_GERM3",sub."REP3_NO_SEEDS_GERM3",sub."REP4_NO_SEEDS_GERM3",sub."CUMULATIVE_GERM3",sub."DAILY_GERM_SKEY4",sub."COUNT_DT4",sub."DAY_NO_OF_TEST4",sub."REP1_NO_SEEDS_GERM4",sub."REP2_NO_SEEDS_GERM4",sub."REP3_NO_SEEDS_GERM4",sub."REP4_NO_SEEDS_GERM4",sub."CUMULATIVE_GERM4",sub."DAILY_GERM_SKEY5",sub."COUNT_DT5",sub."DAY_NO_OF_TEST5",sub."REP1_NO_SEEDS_GERM5",sub."REP2_NO_SEEDS_GERM5",sub."REP3_NO_SEEDS_GERM5",sub."REP4_NO_SEEDS_GERM5",sub."CUMULATIVE_GERM5",sub."DAILY_GERM_SKEY6",sub."COUNT_DT6",sub."DAY_NO_OF_TEST6",sub."REP1_NO_SEEDS_GERM6",sub."REP2_NO_SEEDS_GERM6",sub."REP3_NO_SEEDS_GERM6",sub."REP4_NO_SEEDS_GERM6",sub."CUMULATIVE_GERM6",sub."DAILY_GERM_SKEY7",sub."COUNT_DT7",sub."DAY_NO_OF_TEST7",sub."REP1_NO_SEEDS_GERM7",sub."REP2_NO_SEEDS_GERM7",sub."REP3_NO_SEEDS_GERM7",sub."REP4_NO_SEEDS_GERM7",sub."CUMULATIVE_GERM7",sub."DAILY_GERM_SKEY8",sub."COUNT_DT8",sub."DAY_NO_OF_TEST8",sub."REP1_NO_SEEDS_GERM8",sub."REP2_NO_SEEDS_GERM8",sub."REP3_NO_SEEDS_GERM8",sub."REP4_NO_SEEDS_GERM8",sub."CUMULATIVE_GERM8",sub."DAILY_GERM_SKEY9",sub."COUNT_DT9",sub."DAY_NO_OF_TEST9",sub."REP1_NO_SEEDS_GERM9",sub."REP2_NO_SEEDS_GERM9",sub."REP3_NO_SEEDS_GERM9",sub."REP4_NO_SEEDS_GERM9",sub."CUMULATIVE_GERM9",sub."DAILY_GERM_SKEY10",sub."COUNT_DT10",sub."DAY_NO_OF_TEST10",sub."REP1_NO_SEEDS_GERM10",sub."REP2_NO_SEEDS_GERM10",sub."REP3_NO_SEEDS_GERM10",sub."REP4_NO_SEEDS_GERM10",sub."CUMULATIVE_GERM10",sub."DAILY_GERM_SKEY11",sub."COUNT_DT11",sub."DAY_NO_OF_TEST11",sub."REP1_NO_SEEDS_GERM11",sub."REP2_NO_SEEDS_GERM11",sub."REP3_NO_SEEDS_GERM11",sub."REP4_NO_SEEDS_GERM11",sub."CUMULATIVE_GERM11",sub."DAILY_GERM_SKEY12",sub."COUNT_DT12",sub."DAY_NO_OF_TEST12",sub."REP1_NO_SEEDS_GERM12",sub."REP2_NO_SEEDS_GERM12",sub."REP3_NO_SEEDS_GERM12",sub."REP4_NO_SEEDS_GERM12",sub."CUMULATIVE_GERM12",sub."DAILY_GERM_SKEY13",sub."COUNT_DT13",sub."DAY_NO_OF_TEST13",sub."REP1_NO_SEEDS_GERM13",sub."REP2_NO_SEEDS_GERM13",sub."REP3_NO_SEEDS_GERM13",sub."REP4_NO_SEEDS_GERM13",sub."CUMULATIVE_GERM13"
  FROM
  (
  SELECT ria_skey,
         daily_germ_skey daily_germ_skey1,
         count_dt count_dt1,
         day_no_of_test day_no_of_test1,
	     rep1_no_seeds_germ rep1_no_seeds_germ1,
	     rep2_no_seeds_germ rep2_no_seeds_germ1,
	     rep3_no_seeds_germ rep3_no_seeds_germ1,
	     rep4_no_seeds_germ rep4_no_seeds_germ1,
		 cumulative_germ cumulative_germ1,
         LEAD(daily_germ_skey,1) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) daily_germ_skey2,
         LEAD(count_dt,1)  OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) count_dt2,
         LEAD(day_no_of_test,1) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) day_no_of_test2,
	     LEAD(rep1_no_seeds_germ,1) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep1_no_seeds_germ2,
	     LEAD(rep2_no_seeds_germ,1) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep2_no_seeds_germ2,
	     LEAD(rep3_no_seeds_germ,1) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep3_no_seeds_germ2,
	     LEAD(rep4_no_seeds_germ,1) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep4_no_seeds_germ2,
		 LEAD(cumulative_germ,1) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) cumulative_germ2,
         LEAD(daily_germ_skey,2) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) daily_germ_skey3,
         LEAD(count_dt,2)  OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) count_dt3,
         LEAD(day_no_of_test,2) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) day_no_of_test3,
	     LEAD(rep1_no_seeds_germ,2) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep1_no_seeds_germ3,
	     LEAD(rep2_no_seeds_germ,2) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep2_no_seeds_germ3,
	     LEAD(rep3_no_seeds_germ,2) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep3_no_seeds_germ3,
	     LEAD(rep4_no_seeds_germ,2) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep4_no_seeds_germ3,
		 LEAD(cumulative_germ,2) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) cumulative_germ3,
         LEAD(daily_germ_skey,3) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) daily_germ_skey4,
         LEAD(count_dt,3)  OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) count_dt4,
         LEAD(day_no_of_test,3) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) day_no_of_test4,
	     LEAD(rep1_no_seeds_germ,3) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep1_no_seeds_germ4,
	     LEAD(rep2_no_seeds_germ,3) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep2_no_seeds_germ4,
	     LEAD(rep3_no_seeds_germ,3) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep3_no_seeds_germ4,
	     LEAD(rep4_no_seeds_germ,3) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep4_no_seeds_germ4,
		 LEAD(cumulative_germ,3) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) cumulative_germ4,
         LEAD(daily_germ_skey,4) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) daily_germ_skey5,
         LEAD(count_dt,4)  OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) count_dt5,
         LEAD(day_no_of_test,4) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) day_no_of_test5,
	     LEAD(rep1_no_seeds_germ,4) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep1_no_seeds_germ5,
	     LEAD(rep2_no_seeds_germ,4) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep2_no_seeds_germ5,
	     LEAD(rep3_no_seeds_germ,4) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep3_no_seeds_germ5,
	     LEAD(rep4_no_seeds_germ,4) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep4_no_seeds_germ5,
		 LEAD(cumulative_germ,4) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) cumulative_germ5,
         LEAD(daily_germ_skey,5) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) daily_germ_skey6,
         LEAD(count_dt,5)  OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) count_dt6,
         LEAD(day_no_of_test,5) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) day_no_of_test6,
	     LEAD(rep1_no_seeds_germ,5) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep1_no_seeds_germ6,
	     LEAD(rep2_no_seeds_germ,5) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep2_no_seeds_germ6,
	     LEAD(rep3_no_seeds_germ,5) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep3_no_seeds_germ6,
	     LEAD(rep4_no_seeds_germ,5) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep4_no_seeds_germ6,
		 LEAD(cumulative_germ,5) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) cumulative_germ6,
         LEAD(daily_germ_skey,6) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) daily_germ_skey7,
         LEAD(count_dt,6)  OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) count_dt7,
         LEAD(day_no_of_test,6) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) day_no_of_test7,
	     LEAD(rep1_no_seeds_germ,6) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep1_no_seeds_germ7,
	     LEAD(rep2_no_seeds_germ,6) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep2_no_seeds_germ7,
	     LEAD(rep3_no_seeds_germ,6) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep3_no_seeds_germ7,
	     LEAD(rep4_no_seeds_germ,6) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep4_no_seeds_germ7,
		 LEAD(cumulative_germ,6) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) cumulative_germ7,
         LEAD(daily_germ_skey,7) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) daily_germ_skey8,
         LEAD(count_dt,7)  OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) count_dt8,
         LEAD(day_no_of_test,7) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) day_no_of_test8,
	     LEAD(rep1_no_seeds_germ,7) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep1_no_seeds_germ8,
	     LEAD(rep2_no_seeds_germ,7) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep2_no_seeds_germ8,
	     LEAD(rep3_no_seeds_germ,7) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep3_no_seeds_germ8,
	     LEAD(rep4_no_seeds_germ,7) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep4_no_seeds_germ8,
		 LEAD(cumulative_germ,7) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) cumulative_germ8,
         LEAD(daily_germ_skey,8) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) daily_germ_skey9,
         LEAD(count_dt,8)  OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) count_dt9,
         LEAD(day_no_of_test,8) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) day_no_of_test9,
	     LEAD(rep1_no_seeds_germ,8) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep1_no_seeds_germ9,
	     LEAD(rep2_no_seeds_germ,8) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep2_no_seeds_germ9,
	     LEAD(rep3_no_seeds_germ,8) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep3_no_seeds_germ9,
	     LEAD(rep4_no_seeds_germ,8) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep4_no_seeds_germ9,
		 LEAD(cumulative_germ,8) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) cumulative_germ9,
         LEAD(daily_germ_skey,9) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) daily_germ_skey10,
         LEAD(count_dt,9)  OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) count_dt10,
         LEAD(day_no_of_test,9) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) day_no_of_test10,
	     LEAD(rep1_no_seeds_germ,9) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep1_no_seeds_germ10,
	     LEAD(rep2_no_seeds_germ,9) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep2_no_seeds_germ10,
	     LEAD(rep3_no_seeds_germ,9) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep3_no_seeds_germ10,
	     LEAD(rep4_no_seeds_germ,9) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep4_no_seeds_germ10,
		 LEAD(cumulative_germ,9) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) cumulative_germ10,
         LEAD(daily_germ_skey,10) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) daily_germ_skey11,
         LEAD(count_dt,10)  OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) count_dt11,
         LEAD(day_no_of_test,10) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) day_no_of_test11,
	     LEAD(rep1_no_seeds_germ,10) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep1_no_seeds_germ11,
	     LEAD(rep2_no_seeds_germ,10) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep2_no_seeds_germ11,
	     LEAD(rep3_no_seeds_germ,10) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep3_no_seeds_germ11,
	     LEAD(rep4_no_seeds_germ,10) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep4_no_seeds_germ11,
		 LEAD(cumulative_germ,10) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) cumulative_germ11,
         LEAD(daily_germ_skey,11) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) daily_germ_skey12,
         LEAD(count_dt,11)  OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) count_dt12,
         LEAD(day_no_of_test,11) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) day_no_of_test12,
	     LEAD(rep1_no_seeds_germ,11) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep1_no_seeds_germ12,
	     LEAD(rep2_no_seeds_germ,11) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep2_no_seeds_germ12,
	     LEAD(rep3_no_seeds_germ,11) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep3_no_seeds_germ12,
	     LEAD(rep4_no_seeds_germ,11) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep4_no_seeds_germ12,
		 LEAD(cumulative_germ,11) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) cumulative_germ12,
         LEAD(daily_germ_skey,12) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) daily_germ_skey13,
         LEAD(count_dt,12)  OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) count_dt13,
         LEAD(day_no_of_test,12) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) day_no_of_test13,
	     LEAD(rep1_no_seeds_germ,12) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep1_no_seeds_germ13,
	     LEAD(rep2_no_seeds_germ,12) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep2_no_seeds_germ13,
	     LEAD(rep3_no_seeds_germ,12) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep3_no_seeds_germ13,
	     LEAD(rep4_no_seeds_germ,12) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) rep4_no_seeds_germ13,
		 LEAD(cumulative_germ,12) OVER (PARTITION BY RIA_SKEY ORDER BY COUNT_DT) cumulative_germ13
    FROM cns_t_daily_germ
  ) sub,
  cns_t_daily_germ dg --only used to increase performance when selecting from view on ria_skey
 WHERE sub.ria_skey = dg.ria_skey
   AND dg.count_dt = sub.count_dt1;


-- CONSEP.CNSL88_CLIENT_LOCATIONS source

CREATE OR REPLACE VIEW CONSEP.CNSL88_CLIENT_LOCATIONS
(CLIENT_ACRONYM,CLIENT_NUMBER,CLIENT_LOCN_CODE,CLIENT_NAME,CLIENT_LOCN_NAME,ADDRESS_1,ADDRESS_2,ADDRESS_3,CITY,PROVINCE,POSTAL_CODE,COUNTRY,BUSINESS_PHONE,HOME_PHONE)
AS
SELECT
 A.CLIENT_ACRONYM,
 B.CLIENT_NUMBER,
 B.CLIENT_LOCN_CODE,
 SUBSTR(cns_fn_GET_CLIENT_NAME(B.CLIENT_NUMBER,NULL),1,100),
 B.CLIENT_LOCN_NAME,
 B.ADDRESS_1,
 B.ADDRESS_2,
 B.ADDRESS_3,
 B.CITY,
 B.PROVINCE,
 B.POSTAL_CODE,
 B.COUNTRY,
 B.BUSINESS_PHONE,
 B.HOME_PHONE
FROM
 CNS_L_CLIENT_ACRONYM A,
 CNS_L_CLIENT_LOCATION B,
 CNS_L_TSC_CLIENT_INFO C
WHERE
    A.CLIENT_NUMBER = B.CLIENT_NUMBER
AND C.CLIENT_NUMBER = B.CLIENT_NUMBER
AND C.CLIENT_LOCN_CODE = B.CLIENT_LOCN_CODE;


-- CONSEP.CNSL90_MAIL_LABELS source

CREATE OR REPLACE VIEW CONSEP.CNSL90_MAIL_LABELS
(CLIENT_NUMBER,CLIENT_LOCN_CODE,TSC_CLI_TYPE_CD,CONTACT_NAME,CONTACT_TITLE,CLIENT_LOCN_NAME,CLIENT_NAME,ADDRESS_1,ADDRESS_2,ADDRESS_3,CITY,PROVINCE,POSTAL_CODE,COUNTRY,BUSINESS_PHONE,HOME_PHONE,PHONE_1,PHONE_2,FAX_NUMBER,CLIENT_STATUS_ST,PRI_CONTACT_IND,CLIENT_ACRONYM)
AS
SELECT
 A.CLIENT_NUMBER,
 A.CLIENT_LOCN_CODE,
 A.TSC_CLI_TYPE_CD,
 A.CONTACT_NAME,
 A.CONTACT_TITLE,
 B.CLIENT_LOCN_NAME,
 substr(cns_fn_GET_CLIENT_NAME(A.CLIENT_NUMBER,NULL),1,100),
 B.ADDRESS_1,
 B.ADDRESS_2,
 B.ADDRESS_3,
 B.CITY,
 B.PROVINCE,
 B.POSTAL_CODE,
 B.COUNTRY,
 B.BUSINESS_PHONE,
 B.HOME_PHONE,
 A.PHONE_1,
 A.PHONE_2,
 A.FAX_NUMBER,
 A.CLIENT_STATUS_ST,
 A.PRI_CONTACT_IND,
 C.CLIENT_ACRONYM
FROM
 CNS_T_TSC_CLI_CONTACT A,
 CNS_T_CLIENT_LOCATION B,
 CNS_T_CLIENT_ACRONYM C
WHERE
    B.CLIENT_NUMBER  = A.CLIENT_NUMBER
AND B.CLIENT_LOCN_CODE  = A.CLIENT_LOCN_CODE
AND C.CLIENT_NUMBER = A.CLIENT_NUMBER
AND A.MAIL_ADDR_TYPE_CD = 'C'
AND A.CONTACT_NAME <> 'NO NAME'
UNION
SELECT
 A.CLIENT_NUMBER,
 A.CLIENT_LOCN_CODE,
 A.TSC_CLI_TYPE_CD,
 A.CONTACT_NAME,
 A.CONTACT_TITLE,
 B.CLIENT_LOCN_NAME,
 substr(cns_fn_GET_CLIENT_NAME(A.CLIENT_NUMBER,NULL),1,100),
 C.SHIP_ADDRESS_1,
 C.SHIP_ADDRESS_2,
 C.SHIP_ADDRESS_3,
 C.SHIP_TO_CITY,
 C.SHIP_PROVINCE,
 C.SHIP_POSTAL_CODE,
 C.SHIP_COUNTRY,
 B.BUSINESS_PHONE,
 B.HOME_PHONE,
 A.PHONE_1,
 A.PHONE_2,
 A.FAX_NUMBER,
 A.CLIENT_STATUS_ST,
 A.PRI_CONTACT_IND,
 D.CLIENT_ACRONYM
FROM
 CNS_T_TSC_CLI_CONTACT A,
 CNS_T_CLIENT_LOCATION B,
 CNS_T_TSC_CLIENT_INFO C,
 CNS_T_CLIENT_ACRONYM D
WHERE
    B.CLIENT_NUMBER  = A.CLIENT_NUMBER
AND B.CLIENT_LOCN_CODE  = A.CLIENT_LOCN_CODE
AND C.CLIENT_NUMBER = A.CLIENT_NUMBER
AND A.MAIL_ADDR_TYPE_CD = 'S'
AND A.CONTACT_NAME <> 'NO NAME'
AND D.CLIENT_NUMBER = C.CLIENT_NUMBER
UNION
SELECT
 A.CLIENT_NUMBER,
 A.CLIENT_LOCN_CODE,
 A.TSC_CLI_TYPE_CD,
 A.CONTACT_NAME,
 A.CONTACT_TITLE,
 B.CLIENT_LOCN_NAME,
 substr(cns_fn_GET_CLIENT_NAME(A.CLIENT_NUMBER,NULL),1,100),
 C.BILL_ADDRESS_1,
 C.BILL_ADDRESS_2,
 C.BILL_ADDRESS_3,
 C.BILL_TO_CITY,
 C.BILL_PROVINCE,
 C.BILL_POSTAL_CODE,
 C.BILL_COUNTRY,
 B.BUSINESS_PHONE,
 B.HOME_PHONE,
 A.PHONE_1,
 A.PHONE_2,
 A.FAX_NUMBER,
 A.CLIENT_STATUS_ST,
 A.PRI_CONTACT_IND,
 D.CLIENT_ACRONYM
FROM
 CNS_T_TSC_CLI_CONTACT A,
 CNS_T_CLIENT_LOCATION B,
 CNS_T_TSC_CLIENT_INFO C,
 CNS_T_CLIENT_ACRONYM D
WHERE
    B.CLIENT_NUMBER  = A.CLIENT_NUMBER
AND B.CLIENT_LOCN_CODE  = A.CLIENT_LOCN_CODE
AND C.CLIENT_NUMBER = A.CLIENT_NUMBER
AND A.MAIL_ADDR_TYPE_CD = 'B'
AND A.CONTACT_NAME <> 'NO NAME'
AND D.CLIENT_NUMBER = C.CLIENT_NUMBER;


-- CONSEP.CNSL97 source

CREATE OR REPLACE VIEW CONSEP.CNSL97
(RIA_SKEY,REQUEST_TYPE_ST,REQUEST_ID,SEED_WITHDRAWAL_DATE,ACTIVITY_TYPE_CD,FAMILY_LOT_NUMBER,SEEDLOT_NUMBER,SEEDLOTDISPLAY,REQ_YR,TEST_CATEGORY_CD,GERM_TEST_IND,RE_SAMPLE_IND,STNDRD_ACTIVITY_ID)
AS
SELECT a.ria_skey, request_type_st, b.request_id, a.seed_withdrawal_date,
          a.activity_type_cd, b.family_lot_number, b.seedlot_number,
          NVL (family_lot_number, seedlot_number),
          DECODE (request_type_st, 'SRQ', sowing_yr, request_yr) AS req_yr,
          a.test_category_cd, NVL2 (seedlot_test_code, 'Y',
                                    'N') germ_test_ind, re_sample_ind, STNDRD_ACTIVITY_ID
     FROM cns_t_tsc_test_result a,
          cns_t_rqst_itm_actvty b,
          cns_t_spar_request c,
          cns_t_test_regime d
    WHERE a.ria_skey = b.ria_skey
      AND c.request_skey = b.request_skey
      AND d.seedlot_test_code(+) = a.activity_type_cd
      AND a.accept_result_ind = 0
      AND a.test_complete_ind = 0
      AND c.spr_rqst_status_st != 'CAN';


-- CONSEP.CNSLB04_ORIGGERMTESTS source

CREATE OR REPLACE VIEW CONSEP.CNSLB04_ORIGGERMTESTS
(SEEDLOT_NUMBER,VEGETATION_ST,GENETIC_CLASS_CODE,ORIGINAL_SEED_QTY,EXTRACTION_VOLUME,GERMINATION_PCT,GERMINATION_VALUE,PEAK_VALUE_GRM_PCT,PEAK_VALUE_NO_DAYS,SEEDS_PER_GRAM,CLCTN_END_DT,ACTIVITY_TYPE_CD)
AS
select s.seedlot_number, s.vegetation_st, s.genetic_class_code,
s.original_seed_qty, s.extraction_volume, t.germination_pct,
t.germination_value, t.peak_value_grm_pct, t.peak_value_no_days,
t.seeds_per_gram, s.clctn_end_dt, r.activity_type_cd
from consep.cns_t_seedlot s,
consep.cns_t_rqst_itm_actvty r,
consep.cns_t_tsc_test_result t
where s.seedlot_status_st in ('COM','EXP','PND','APP')
and   s.seedlot_number = r.seedlot_number
and   t.test_rank = 'A'
and   s.extraction_volume > 0.01
and   t.test_category_cd = 'STD'
and   r.ria_skey = t.ria_skey
and   ((r.activity_type_cd <> 'GSA' )  or (r.activity_type_cd <> 'GSE'))
and   r.actual_end_dt_tm =
(select min(actual_end_dt_tm)
from  consep.cns_t_rqst_itm_actvty r1,
consep.cns_t_tsc_test_result t1
where r1.seedlot_number = s.seedlot_number
and   ((r1.activity_type_cd <> 'GSA') or (r1.activity_type_cd <> 'GSE'))
and   t1.ria_skey = r1.ria_skey
and   t1.test_category_cd = 'STD'
and   t1.test_rank = 'A');


-- CONSEP.CNSLB04_ORIGSPGTESTS source

CREATE OR REPLACE VIEW CONSEP.CNSLB04_ORIGSPGTESTS
(SEEDLOT_NUMBER,VEGETATION_ST,GENETIC_CLASS_CODE,ORIGINAL_SEED_QTY,EXTRACTION_VOLUME,GERMINATION_PCT,GERMINATION_VALUE,PEAK_VALUE_GRM_PCT,PEAK_VALUE_NO_DAYS,SEEDS_PER_GRAM,CLCTN_END_DT,ACTIVITY_TYPE_CD)
AS
select s.seedlot_number, s.vegetation_st, s.genetic_class_code,
s.original_seed_qty, s.extraction_volume, t.germination_pct,
t.germination_value, t.peak_value_grm_pct, t.peak_value_no_days,
t.seeds_per_gram, s.clctn_end_dt, r.activity_type_cd
from consep.cns_t_seedlot s,
consep.cns_t_rqst_itm_actvty r,
consep.cns_t_tsc_test_result t
where s.seedlot_status_st in ('COM','EXP','PND','APP')
and   s.extraction_volume > 0.01
and   r.seedlot_number = s.seedlot_number
and   r.activity_type_cd = 'SPG'
and   t.ria_skey = r.ria_skey
and   t.accept_result_ind = -1
and   t.test_category_cd = 'STD'
and   r.actual_end_dt_tm =
(select min(actual_end_dt_tm)
from  consep.cns_t_rqst_itm_actvty r1,
consep.cns_t_tsc_test_result t1
where r1.seedlot_number = s.seedlot_number
and   r1.activity_type_cd = 'SPG'
and   t1.ria_skey = r1.ria_skey
and   t1.accept_result_ind = -1
and   t1.test_category_cd = 'STD');


-- CONSEP.CNSLR04_STOCKCOUNTS_FAM source

CREATE OR REPLACE VIEW CONSEP.CNSLR04_STOCKCOUNTS_FAM
(SEEDLOT_NUMBER,VEGETATION_ST,COUNT_DT_TM,COUNT_COMPLETE_IND,BALANCE_APPRVD_IND,QUANTITY_OF_SEED,QTY_OUTAGE,TOTALFORSEEDLOT,STATUS,SEEDLOT_DISPLAY,EMP_NAME,OPENING_BAL_IND,PHYSBAL_COMMENT)
AS
SELECT DISTINCT SL.FAMILY_lot_NUMBER, SL.VEGETATION_ST, BAL.COUNT_DT_TM, BAL.COUNT_COMPLETE_IND,
BAL.BALANCE_APPRVD_IND, BAL.QUANTITY_OF_SEED, BAL.QTY_OUTAGE, QUANTITY_OF_SEED-QTY_OUTAGE AS TotalForSeedlot,
sl_sta.STATUS,
sl.family_lot_number AS SEEDLOT_DISPLAY,
EMP_NAME_LAST || ' , ' || EMP_NAME_FIRST AS EMP_NAME, OPENING_BAL_IND, PHYSBAL_COMMENT
FROM
CNS_T_FAMILY_LOT SL, CNS_T_FAMILYLOT_PHYSBAL BAL, FAMILYLOT_STATUS SL_STA,CNS_T_TSC_EMPLOYEE EMP
where
bal.family_lot_number = sl.family_lot_number
and sl.family_lot_number = sl_sta.family_lot_number
and bal.COUNT_BY_EMP_NO = EMP.EMP_NUMBER;


-- CONSEP.CNSLR04_STOCKCOUNTS_SL source

CREATE OR REPLACE VIEW CONSEP.CNSLR04_STOCKCOUNTS_SL
(SEEDLOT_NUMBER,VEGETATION_ST,COUNT_DT_TM,COUNT_COMPLETE_IND,BALANCE_APPRVD_IND,QUANTITY_OF_SEED,QTY_OUTAGE,TOTALFORSEEDLOT,STATUS,SEEDLOT_DISPLAY,EMP_NAME,OPENING_BAL_IND,PHYSBAL_COMMENT)
AS
SELECT DISTINCT SL.SEEDLOT_NUMBER, SL.VEGETATION_ST, BAL.COUNT_DT_TM, BAL.COUNT_COMPLETE_IND,
BAL.BALANCE_APPRVD_IND, BAL.QUANTITY_OF_SEED, BAL.QTY_OUTAGE, QUANTITY_OF_SEED-QTY_OUTAGE AS TotalForSeedlot,
sl_sta.STATUS,
 DECODE (sl.registerd_seed_ind,
                                -1, sl.seedlot_number,
                                sl.seedlot_number || 'U'
                               ) AS SEEDLOT_DISPLAY,
EMP_NAME_LAST || ' , ' || EMP_NAME_FIRST AS EMP_NAME, OPENING_BAL_IND, PHYSBAL_COMMENT
FROM
CNS_T_SEEDLOT SL, CNS_T_SEEDLOT_PHYSBAL BAL, SEEDLOT_STATUS SL_STA,CNS_T_TSC_EMPLOYEE EMP
where
bal.seedlot_number = sl.seedlot_number
and sl.seedlot_number = sl_sta.seedlot_number
and bal.COUNT_BY_EMP_NO = EMP.EMP_NUMBER;


-- CONSEP.CNSLR04_STOCKCOUNTS_UNION source

CREATE OR REPLACE VIEW CONSEP.CNSLR04_STOCKCOUNTS_UNION
(SEEDLOT_NUMBER,VEGETATION_ST,COUNT_DT_TM,COUNT_COMPLETE_IND,BALANCE_APPRVD_IND,QUANTITY_OF_SEED,QTY_OUTAGE,TOTALFORSEEDLOT,STATUS,SEEDLOT_DISPLAY,EMP_NAME,OPENING_BAL_IND,PHYSBAL_COMMENT)
AS
SELECT SL.SEEDLOT_NUMBER, SL.VEGETATION_ST, SL.COUNT_DT_TM, SL.COUNT_COMPLETE_IND,
SL.BALANCE_APPRVD_IND, SL.QUANTITY_OF_SEED, SL.QTY_OUTAGE, SL.TotalForSeedlot,
sl.STATUS, Sl.SEEDLOT_DISPLAY, SL.EMP_NAME, SL.OPENING_BAL_IND, SL.PHYSBAL_COMMENT
FROM CNSLR04_STOCKCOUNTS_SL SL
UNION
SELECT FAM.SEEDLOT_NUMBER, FAM.VEGETATION_ST, FAM.COUNT_DT_TM, FAM.COUNT_COMPLETE_IND,
FAM.BALANCE_APPRVD_IND, FAM.QUANTITY_OF_SEED, FAM.QTY_OUTAGE, FAM.TotalForSeedlot,
FAM.STATUS, FAM.SEEDLOT_DISPLAY, FAM.EMP_NAME, FAM.OPENING_BAL_IND, FAM.PHYSBAL_COMMENT
FROM CNSLR04_STOCKCOUNTS_FAM FAM;


-- CONSEP.CNSLR58 source

CREATE OR REPLACE VIEW CONSEP.CNSLR58
(GERMINATOR_TRAY_ID,ACTIVITY_TYPE_CD,ACTUAL_START_DATE,DATE_CREATED,GERMINATOR_ID,SPECIES,GERMINATOR_TEMPERATURE,TEST_CATEGORY)
AS
SELECT  GERMINATOR_TRAY_ID
       , A.ACTIVITY_TYPE_CD
       , A.ACTUAL_START_DATE
       , A.DATE_CREATED
       , A.GERMINATOR_ID
       , SUBSTR(Cns_Fn_get_germ_tray_species(A.GERMINATOR_TRAY_ID),1,100)
       , B.GERMINATOR_TEMPERATURE
	   , SUBSTR(Cns_Fn_Get_category_string(A.GERMINATOR_TRAY_ID),1,100)
FROM CNS_T_GERMINATOR_TRAY A,
     CNS_T_TEST_REGIME B
WHERE A.ACTIVITY_TYPE_CD = B.SEEDLOT_TEST_CODE;


-- CONSEP.CNSLR58GERMTESTRECORD source

CREATE OR REPLACE VIEW CONSEP.CNSLR58GERMTESTRECORD
(GERMINATOR_TRAY_ID,ACTIVITY_TYPE_CD,ACTUAL_START_DATE,DATE_CREATED,SPECIES,REQUEST_ID,SEEDLOT_NUMBER,SOAK_START_DATE,SOAK_END_DATE,SEED_WITHDRAWAL_DATE,WARM_STRAT_START_DATE,DRYBACK_START_DATE,GERMINATOR_ENTRY,STRAT_START_DT,GERMINATOR_ID,STNDRD_ACTIVITY_ID,TEST_CATEGORY_CD,ORIGINAL_TEST_IND,ARANKGERMTYPE,COUNT_DATES,COUNT_MONTH,ARANKGERMRESULT,ARANKGERMDATE,CAL,FUS,SIR,MC,SLSPECIES)
AS
SELECT tray.germinator_tray_id, tray.ACTIVITY_TYPE_CD,
       tray.ACTUAL_START_DATE, tray.DATE_CREATED,
       SUBSTR(Cns_Fn_Get_Germ_Tray_Species(tray.GERMINATOR_TRAY_ID),1,100),
       ria.request_id,
       NVL(ria.family_lot_number,ria.seedlot_number),
       ria.actual_begin_dt_tm,
       ria.actual_begin_dt_tm + NVL(regime.soak_hours,0)/24,
       test.seed_withdrawal_date, test.warm_strat_start_date,
       test.dryback_start_date, test.germinator_entry, test.strat_start_dt,
       test.GERMINATOR_ID,ria.STNDRD_ACTIVITY_ID,
       SUBSTR(Cns_Fn_Get_category_string(tray.GERMINATOR_TRAY_ID),1,100),
       test.ORIGINAL_TEST_IND,germ.ACTIVITY_TYPE_CD,
       Cns_Fn_Get_Count_Days(test.GERMINATOR_ENTRY,test.ACTIVITY_TYPE_CD),
       Cns_Fn_Get_Count_month(test.GERMINATOR_ENTRY+3,test.ACTIVITY_TYPE_CD),
       germ.germination_pct,germ.ACTUAL_END_DT_TM,
       cns_fn_get_current_cal(lot.SEEDLOT_NUMBER),
       cns_fn_get_current_fus(lot.SEEDLOT_NUMBER),
       cns_fn_get_current_sir(lot.SEEDLOT_NUMBER),
       cns_fn_get_current_mc(lot.SEEDLOT_NUMBER),
	   lot.vegetation_st
FROM CNS_T_RQST_ITM_ACTVTY ria,
     CNS_T_GERMINATOR_TRAY tray,
     CNS_T_TSC_TEST_RESULT test,
     CNS_T_TEST_REGIME regime,
     CNS_T_SPAR_REQUEST spar,
     CNS_T_SEEDLOT lot,
     RANKAGERM germ
WHERE
     test.ria_skey = ria.ria_skey
AND  test.germinator_tray_id = tray.germinator_tray_id
AND  regime.seedlot_test_code (+) = test.activity_type_cd
AND  spar.request_skey = ria.request_skey
AND  test.germinator_tray_id IS NOT NULL
AND  ria.seedlot_number = lot.seedlot_number (+)
AND  lot.SEEDLOT_NUMBER = germ.seedlot_number (+);


-- CONSEP.CNSLR88 source

CREATE OR REPLACE VIEW CONSEP.CNSLR88
(LETTER,CLIENT_NAME,CLIENT_NUMBER,CLIENT_LOCN_CODE,TSC_CLI_TYPE_CD,PRI_CONTACT_IND,CONTACT_NAME,CLIENT_LOCN_NAME,ADDRESS_1,ADDRESS_2,ADDRESS_3,CITY,PROVINCE,COUNTRY,POSTAL_CODE,PHONE_1,PHONE_2,FAX_NUMBER,CLIENT_STATUS_ST,CONTACT_COMMENT,EMAIL_ADDRESS,CLIENT_ACRONYM,P1_EXT,P2_EXT)
AS
SELECT
SUBSTR(cns_fn_GET_CLIENT_NAME(c.CLIENT_NUMBER, NULL),1,1),
SUBSTR(cns_fn_GET_CLIENT_NAME(c.CLIENT_NUMBER, NULL),1,100),
c.CLIENT_NUMBER,
c.CLIENT_LOCN_CODE,
b.TSC_CLI_TYPE_CD,
b.PRI_CONTACT_IND,
b.CONTACT_NAME,
a.CLIENT_LOCN_NAME,
a.ADDRESS_1,
a.ADDRESS_2,
a.ADDRESS_3,
a.CITY,
a.PROVINCE,
a.COUNTRY,
a.POSTAL_CODE,
b.PHONE_1,
b.PHONE_2,
b.FAX_NUMBER,
b.CLIENT_STATUS_ST,
b.CONTACT_COMMENT,
b.EMAIL_ADDRESS,
cns_fn_GET_CLIENT_ACRONYM(c.CLIENT_NUMBER, NULL),
PHONE_1_EXT,
PHONE_2_EXT
FROM
   CNS_L_CLIENT_LOCATION a,
   CNS_L_TSC_CLI_CONTACT b,
   CNS_L_TSC_CLIENT_INFO c
WHERE   c.CLIENT_NUMBER = a.CLIENT_NUMBER
AND     c.CLIENT_LOCN_CODE = a.CLIENT_LOCN_CODE
AND b.CLIENT_NUMBER (+)  = c.CLIENT_NUMBER
AND b.CLIENT_LOCN_CODE (+)   = c.CLIENT_LOCN_CODE
AND b.CONTACT_NAME (+) <> 'NO NAME';


-- CONSEP.CNSR01DETAILS source

CREATE OR REPLACE VIEW CONSEP.CNSR01DETAILS
(INHOUSE_INV_NO,SEEDLOT_NUMBER,SEEDLOT_NO,REQUEST_ID,ITEM_ID,GRAMS,TEST_GRAMS,LABEL_IND,INVENTORY_IND,SPCFIED_SOWING_DT,QTY_SEEDLINGS_RQST,REQUEST_SKEY,STOCK_TYPE_CNTR,CRITICAL_COMMENTS_IND,SOW_RQRD_DT,WITHDRAWAL_DATE,TREATMENT_DATE,TARGET_31_WT,TARGET_35_WT,BAG_CNT,HAS_QA_ACT,SL_LAB_CRIT_COMMENT)
AS
SELECT
--Modified July 2003 by mdellavi, suppress item_id display for SRQ/CSP type requests
          b.inhouse_inv_no, c.seedlot_number,
          DECODE (d.registerd_seed_ind,
                  -1, d.seedlot_number,
                  d.seedlot_number || 'U'
                 ) seedlot_no,
          DECODE
                (a.request_type_st,
                 'SRQ', a.sowing_yr
                  || SUBSTR (e.org_unit_code, 1, 3)
                  || LPAD (TO_CHAR (a.request_sequence), 4, '0')
                  || ' ',
                    a.request_type_st
                 || a.request_yr
                 || LPAD (TO_CHAR (a.request_sequence), 4, '0')
                 || SUBSTR (cns_fn_strip_item_id (a.request_type_st,
                                                  a.request_skey,
                                                  b.item_id
                                                 ),
                            1,
                            1
                           )
                ) request_id,
          SUBSTR (cns_fn_strip_item_id (a.request_type_st,
                                        a.request_skey,
                                        b.item_id
                                       ),
                  1,
                  1
                 ) item_id,
          c.rqst_from_reserve + c.rqst_from_surplus grams,
          c.rqst_test_reserve + c.rqst_test_surplus test_grams, b.label_ind,
          b.inventory_ind, b.spcfied_sowing_dt, a.qty_seedlings_rqst,
          b.request_skey,
          a.seedling_stktyp_cd || a.seedling_contnr_cd stock_type_cntr,
          cns_fn_critical_comments (b.request_skey, b.item_id),
          DECODE (a.request_type_st,
                  'SRQ', DECODE (b.spcfied_sowing_dt,
                                 NULL, b.rcmnded_sowing_dt,
                                 b.spcfied_sowing_dt
                                ),
                  a.required_by_dt
                 ) sow_rqrd_dt,
          cns_fn_get_withdrawal_date (b.request_skey, b.item_id),
          cns_fn_get_treatment_date (b.request_skey, b.item_id),

-- Sept 24 2004 MP - Add G55 to 31_wt and 35_wt0
          DECODE (f.stndrd_activity_id,
                  'S64', (  (  c.rqst_from_reserve
                             + c.rqst_from_surplus
                             + c.rqst_test_surplus
                             + c.rqst_test_reserve
                            )
                          * (1 - f.mc / 100)
                          / 69
                      )
                   * 100,
                  'S55', (  (  c.rqst_from_reserve
                             + c.rqst_from_surplus
                             + c.rqst_test_surplus
                             + c.rqst_test_reserve
                            )
                          * (1 - f.mc / 100)
                          / 66
                      )
                   * 100,
                  NULL
                 ) target_31_wt,
          DECODE (f.stndrd_activity_id,
                  'S64', (  (  c.rqst_from_reserve
                             + c.rqst_from_surplus
                             + c.rqst_test_surplus
                             + c.rqst_test_reserve
                            )
                          * (1 - f.mc / 100)
                          / 65
                      )
                   * 100,
                  'S55', (  (  c.rqst_from_reserve
                             + c.rqst_from_surplus
                             + c.rqst_test_surplus
                             + c.rqst_test_reserve
                            )
                          * (1 - f.mc / 100)
                          / 60
                      )
                   * 100,
                  NULL
                 ) target_35_wt,
          cns_fn_get_bags (d.vegetation_st,
                           c.rqst_from_reserve + c.rqst_from_surplus
                          ),
          g.qa_ind, cns_fn_lab_critical_comm(c.seedlot_number)
     FROM cns_t_spar_request a,
          cns_t_request_item b,
          cns_t_request_seedlot c,
          cns_t_seedlot d,
          cns_t_org_unit e,
          cnsr01_s64_s55_mc f,
          req_has_qa_act g
    WHERE b.request_skey = a.request_skey
      AND b.request_skey = c.request_skey
      AND b.item_id = c.item_id
      AND b.request_skey = f.request_skey(+)
      AND b.item_id = f.item_id(+)
      AND a.org_unit_no = e.org_unit_no(+)
      AND c.seedlot_number = d.seedlot_number
      AND b.inhouse_inv_no IS NOT NULL
      AND b.request_skey = g.request_skey
      AND b.item_id = g.item_id;


-- CONSEP.CNSR01DETAILS_ORIG source

CREATE OR REPLACE VIEW CONSEP.CNSR01DETAILS_ORIG
(INHOUSE_INV_NO,SEEDLOT_NUMBER,SEEDLOT_NO,REQUEST_ID,ITEM_ID,GRAMS,TEST_GRAMS,LABEL_IND,INVENTORY_IND,SPCFIED_SOWING_DT,QTY_SEEDLINGS_RQST,REQUEST_SKEY,STOCK_TYPE_CNTR,CRITICAL_COMMENTS_IND,SOW_RQRD_DT,WITHDRAWAL_DATE,TREATMENT_DATE,TARGET_31_WT,TARGET_35_WT,BAG_CNT,HAS_QA_ACT)
AS
SELECT
--Modified July 2003 by mdellavi, suppress item_id display for SRQ/CSP type requests
          b.inhouse_inv_no, c.seedlot_number,
          DECODE (d.registerd_seed_ind,
                  -1, d.seedlot_number,
                  d.seedlot_number || 'U'
                 ) seedlot_no,
          DECODE
                (a.request_type_st,
                 'SRQ', a.sowing_yr
                  || SUBSTR (e.org_unit_code, 1, 3)
                  || LPAD (TO_CHAR (a.request_sequence), 4, '0')
                  || ' ',
                    a.request_type_st
                 || a.request_yr
                 || LPAD (TO_CHAR (a.request_sequence), 4, '0')
                 || SUBSTR (cns_fn_strip_item_id (a.request_type_st,
                                                  a.request_skey,
                                                  b.item_id
                                                 ),
                            1,
                            1
                           )
                ) request_id,
          SUBSTR (cns_fn_strip_item_id (a.request_type_st,
                                        a.request_skey,
                                        b.item_id
                                       ),
                  1,
                  1
                 ) item_id,
          c.rqst_from_reserve + c.rqst_from_surplus grams,
          c.rqst_test_reserve + c.rqst_test_surplus test_grams, b.label_ind,
          b.inventory_ind, b.spcfied_sowing_dt, a.qty_seedlings_rqst,
          b.request_skey,
          a.seedling_stktyp_cd || a.seedling_contnr_cd stock_type_cntr,
          cns_fn_critical_comments (b.request_skey, b.item_id),
          DECODE (a.request_type_st,
                  'SRQ', DECODE (b.spcfied_sowing_dt,
                                 NULL, b.rcmnded_sowing_dt,
                                 b.spcfied_sowing_dt
                                ),
                  a.required_by_dt
                 ) sow_rqrd_dt,
          cns_fn_get_withdrawal_date (b.request_skey, b.item_id),
          cns_fn_get_treatment_date (b.request_skey, b.item_id),

-- Sept 24 2004 MP - Add G55 to 31_wt and 35_wt0
          DECODE (f.stndrd_activity_id,
                  'S64', (  (  c.rqst_from_reserve
                             + c.rqst_from_surplus
                             + c.rqst_test_surplus
                             + c.rqst_test_reserve
                            )
                          * (1 - f.mc / 100)
                          / 69
                      )
                   * 100,
                  'S55', (  (  c.rqst_from_reserve
                             + c.rqst_from_surplus
                             + c.rqst_test_surplus
                             + c.rqst_test_reserve
                            )
                          * (1 - f.mc / 100)
                          / 66
                      )
                   * 100,
                  NULL
                 ) target_31_wt,
          DECODE (f.stndrd_activity_id,
                  'S64', (  (  c.rqst_from_reserve
                             + c.rqst_from_surplus
                             + c.rqst_test_surplus
                             + c.rqst_test_reserve
                            )
                          * (1 - f.mc / 100)
                          / 65
                      )
                   * 100,
                  'S55', (  (  c.rqst_from_reserve
                             + c.rqst_from_surplus
                             + c.rqst_test_surplus
                             + c.rqst_test_reserve
                            )
                          * (1 - f.mc / 100)
                          / 60
                      )
                   * 100,
                  NULL
                 ) target_35_wt,
          cns_fn_get_bags (d.vegetation_st,
                           c.rqst_from_reserve + c.rqst_from_surplus
                          ),
          g.qa_ind
     FROM cns_t_spar_request a,
          cns_t_request_item b,
          cns_t_request_seedlot c,
          cns_t_seedlot d,
          cns_t_org_unit e,
          (SELECT request_skey, item_id, stndrd_activity_id, activity_type_cd,
                  cns_fn_get_current_mc (ria.seedlot_number) mc
             FROM cns_t_rqst_itm_actvty ria
            WHERE stndrd_activity_id IN ('S64', 'S55')) f,
          req_has_qa_act g
    WHERE b.request_skey = a.request_skey
      AND b.request_skey = c.request_skey
      AND b.item_id = c.item_id
      AND b.request_skey = f.request_skey(+)
      AND b.item_id = f.item_id(+)
      AND a.org_unit_no = e.org_unit_no(+)
      AND c.seedlot_number = d.seedlot_number
      AND b.inhouse_inv_no IS NOT NULL
      AND b.request_skey = g.request_skey
      AND b.item_id = g.item_id;


-- CONSEP.CNSR01_S64_S55_MC source

CREATE OR REPLACE VIEW CONSEP.CNSR01_S64_S55_MC
(REQUEST_SKEY,ITEM_ID,STNDRD_ACTIVITY_ID,ACTIVITY_TYPE_CD,MC)
AS
SELECT request_skey, item_id, stndrd_activity_id, activity_type_cd,
                  cns_fn_get_current_mc (ria.seedlot_number) mc
             FROM cns_t_rqst_itm_actvty ria
            WHERE stndrd_activity_id IN ('S64', 'S55');


-- CONSEP.CNSR02_ASSIGNED_INV source

CREATE OR REPLACE VIEW CONSEP.CNSR02_ASSIGNED_INV
(INVENTORY_SKEY,SEEDLOT_NUMBER,REQUEST_SKEY,INVLOCATION)
AS
SELECT
	a.INVENTORY_SKEY,
	a.SEEDLOT_NUMBER,
	a.REQUEST_SKEY,
	RPAD(MAX(b.TO_SECTION_ID),3,' ')||'-'||RPAD(MAX(b.TO_SHELF_ID),1,' ')||'-'||RPAD(MAX(b.TO_POSITION_ID),3,' ')
FROM
	CNS_T_ASSIGNED_INV_DT a,
	CNS_T_ASSIGND_INV_LOC b
WHERE
	b.INVENTORY_SKEY = a.INVENTORY_SKEY
and	a.STORAGE_END_DT_TM is null
and a.REQUEST_SKEY is null
GROUP BY
	a.INVENTORY_SKEY,
	a.SEEDLOT_NUMBER,
	a.REQUEST_SKEY;


-- CONSEP.CNSR02_LABEL source

CREATE OR REPLACE VIEW CONSEP.CNSR02_LABEL
(INHOUSE_INV_NO,CLIENT_NAME,CLIENT_LOCN,CLIENT_ACRONYM,SEEDLOT,SEEDLING_STKTYP_CD,SEEDLING_CONTNR_CD,REQUEST_ID,GRAMS,TEST_GRAMS,GERMINATION_PCT,SEEDLOT_TEST_CODE,SPECIES,REQUEST_SKEY,ITEM_ID,SOWING_REQUIRED_DATE,DRY,SEEDLOT_NUMBER)
AS
SELECT
--Modified July 2003 by mdellavi, suppress item_id display for SRQ/CSP type requests
i.INHOUSE_INVNTRY_ID,
Cns_Fn_Get_Client_Name(i.SHIP_TO_CLI_NUMBER, ri.NRSRY_CLI_NUMBER),
DECODE(i.SHIP_TO_CLI_NUMBER,NULL,ri.NRSRY_CLI_LOCN_CD,i.SHIP_TO_CLI_LOC_CD),
cns_fn_get_cli_nurs_acronym(decode(i.SHIP_TO_CLI_NUMBER,NULL,ri.NRSRY_CLI_NUMBER,i.SHIP_TO_CLI_NUMBER),decode(i.SHIP_TO_CLI_NUMBER, NULL,ri.NRSRY_CLI_LOCN_CD,i.SHIP_TO_CLI_LOC_CD)),
DECODE(s.REGISTERD_SEED_IND,-1,rs.SEEDLOT_NUMBER,rs.SEEDLOT_NUMBER||'U'),
r.SEEDLING_STKTYP_CD, r.SEEDLING_CONTNR_CD,
DECODE(r.REQUEST_TYPE_ST,'SRQ',r.SOWING_YR||SUBSTR(o.ORG_UNIT_CODE,1,3)||
LPAD(TO_CHAR(r.REQUEST_SEQUENCE),4,'0')||' ', r.REQUEST_TYPE_ST||
r.REQUEST_YR||LPAD(TO_CHAR(r.REQUEST_SEQUENCE),4,'0')
||SUBSTR(Cns_Fn_Strip_Item_Id(r.request_type_st,r.request_skey,ri.ITEM_ID),1,1)),
rs.RQST_FROM_RESERVE + rs.RQST_FROM_SURPLUS,
rs.RQST_TEST_RESERVE + rs.RQST_TEST_SURPLUS,
rs.GERMINATION_PCT, rs.SEEDLOT_TEST_CODE,
s.VEGETATION_ST,
r.REQUEST_SKEY,
SUBSTR(Cns_Fn_Strip_Item_Id(r.request_type_st,r.request_skey,ri.ITEM_ID),1,1),
DECODE(ri.REQUIRED_BY_DT,NULL,
DECODE(ri.SPCFIED_SOWING_DT,NULL,
ri.RCMNDED_SOWING_DT,ri.SPCFIED_SOWING_DT),
ri.REQUIRED_BY_DT),
DECODE(ria.ACTIVITY_TYPE_CD,NULL,'DRY',
DECODE(i.SEEDLOT_TEST_CODE,'D1','DRY',NULL)),
s.SEEDLOT_NUMBER
FROM
   CNS_T_INHOUSE_INVNTRY i,
   CNS_T_SPAR_REQUEST r,
   CNS_T_ORG_UNIT o,
   CNS_T_REQUEST_ITEM ri,
   CNS_T_REQUEST_SEEDLOT rs,
   CNS_T_SEEDLOT s,
   CNS_T_RQST_ITM_ACTVTY ria
WHERE   i.INHOUSE_INVNTRY_ID = ri.INHOUSE_INV_NO
AND     r.REQUEST_SKEY       = ri.REQUEST_SKEY
AND     r.SPR_RQST_STATUS_ST <> 'CAN'
AND     r.ORG_UNIT_NO        = o.ORG_UNIT_NO
AND     ri.REQUEST_SKEY      = rs.REQUEST_SKEY
AND     ri.ITEM_ID           = rs.ITEM_ID
AND     rs.SEEDLOT_NUMBER    = s.SEEDLOT_NUMBER
AND     ria.REQUEST_SKEY (+) = ri.REQUEST_SKEY
AND     ria.ITEM_ID      (+) = ri.ITEM_ID
AND     ria.ACTIVITY_TYPE_CD (+) = 'STR'
AND     ria.SIGNIFICNT_STS_IND (+) = -1;


-- CONSEP.CNSR02_LASER_LABEL source

CREATE OR REPLACE VIEW CONSEP.CNSR02_LASER_LABEL
(INHOUSE_INV_NO,CLIENT_NAME,CLIENT_LOCN,CLIENT_ACRONYM,SEEDLOT,SEEDLING_STKTYP_CD,SEEDLING_CONTNR_CD,REQUEST_ID,GRAMS,TEST_GRAMS,GERMINATION_PCT,SEEDLOT_TEST_CODE,SPECIES,BAGS,REQUEST_SKEY,ITEM_ID,SOWING_REQUIRED_DATE,DRY,SEEDLOT_NUMBER,LABEL_IND,NO_LABELS,INVENTORYLOCATION,ACTIVITY_TYPE_CD,TEST_GERM_PCT,PV,SPG,CAL,FUS,SIR,GEN_CLASS,GEN_WORTH)
AS
SELECT
--Modified July 2003 by mdellavi, suppress item_id display for SRQ/CSP type requests
          i.inhouse_invntry_id,
          cns_fn_get_client_name (i.ship_to_cli_number, ri.nrsry_cli_number),
          DECODE (i.ship_to_cli_number,
                  NULL, ri.nrsry_cli_locn_cd,
                  i.ship_to_cli_loc_cd
                 ),
          cns_fn_get_cli_nurs_acronym (DECODE (i.ship_to_cli_number,
                                               NULL, ri.nrsry_cli_number,
                                               i.ship_to_cli_number
                                              ),
                                       DECODE (i.ship_to_cli_number,
                                               NULL, ri.nrsry_cli_locn_cd,
                                               i.ship_to_cli_loc_cd
                                              )
                                      ),
          DECODE (s.registerd_seed_ind,
                  -1, rs.seedlot_number,
                  rs.seedlot_number || 'U'
                 ),
          r.seedling_stktyp_cd, r.seedling_contnr_cd,
          DECODE (r.request_type_st,
                  'SRQ', r.sowing_yr
                   || SUBSTR (o.org_unit_code, 1, 3)
                   || LPAD (TO_CHAR (r.request_sequence), 4, '0')
                   || ' ',
                     r.request_type_st
                  || r.request_yr
                  || LPAD (TO_CHAR (r.request_sequence), 4, '0')
                  || SUBSTR (cns_fn_strip_item_id (r.request_type_st,
                                                   r.request_skey,
                                                   ri.item_id
                                                  ),
                             1,
                             1
                            )
                 ),
          rs.rqst_from_reserve + rs.rqst_from_surplus,
          rs.rqst_test_reserve + rs.rqst_test_surplus, rs.germination_pct,
          rs.seedlot_test_code, s.vegetation_st,
          cns_fn_get_bags (s.vegetation_st,
                           rs.rqst_from_reserve + rs.rqst_from_surplus
                          ),
          r.request_skey,
--SUBSTR(Cns_Fn_Strip_Item_Id(r.request_type_st,r.request_skey,ri.ITEM_ID),1,1) item_id,
                         ri.item_id,
          DECODE (ri.required_by_dt,
                  NULL, DECODE (ri.spcfied_sowing_dt,
                                NULL, ri.rcmnded_sowing_dt,
                                ri.spcfied_sowing_dt
                               ),
                  ri.required_by_dt
                 ),
          DECODE (ria.activity_type_cd,
                  NULL, 'DRY',
                  DECODE (i.seedlot_test_code, 'D1', 'DRY', NULL)
                 ),
          s.seedlot_number, ri.label_ind, ri.no_labels, inv.invlocation,
          TEST.activity_type_cd, TEST.germination_pct, pv, spg, cal, fus, sir,
             s.genetic_class_code
          || DECODE (NVL (s.superior_prvnc_ind, 0), -1, '+', ' '),

--gw.GENETIC_WORTH_RTNG
          cns_fn_gcw_string (rs.seedlot_number)
     FROM cns_t_inhouse_invntry i,
          cns_t_spar_request r,
          cns_t_org_unit o,
          cns_t_request_item ri,
          cns_t_request_seedlot rs,
          cns_t_seedlot s,
          cns_t_rqst_itm_actvty ria,
          cnsr02_assigned_inv inv,
          cnsr02_test_results TEST
--CNS_T_Genetic_Worth gw
   WHERE  i.inhouse_invntry_id = ri.inhouse_inv_no
      AND r.request_skey = ri.request_skey
      AND r.spr_rqst_status_st <> 'CAN'
      AND r.org_unit_no = o.org_unit_no
      AND ri.request_skey = rs.request_skey
      AND ri.item_id = rs.item_id
      AND rs.seedlot_number = s.seedlot_number
      AND ria.request_skey(+) = ri.request_skey
      AND ria.item_id(+) = ri.item_id
      AND ria.activity_type_cd(+) = 'STR'
      AND ria.stndrd_activity_id(+) <> 'E35'
      AND inv.seedlot_number = rs.seedlot_number
      AND TEST.seedlot_number = rs.seedlot_number
      AND ria.significnt_sts_ind(+) = -1
--and     gw.lot_number(+)    =  s.seedlot_number
--and     gw.GENETIC_WORTH_CODE(+)  <>'D';;;


-- CONSEP.CNSR02_TEST_RESULTS source

CREATE OR REPLACE VIEW CONSEP.CNSR02_TEST_RESULTS
(SEEDLOT_NUMBER,ACTIVITY_TYPE_CD,GERMINATION_PCT,PV,SPG,CAL,FUS,SIR)
AS
SELECT
s.SEEDLOT_NUMBER,
g.ACTIVITY_TYPE_CD,
g.GERMINATION_PCT,
g.PV,
cns_fn_get_current_spg(s.SEEDLOT_NUMBER),
cns_fn_get_current_cal(s.SEEDLOT_NUMBER),
cns_fn_get_current_fus(s.SEEDLOT_NUMBER),
cns_fn_get_current_sir(s.SEEDLOT_NUMBER)
FROM
	CNS_T_SEEDLOT s,
	RANKAGERM g
WHERE
	g.SEEDLOT_NUMBER (+) = s.SEEDLOT_NUMBER;


-- CONSEP.CNSR09_TESTHIST source

CREATE OR REPLACE VIEW CONSEP.CNSR09_TESTHIST
(SEEDLOT_SAMPLE,NURSERY_SHIPTO_ACRONYM,NURSERY_SHIPTO_LCON,REQ_ID,REQUEST_ITEM,ACTIVITY_TYPE_CD,STNDRD_ACTIVITY_ID,RIA_SKEY,SAMPLE_ID,SEEDLOT_NUMBER,FAMILY_LOT_NUMBER,VEGETATION_ST,ITEM_ID,ACTUAL_BEGIN_DT_TM,ACTUAL_END_DT_TM,ACCEPT_RESULT_IND,TEST_RANK,TEST_COMPLETE_IND,GERM_TEST_IND,TEST_CATEGORY_CD,GERMINATION_PCT,MOISTURE_PCT,GERMINATION_VALUE,PV,WEIGHT_PER_100,SEEDS_PER_GRAM,PURITY_PCT,OTHER_TEST_RESULT,SEED_WITHDRAWAL_DATE,SIGNIFICNT_STS_IND,PROCESS_COMMIT_IND,RIA_COMMENT,REQUEST_SKEY,REQUEST_TYPE_ST,REQUEST_YR,GRAMS,TEST_GRAMS,CURRENT_TEST_IND,REVISED_END_DT,SRQ_GC,DAYS_IN_STRAT)
AS
SELECT
--Modified July 2003 by mdellavi, suppress item_id display for SRQ/CSP type requests
          DECODE (a.seedlot_number,
                  '00000', c.family_lot_number,
                  NULL, c.sample_id,
                  DECODE (g.registerd_seed_ind,
                          -1, a.seedlot_number,
                          a.seedlot_number || 'U'
                         )
                 ),
          cns_fn_get_cli_nurs_acronym (DECODE (c.shipto_cli_number,
                                               NULL, DECODE
                                                        (c.nrsry_obligatn_ind,
                                                         -1, c.nrsry_cli_number,
                                                         NULL
                                                        ),
                                               c.shipto_cli_number
                                              ),
                                       DECODE (c.shipto_cli_locn_cd,
                                               NULL, DECODE
                                                        (c.nrsry_obligatn_ind,
                                                         -1, c.nrsry_cli_locn_cd,
                                                         NULL
                                                        ),
                                               c.shipto_cli_locn_cd
                                              )
                                      ),
          DECODE (c.shipto_cli_locn_cd,
                  NULL, DECODE (c.nrsry_obligatn_ind,
                                -1, c.nrsry_cli_locn_cd,
                                NULL
                               ),
                  c.shipto_cli_locn_cd
                 ),
          a.request_id,
             a.request_id
          || SUBSTR (cns_fn_strip_item_id (e.request_type_st,
                                           a.request_skey,
                                           a.item_id
                                          ),
                     1,
                     1
                    ),
          a.activity_type_cd, a.stndrd_activity_id, a.ria_skey, c.sample_id,
          a.seedlot_number, c.family_lot_number, a.vegetation_st,
-- Nov 2003 MP - Item_id required for consep
--SUBSTR(Cns_Fn_Strip_Item_Id(e.request_type_st,a.request_skey,a.ITEM_ID),1,1),
                                                                 a.item_id,
          TRUNC (a.actual_begin_dt_tm), TRUNC (a.actual_end_dt_tm),
          d.accept_result_ind, d.test_rank, d.test_complete_ind,
          cns_fn_get_germ_test_ind (a.activity_type_cd), a.test_category_cd,
          d.germination_pct, d.moisture_pct, d.germination_value,
          DECODE (d.peak_value_grm_pct || '//' || d.peak_value_no_days,
                  '//', NULL,
                  d.peak_value_grm_pct || '//' || d.peak_value_no_days
                 ),
          d.weight_per_100, d.seeds_per_gram, d.purity_pct,
          d.other_test_result, d.seed_withdrawal_date, a.significnt_sts_ind,
          a.process_commit_ind, a.ria_comment, c.request_skey,
          e.request_type_st,
          DECODE (e.request_type_st, 'SRQ', e.sowing_yr, e.request_yr),
          cns_fn_get_rqst_grams (c.request_skey, a.item_id),
          cns_fn_get_rqst_test_grams (c.request_skey, a.item_id),
          d.current_test_ind, TRUNC (a.revised_end_dt), req_gc,
            TRUNC (germinator_entry)
          - cns_fn_get_strat_start_date (a.request_skey, a.item_id)
     FROM cns_t_rqst_itm_actvty a,
          cns_t_request_item c,
          cns_t_tsc_test_result d,
          cns_t_spar_request e,
          cns_t_seedlot g,
          (SELECT   request_skey, item_id, MAX (germination_pct) AS req_gc
               FROM cns_t_request_seedlot rs
           GROUP BY request_skey, item_id) req_sl
    WHERE c.item_id = a.item_id
      AND c.request_skey(+) = a.request_skey
      AND g.seedlot_number(+) = a.seedlot_number
      AND d.ria_skey = a.ria_skey
      AND e.request_skey(+) = c.request_skey
      AND c.request_skey = req_sl.request_skey(+)
      AND c.item_id = req_sl.item_id(+)
   UNION
   SELECT "SEEDLOT_SAMPLE", "NURSERY_SHIPTO_ACRONYM", "NURSERY_SHIPTO_LCON",
          "REQ_ID", "REQUEST_ITEM", "ACTIVITY_TYPE_CD", "STNDRD_ACTIVITY_ID",
          "RIA_SKEY", "SAMPLE_ID", "SEEDLOT_NUMBER", "FAMILY_LOT_NUMBER",
          "VEGETATION_ST", "ITEM_ID", "ACTUAL_BEGIN_DT_TM",
          "ACTUAL_END_DT_TM", "ACCEPT_RESULT_IND", "TEST_RANK",
          "TEST_COMPLETE_IND", "GERM_TEST_IND", "TEST_CATEGORY_CD",
          "GERMINATION_PCT", "MOISTURE_PCT", "GERMINATION_VALUE", "PV",
          "WEIGHT_PER_100", "SEEDS_PER_GRAM", "PURITY_PCT",
          "OTHER_TEST_RESULT", "SEED_WITHDRAWAL_DATE", "SIGNIFICNT_STS_IND",
          "PROCESS_COMMIT_IND", "RIA_COMMENT", "REQUEST_SKEY",
          "REQUEST_TYPE_ST", "REQUEST_YR", "GRAMS", "TEST_GRAMS",
          "CURRENT_TEST_IND", "REVISED_END_DT", "SRQ_GC", "DAYS_IN_STRAT"
     FROM cnsr09_testhist_mmc;


-- CONSEP.CNSR09_TESTHIST_MMC source

CREATE OR REPLACE VIEW CONSEP.CNSR09_TESTHIST_MMC
(SEEDLOT_SAMPLE,NURSERY_SHIPTO_ACRONYM,NURSERY_SHIPTO_LCON,REQ_ID,REQUEST_ITEM,ACTIVITY_TYPE_CD,STNDRD_ACTIVITY_ID,RIA_SKEY,SAMPLE_ID,SEEDLOT_NUMBER,FAMILY_LOT_NUMBER,VEGETATION_ST,ITEM_ID,ACTUAL_BEGIN_DT_TM,ACTUAL_END_DT_TM,ACCEPT_RESULT_IND,TEST_RANK,TEST_COMPLETE_IND,GERM_TEST_IND,TEST_CATEGORY_CD,GERMINATION_PCT,MOISTURE_PCT,GERMINATION_VALUE,PV,WEIGHT_PER_100,SEEDS_PER_GRAM,PURITY_PCT,OTHER_TEST_RESULT,SEED_WITHDRAWAL_DATE,SIGNIFICNT_STS_IND,PROCESS_COMMIT_IND,RIA_COMMENT,REQUEST_SKEY,REQUEST_TYPE_ST,REQUEST_YR,GRAMS,TEST_GRAMS,CURRENT_TEST_IND,REVISED_END_DT,SRQ_GC,DAYS_IN_STRAT)
AS
SELECT
--Modified July 2003 by mdellavi, suppress item_id display for SRQ/CSP type requests
DECODE( a.SEEDLOT_NUMBER,'00000',c.FAMILY_LOT_NUMBER, NULL, c.SAMPLE_ID,
DECODE(g.REGISTERD_SEED_IND, -1,
a.SEEDLOT_NUMBER, a.SEEDLOT_NUMBER||'U')),
cns_fn_get_cli_nurs_acronym(DECODE(c.SHIPTO_CLI_NUMBER, NULL,
       DECODE(c.NRSRY_OBLIGATN_IND,-1,c.NRSRY_CLI_NUMBER,NULL),
       c.SHIPTO_CLI_NUMBER),DECODE
       (c.SHIPTO_CLI_LOCN_CD, NULL,
       DECODE(c.NRSRY_OBLIGATN_IND,-1,c.NRSRY_CLI_LOCN_CD,NULL),
       c.SHIPTO_CLI_LOCN_CD)),
DECODE(c.SHIPTO_CLI_LOCN_CD, NULL,
DECODE(c.NRSRY_OBLIGATN_IND,-1,c.NRSRY_CLI_LOCN_CD,NULL),
c.SHIPTO_CLI_LOCN_CD),
a.REQUEST_ID,
a.REQUEST_ID||SUBSTR(Cns_Fn_Strip_Item_Id(e.request_type_st,a.request_skey,a.ITEM_ID),1,1),
a.ACTIVITY_TYPE_CD,
a.STNDRD_ACTIVITY_ID,a.RIA_SKEY,
c.SAMPLE_ID,
a.SEEDLOT_NUMBER,
c.FAMILY_LOT_NUMBER,
a.VEGETATION_ST,
-- Nov 2003 MP - Item_id required for consep
--SUBSTR(Cns_Fn_Strip_Item_Id(e.request_type_st,a.request_skey,a.ITEM_ID),1,1),
a.item_id,
TRUNC(a.ACTUAL_BEGIN_DT_TM),
TRUNC(a.ACTUAL_END_DT_TM),
-1,
NULL,
-1,
0,
'QA',
NULL,
TARGET_MOIST_CONT,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
0,
0,
a.RIA_COMMENT,
c.REQUEST_SKEY,
e.request_type_st,
DECODE(e.REQUEST_TYPE_ST,'SRQ',e.SOWING_YR,e.REQUEST_YR),
Cns_Fn_Get_Rqst_Grams(c.REQUEST_SKEY,a.ITEM_ID),
Cns_Fn_Get_Rqst_Test_Grams(c.REQUEST_SKEY,a.ITEM_ID),
0,
TRUNC(a.REVISED_END_DT),
NULL,
NULL
FROM
CNS_T_RQST_ITM_ACTVTY a,
CNS_T_REQUEST_ITEM c,
CNS_T_SPAR_REQUEST e,
CNS_T_SEEDLOT g
WHERE
c.ITEM_ID = a.ITEM_ID
AND   c.REQUEST_SKEY = a.REQUEST_SKEY
AND   g.SEEDLOT_NUMBER (+) = a.SEEDLOT_NUMBER
AND   e.REQUEST_SKEY = c.REQUEST_SKEY
AND   a.STNDRD_ACTIVITY_ID = 'MMC'
AND   WORK_CENTRE_ID = -1;


-- CONSEP.CNSR09_UNION source

CREATE OR REPLACE VIEW CONSEP.CNSR09_UNION
(SEEDLOT_SAMPLE,NURSERY_SHIPTO_ACRONYM,NURSERY_SHIPTO_LCON,REQ_ID,REQUEST_ITEM,ACTIVITY_TYPE_CD,STNDRD_ACTIVITY_ID,RIA_SKEY,SAMPLE_ID,SEEDLOT_NUMBER,FAMILY_LOT_NUMBER,VEGETATION_ST,ITEM_ID,ACTUAL_BEGIN_DT_TM,ACTUAL_END_DT_TM,REVISED_END_DT,ACCEPT_RESULT_IND,TEST_RANK,TEST_COMPLETE_IND,GERM_TEST_IND,TEST_CATEGORY_CD,GERMINATION_PCT,MOISTURE_PCT,GERMINATION_VALUE,PV,WEIGHT_PER_100,SEEDS_PER_GRAM,PURITY_PCT,OTHER_TEST_RESULT,SIGNIFICNT_STS_IND,PROCESS_COMMIT_IND,RIA_COMMENT,REQUEST_SKEY,REQUEST_TYPE_ST,REQUEST_YR,GRAMS,TEST_GRAMS,CURRENT_TEST_IND,SEED_WITHDRAWAL_DATE,SRQ_GC,DAYS_IN_STRAT)
AS
SELECT
--Modified July 2003 by mdellavi, suppress item_id display for SRQ/CSP type requests
          DECODE (ria.seedlot_number,
                  '00000', c.family_lot_number,
                  NULL, c.sample_id,
                  DECODE (g.registerd_seed_ind,
                          -1, ria.seedlot_number,
                          ria.seedlot_number || 'U'
                         )
                 ),
          cns_fn_get_client_acronym (DECODE (c.shipto_cli_number,
                                             NULL, DECODE
                                                        (c.nrsry_obligatn_ind,
                                                         -1, c.nrsry_cli_number,
                                                         NULL
                                                        ),
                                             c.shipto_cli_number
                                            ),
                                     NULL
                                    ),
          DECODE (c.shipto_cli_locn_cd,
                  NULL, DECODE (c.nrsry_obligatn_ind,
                                -1, c.nrsry_cli_locn_cd,
                                NULL
                               ),
                  c.shipto_cli_locn_cd
                 ),
          ria.request_id,
             ria.request_id
          || SUBSTR (cns_fn_strip_item_id (e.request_type_st,
                                           ria.request_skey,
                                           ria.item_id
                                          ),
                     1,
                     1
                    ),
          ria.activity_type_cd, ria.stndrd_activity_id, ria.ria_skey,
          c.sample_id, ria.seedlot_number, c.family_lot_number,
          ria.vegetation_st,
-- item_id needed for consep Nov 2003 MP
--SUBSTR(Cns_Fn_Strip_Item_Id(e.request_type_st,ria.request_skey,ria.ITEM_ID),1,1) item_id,
                            ria.item_id, ria.actual_begin_dt_tm,
          ria.actual_end_dt_tm, TRUNC (ria.revised_end_dt),
          TEST.accept_result_ind, TEST.test_rank, TEST.test_complete_ind,
          cns_fn_get_germ_test_ind (ria.activity_type_cd),
          ria.test_category_cd, TEST.germination_pct, TEST.moisture_pct,
          TEST.germination_value,
          DECODE (TEST.peak_value_grm_pct || '//' || TEST.peak_value_no_days,
                  '//', NULL,
                  TEST.peak_value_grm_pct || '//' || TEST.peak_value_no_days
                 ),
          TEST.weight_per_100, TEST.seeds_per_gram, TEST.purity_pct,
          TEST.other_test_result, ria.significnt_sts_ind,
          ria.process_commit_ind, ria.ria_comment, c.request_skey,
          e.request_type_st,
          DECODE (e.request_type_st, 'SRQ', e.sowing_yr, e.request_yr),
          cns_fn_get_rqst_grams (c.request_skey, ria.item_id),
          cns_fn_get_rqst_test_grams (c.request_skey, ria.item_id),
          TEST.current_test_ind, TEST.seed_withdrawal_date, NULL, NULL
     FROM cns_t_rqst_itm_actvty ria,
          cns_t_request_item c,
          cns_t_tsc_test_result TEST,
          cns_t_spar_request e,
          cns_t_seedlot g
    WHERE ria.request_skey <> 0
      AND c.item_id = ria.item_id
      AND c.request_skey = ria.request_skey
      AND g.seedlot_number(+) = ria.seedlot_number
      AND TEST.ria_skey = ria.ria_skey
      AND e.request_skey = c.request_skey
   UNION
   SELECT DECODE (ria.seedlot_number,
                  '00000', c.family_lot_number,
                  NULL, c.sample_id,
                  DECODE (g.registerd_seed_ind,
                          -1, ria.seedlot_number,
                          ria.seedlot_number || 'U'
                         )
                 ),
          cns_fn_get_client_acronym (DECODE (c.shipto_cli_number,
                                             NULL, DECODE
                                                        (c.nrsry_obligatn_ind,
                                                         -1, c.nrsry_cli_number,
                                                         NULL
                                                        ),
                                             c.shipto_cli_number
                                            ),
                                     NULL
                                    ),
          DECODE (c.shipto_cli_locn_cd,
                  NULL, DECODE (c.nrsry_obligatn_ind,
                                -1, c.nrsry_cli_locn_cd,
                                NULL
                               ),
                  c.shipto_cli_locn_cd
                 ),
          ria.request_id,
             ria.request_id
          || SUBSTR (cns_fn_strip_item_id (e.request_type_st,
                                           ria.request_skey,
                                           ria.item_id
                                          ),
                     1,
                     1
                    ),
          ria.activity_type_cd, ria.stndrd_activity_id, ria.ria_skey,
          c.sample_id, ria.seedlot_number, c.family_lot_number,
          ria.vegetation_st,
          SUBSTR (cns_fn_strip_item_id (e.request_type_st,
                                        ria.request_skey,
                                        ria.item_id
                                       ),
                  1,
                  1
                 ),
          ria.actual_begin_dt_tm, ria.actual_end_dt_tm, ria.revised_end_dt,
          TEST.accept_result_ind, TEST.test_rank, TEST.test_complete_ind,
          cns_fn_get_germ_test_ind (ria.activity_type_cd),
          ria.test_category_cd, TEST.germination_pct, TEST.moisture_pct,
          TEST.germination_value,
          DECODE (TEST.peak_value_grm_pct || '/' || TEST.peak_value_no_days,
                  '/', NULL,
                  TEST.peak_value_grm_pct || '/' || TEST.peak_value_no_days
                 ),
          TEST.weight_per_100, TEST.seeds_per_gram, TEST.purity_pct,
          TEST.other_test_result, ria.significnt_sts_ind,
          ria.process_commit_ind, ria.ria_comment, c.request_skey,
          e.request_type_st,
          DECODE (e.request_type_st, 'SRQ', e.sowing_yr, e.request_yr),
          cns_fn_get_rqst_grams (c.request_skey, ria.item_id),
          cns_fn_get_rqst_test_grams (c.request_skey, ria.item_id),
          TEST.current_test_ind, TEST.seed_withdrawal_date, NULL, NULL
     FROM cns_t_rqst_itm_actvty ria,
          cns_t_request_item c,
          cns_t_tsc_test_result TEST,
          cns_t_spar_request e,
          cns_t_seedlot g
    WHERE ria.request_skey = 0
      AND TEST.test_rank = 'A'
      AND c.item_id = ria.item_id
      AND c.request_skey = ria.request_skey
      AND g.seedlot_number(+) = ria.seedlot_number
      AND TEST.ria_skey = ria.ria_skey
      AND e.request_skey = c.request_skey;


-- CONSEP.CNSR10_LOCHIST source

CREATE OR REPLACE VIEW CONSEP.CNSR10_LOCHIST
(SEEDLOT_NUMBER,SEEDLOT_DISPLAY,STORAGE_STRT_DT_TM,STORAGE_END_DT_TM,STORAGE_FCLTY_DESC,TO_SECTION_ID,TO_SHELF_ID,TO_POSITION_ID,TO_CONCAT,FROM_SECTION_ID,FROM_SHELF_ID,FROM_POSITION_ID,FROM_CONCAT,NO_CONTAINERS,CONTAINER_TYPE_DSC,VEGETATION_ST,TSC_PRODUCT_DSC,SEEDS_PER_GRAM,REQUEST_TYPE_ST,WITHDRAWAL_DATE)
AS
SELECT
c.SEEDLOT_NUMBER,
DECODE(c.REGISTERD_SEED_IND,-1,c.SEEDLOT_NUMBER,c.SEEDLOT_NUMBER||'U'),
a.STORAGE_STRT_DT_TM,
a.STORAGE_END_DT_TM,
d.STORAGE_FCLTY_DESC,
b.TO_SECTION_ID,
b.TO_SHELF_ID,
b.TO_POSITION_ID,
b.TO_SECTION_ID||b.TO_SHELF_ID||b.TO_POSITION_ID,
b.FROM_SECTION_ID,
b.FROM_SHELF_ID,
b.FROM_POSITION_ID,
b.FROM_SECTION_ID||b.FROM_SHELF_ID||b.FROM_POSITION_ID,
b.NO_CONTAINERS,
b.CONTAINER_TYPE_CD,
c.VEGETATION_ST,
b.TSC_PRODUCT_TYP_CD,
spg.SEEDS_PER_GRAM,
REQUEST_TYPE_ST,
WITHDRAWAL_DATE
FROM
    CNS_T_ASSIGNED_INV_DT a,
    CNS_T_ASSIGND_INV_LOC b,
    CNS_T_SEEDLOT c,
    CNS_T_INVENTORY_FCLTY d,
    SEEDLOT_LAST_WITHDRAWAL_DATE wds,
    (SELECT  r.SEEDLOT_NUMBER,  t.SEEDS_PER_GRAM
     FROM CNS_T_RQST_ITM_ACTVTY r,
          CNS_T_TSC_TEST_RESULT t
    WHERE  r.ACTIVITY_TYPE_CD  = 'SPG'
    AND t.RIA_SKEY  = r.RIA_SKEY
    AND t.STANDARD_TEST_IND = -1
    AND t.ACCEPT_RESULT_IND = -1
    AND t.TEST_COMPLETE_IND = -1
    AND t.CURRENT_TEST_IND  = -1 ) spg
WHERE   c.SEEDLOT_NUMBER = a.SEEDLOT_NUMBER (+)
AND     a.INVENTORY_SKEY  = b.INVENTORY_SKEY (+)
AND     b.STORAGE_FCLTY_ID = d.STORAGE_FCLTY_ID (+)
AND     c.SEEDLOT_NUMBER  = spg.SEEDLOT_NUMBER (+)
AND     C.SEEDLOT_NUMBER = WDS.SEEDLOT_NUMBER
UNION
SELECT
c.FAMILY_LOT_NUMBER,
c.FAMILY_LOT_NUMBER,
a.STORAGE_STRT_DT_TM,
a.STORAGE_END_DT_TM,
d.STORAGE_FCLTY_DESC,
b.TO_SECTION_ID,
b.TO_SHELF_ID,
b.TO_POSITION_ID,
b.TO_SECTION_ID||b.TO_SHELF_ID||b.TO_POSITION_ID,
b.FROM_SECTION_ID,
b.FROM_SHELF_ID,
b.FROM_POSITION_ID,
b.FROM_SECTION_ID||b.FROM_SHELF_ID||b.FROM_POSITION_ID,
b.NO_CONTAINERS,
b.CONTAINER_TYPE_CD,
c.VEGETATION_ST,
b.TSC_PRODUCT_TYP_CD,
SPG.SEEDS_PER_GRAM,
wds.REQUEST_TYPE_ST,
wds.WITHDRAWAL_DATE
FROM
   CNS_T_ASSIGNED_INV_DT a,
   CNS_T_ASSIGND_INV_LOC b,
   CNS_T_REQUEST_ITEM c,
   CNS_T_INVENTORY_FCLTY d,
   FAMILYLOT_LAST_WITHDRAWAL_DATE wds,
   (SELECT i.family_lot_number,  t.SEEDS_PER_GRAM
    FROM    CNS_T_RQST_ITM_ACTVTY r,
            CNS_T_TSC_TEST_RESULT t,
            CNS_T_REQUEST_ITEM i
   WHERE   i.FAMILY_LOT_NUMBER IS NOT NULL
   AND     r.ACTIVITY_TYPE_CD  = 'SPG'
   AND     i.REQUEST_SKEY = r.REQUEST_SKEY
   AND     t.RIA_SKEY  = r.RIA_SKEY
   AND     t.STANDARD_TEST_IND = -1
   AND     t.ACCEPT_RESULT_IND = -1
   AND     t.TEST_COMPLETE_IND = -1
   AND     t.CURRENT_TEST_IND  = -1 ) spg
WHERE   c.REQUEST_SKEY = a.REQUEST_SKEY (+)
AND     c.ITEM_ID = a.ITEM_ID (+)
AND     c.family_lot_number IS NOT NULL
AND     C.FAMILY_LOT_NUMBER = WDS.FAMILY_LOT_NUMBER
AND     a.INVENTORY_SKEY  = b.INVENTORY_SKEY (+)
AND     b.STORAGE_FCLTY_ID = d.STORAGE_FCLTY_ID (+)
AND     c.family_lot_number  = spg.FAMILY_LOT_NUMBER (+);


-- CONSEP.CNSR10_LOCHIST_CURRENT source

CREATE OR REPLACE VIEW CONSEP.CNSR10_LOCHIST_CURRENT
(SEEDLOT_NUMBER,SEEDLOT_DISPLAY,STORAGE_STRT_DT_TM,STORAGE_END_DT_TM,STORAGE_FCLTY_DESC,TO_SECTION_ID,TO_SHELF_ID,TO_POSITION_ID,TO_CONCAT,FROM_SECTION_ID,FROM_SHELF_ID,FROM_POSITION_ID,FROM_CONCAT,NO_CONTAINERS,CONTAINER_TYPE_DSC,VEGETATION_ST,TSC_PRODUCT_DSC,SEEDS_PER_GRAM,REQUEST_TYPE_ST,WITHDRAWAL_DATE)
AS
SELECT
c.SEEDLOT_NUMBER,
DECODE(c.REGISTERD_SEED_IND,-1,c.SEEDLOT_NUMBER,c.SEEDLOT_NUMBER||'U'),
a.STORAGE_STRT_DT_TM,
a.STORAGE_END_DT_TM,
d.STORAGE_FCLTY_DESC,
b.TO_SECTION_ID,
b.TO_SHELF_ID,
b.TO_POSITION_ID,
b.TO_SECTION_ID||b.TO_SHELF_ID||b.TO_POSITION_ID,
b.FROM_SECTION_ID,
b.FROM_SHELF_ID,
b.FROM_POSITION_ID,
b.FROM_SECTION_ID||b.FROM_SHELF_ID||b.FROM_POSITION_ID,
b.NO_CONTAINERS,
b.CONTAINER_TYPE_CD,
c.VEGETATION_ST,
b.TSC_PRODUCT_TYP_CD,
cns_fn_get_current_spg(c.SEEDLOT_NUMBER),
wds.REQUEST_TYPE_ST,
wds.WITHDRAWAL_DATE
FROM
    CNS_T_ASSIGNED_INV_DT a,
    CNS_T_ASSIGND_INV_LOC b,
    CNS_T_SEEDLOT c,
    CNS_T_INVENTORY_FCLTY d,
    SEEDLOT_LAST_WITHDRAWAL_DATE wds
WHERE   c.SEEDLOT_NUMBER = a.SEEDLOT_NUMBER
AND     a.SEEDLOT_NUMBER <> '00000'
AND     a.INVENTORY_SKEY  = b.INVENTORY_SKEY
AND     b.STORAGE_FCLTY_ID = d.STORAGE_FCLTY_ID
AND     a.STORAGE_END_DT_TM IS NULL
AND     C.SEEDLOT_NUMBER = WDS.SEEDLOT_NUMBER
UNION
SELECT
c.FAMILY_LOT_NUMBER,
c.FAMILY_LOT_NUMBER,
a.STORAGE_STRT_DT_TM,
a.STORAGE_END_DT_TM,
d.STORAGE_FCLTY_DESC,
b.TO_SECTION_ID,
b.TO_SHELF_ID,
b.TO_POSITION_ID,
b.TO_SECTION_ID||b.TO_SHELF_ID||b.TO_POSITION_ID,
b.FROM_SECTION_ID,
b.FROM_SHELF_ID,
b.FROM_POSITION_ID,
b.FROM_SECTION_ID||b.FROM_SHELF_ID||b.FROM_POSITION_ID,
b.NO_CONTAINERS,
b.CONTAINER_TYPE_CD,
c.VEGETATION_ST,
b.TSC_PRODUCT_TYP_CD,
cns_fn_get_current_spg(c.FAMILY_LOT_NUMBER),
REQUEST_TYPE_ST,
WITHDRAWAL_DATE
FROM    CNS_T_ASSIGNED_INV_DT a,
        CNS_T_ASSIGND_INV_LOC b,
        CNS_T_REQUEST_ITEM c,
        CNS_T_INVENTORY_FCLTY d,
        FAMILYLOT_LAST_WITHDRAWAL_DATE wds
WHERE   c.REQUEST_SKEY = a.REQUEST_SKEY
AND     c.ITEM_ID = a.ITEM_ID
AND     c.FAMILY_LOT_NUMBER IS NOT NULL
AND     a.INVENTORY_SKEY  = b.INVENTORY_SKEY
AND     b.STORAGE_FCLTY_ID = d.STORAGE_FCLTY_ID
AND     a.STORAGE_END_DT_TM IS NULL
AND     C.FAMILY_LOT_NUMBER = WDS.FAMILY_LOT_NUMBER
UNION
SELECT
c.SEEDLOT_NUMBER,
DECODE(c.REGISTERD_SEED_IND,-1,c.SEEDLOT_NUMBER,c.SEEDLOT_NUMBER||'U'),
TO_DATE(NULL,'YYYY-MM-DD'),
TO_DATE(NULL,'YYYY-MM-DD'),
' ',
' ',' ',' ',' ',
' ',' ',' ',' ',
0,
NULL,
c.VEGETATION_ST,
NULL,
cns_fn_get_current_spg(c.SEEDLOT_NUMBER),
'',
TO_DATE('')
FROM
	CNS_T_SEEDLOT c
WHERE NOT EXISTS (SELECT '1' FROM CNS_T_ASSIGNED_INV_DT d
WHERE d.seedlot_number = c.seedlot_number
AND storage_end_dt_tm IS NULL)
UNION
SELECT
c.FAMILY_LOT_NUMBER,
c.FAMILY_LOT_NUMBER,
TO_DATE(NULL,'YYYY-MM-DD'),
TO_DATE(NULL,'YYYY-MM-DD'),
' ',
' ',' ',' ',' ',
' ',' ',' ',' ',
0,
NULL,
c.VEGETATION_ST,
NULL,
cns_fn_get_fl_current_spg(c.FAMILY_LOT_NUMBER),
'',
TO_DATE('')
FROM
   CNS_T_FAMILY_LOT c
WHERE NOT EXISTS (SELECT '1' FROM CNS_T_ASSIGNED_INV_DT d, CNS_T_REQUEST_ITEM i
WHERE i.REQUEST_SKEY = d.REQUEST_SKEY
AND   i.ITEM_ID = d.ITEM_ID
AND   i.FAMILY_LOT_NUMBER = c.FAMILY_LOT_NUMBER
AND   d.storage_end_dt_tm IS NULL);


-- CONSEP.CNSR10_LOCHIST_CURRENT_WORK source

CREATE OR REPLACE VIEW CONSEP.CNSR10_LOCHIST_CURRENT_WORK
(SEEDLOT_NUMBER,SEEDLOT_DISPLAY,STORAGE_STRT_DT_TM,STORAGE_END_DT_TM,STORAGE_FCLTY_DESC,TO_SECTION_ID,TO_SHELF_ID,TO_POSITION_ID,TO_CONCAT,FROM_SECTION_ID,FROM_SHELF_ID,FROM_POSITION_ID,FROM_CONCAT,NO_CONTAINERS,CONTAINER_TYPE_DSC,VEGETATION_ST,TSC_PRODUCT_DSC,SEEDS_PER_GRAM)
AS
SELECT
c.SEEDLOT_NUMBER,
DECODE(c.REGISTERD_SEED_IND,-1,c.SEEDLOT_NUMBER,c.SEEDLOT_NUMBER||'U'),
a.STORAGE_STRT_DT_TM,
a.STORAGE_END_DT_TM,
d.STORAGE_FCLTY_DESC,
b.TO_SECTION_ID,
b.TO_SHELF_ID,
b.TO_POSITION_ID,
b.TO_SECTION_ID||b.TO_SHELF_ID||b.TO_POSITION_ID,
b.FROM_SECTION_ID,
b.FROM_SHELF_ID,
b.FROM_POSITION_ID,
b.FROM_SECTION_ID||b.FROM_SHELF_ID||b.FROM_POSITION_ID,
b.NO_CONTAINERS,
b.CONTAINER_TYPE_CD,
c.VEGETATION_ST,
b.TSC_PRODUCT_TYP_CD,
cns_fn_get_current_spg(c.SEEDLOT_NUMBER)
FROM
    CNS_T_ASSIGNED_INV_DT a,
    CNS_T_ASSIGND_INV_LOC b,
    CNS_T_SEEDLOT c,
    CNS_T_INVENTORY_FCLTY d
WHERE   c.SEEDLOT_NUMBER = a.SEEDLOT_NUMBER
AND     a.SEEDLOT_NUMBER <> '00000'
AND     a.INVENTORY_SKEY  = b.INVENTORY_SKEY
AND     b.STORAGE_FCLTY_ID = d.STORAGE_FCLTY_ID
AND     a.STORAGE_END_DT_TM IS NULL
UNION
SELECT
c.FAMILY_LOT_NUMBER,
c.FAMILY_LOT_NUMBER,
a.STORAGE_STRT_DT_TM,
a.STORAGE_END_DT_TM,
d.STORAGE_FCLTY_DESC,
b.TO_SECTION_ID,
b.TO_SHELF_ID,
b.TO_POSITION_ID,
b.TO_SECTION_ID||b.TO_SHELF_ID||b.TO_POSITION_ID,
b.FROM_SECTION_ID,
b.FROM_SHELF_ID,
b.FROM_POSITION_ID,
b.FROM_SECTION_ID||b.FROM_SHELF_ID||b.FROM_POSITION_ID,
b.NO_CONTAINERS,
b.CONTAINER_TYPE_CD,
c.VEGETATION_ST,
b.TSC_PRODUCT_TYP_CD,
cns_fn_get_current_spg(c.FAMILY_LOT_NUMBER)
FROM    CNS_T_ASSIGNED_INV_DT a,
        CNS_T_ASSIGND_INV_LOC b,
        CNS_T_REQUEST_ITEM c,
        CNS_T_INVENTORY_FCLTY d
WHERE   c.REQUEST_SKEY = a.REQUEST_SKEY
AND     c.ITEM_ID = a.ITEM_ID
AND     c.FAMILY_LOT_NUMBER IS NOT NULL
AND     a.INVENTORY_SKEY  = b.INVENTORY_SKEY
AND     b.STORAGE_FCLTY_ID = d.STORAGE_FCLTY_ID
AND     a.STORAGE_END_DT_TM IS NULL
UNION
SELECT
c.SEEDLOT_NUMBER,
DECODE(c.REGISTERD_SEED_IND,-1,c.SEEDLOT_NUMBER,c.SEEDLOT_NUMBER||'U'),
TO_DATE(NULL,'YYYY-MM-DD'),
TO_DATE(NULL,'YYYY-MM-DD'),
' ',
' ',' ',' ',' ',
' ',' ',' ',' ',
0,
NULL,
c.VEGETATION_ST,
NULL,
cns_fn_get_current_spg(c.SEEDLOT_NUMBER)
FROM
	CNS_T_SEEDLOT c
WHERE NOT EXISTS (SELECT '1' FROM CNS_T_ASSIGNED_INV_DT d
WHERE d.seedlot_number = c.seedlot_number
AND storage_end_dt_tm IS NULL)
UNION
SELECT
c.FAMILY_LOT_NUMBER,
c.FAMILY_LOT_NUMBER,
TO_DATE(NULL,'YYYY-MM-DD'),
TO_DATE(NULL,'YYYY-MM-DD'),
' ',
' ',' ',' ',' ',
' ',' ',' ',' ',
0,
NULL,
c.VEGETATION_ST,
NULL,
cns_fn_get_fl_current_spg(c.FAMILY_LOT_NUMBER)

FROM
   CNS_T_FAMILY_LOT c
WHERE NOT EXISTS (SELECT '1' FROM CNS_T_ASSIGNED_INV_DT d, CNS_T_REQUEST_ITEM i
WHERE i.REQUEST_SKEY = d.REQUEST_SKEY
AND   i.ITEM_ID = d.ITEM_ID
AND   i.FAMILY_LOT_NUMBER = c.FAMILY_LOT_NUMBER
AND   d.storage_end_dt_tm IS NULL);


-- CONSEP.CNSR10_LOCHIST_LAB_CURRENT source

CREATE OR REPLACE VIEW CONSEP.CNSR10_LOCHIST_LAB_CURRENT
(SEEDLOT_NUMBER,SEEDLOT_DISPLAY,REQUEST_ID,TEST_TYPE,TEST_CATEGORY,REQUEST_GRAMS,STORAGE_STRT_DT_TM,STORAGE_END_DT_TM,STORAGE_FCLTY_DESC,TO_SECTION_ID,TO_SHELF_ID,TO_POSITION_ID,TO_CONCAT,FROM_SECTION_ID,FROM_SHELF_ID,FROM_POSITION_ID,FROM_CONCAT,NO_CONTAINERS,CONTAINER_TYPE_DSC,VEGETATION_ST,TSC_PRODUCT_DSC,SEEDS_PER_GRAM,REQUEST_YR,WITHDRAWAL_DATE,REQUEST_TYPE_ST,GERM_TEST_IND,W1_TYPE,SAMPLE_DATE)
AS
SELECT c.seedlot_number,
          DECODE (c.registerd_seed_ind,
                  -1, c.seedlot_number,
                  c.seedlot_number || 'U'
                 ),
          DECODE (req.request_type_st,
                  'SRQ', req.sowing_yr
                   || SUBSTR (o.org_unit_code, 1, 3)
                   || LPAD (TO_CHAR (req.request_sequence), 4, '0')
                   || ' ',
                     req.request_type_st
                  || req.request_yr
                  || LPAD (TO_CHAR (req.request_sequence), 4, '0')
                  || SUBSTR (cns_fn_strip_item_id (req.request_type_st,
                                                   req.request_skey,
                                                   req.item_id
                                                  ),
                             1,
                             1
                            )
                 ),
          SUBSTR (cns_fn_test_act_string (req.request_skey,
                                          req.item_id,
                                          req.seedlot_number
                                         ),
                  1,
                  64
                 ),
          SUBSTR (cns_fn_test_cat_string (req.request_skey,
                                          req.item_id,
                                          req.seedlot_number
                                         ),
                  1,
                  64
                 ),
          req.grams, a.storage_strt_dt_tm, a.storage_end_dt_tm,
          a.storage_fclty_desc, a.to_section_id, a.to_shelf_id,
          a.to_position_id,
          a.to_section_id || a.to_shelf_id || a.to_position_id,
          a.from_section_id, a.from_shelf_id, a.from_position_id,
          a.from_section_id || a.from_shelf_id || a.from_position_id,
          a.no_containers, a.container_type_cd, c.vegetation_st,
          a.tsc_product_typ_cd, cns_fn_get_current_spg (c.seedlot_number),
          DECODE (req.request_type_st, 'SRQ', req.sowing_yr, req.request_yr),
          NULL, req.request_type_st,
          NVL (cns_fn_reqtest_isgerm (req.request_skey, req.item_id), 0),
          DECODE (INSTR (cns_fn_test_act_string (req.request_skey,
                                                 req.item_id,
                                                 req.seedlot_number
                                                ),
                         'W1',
                         1,
                         1
                        ),
                  0, NULL,
                  'W1'
                 ) w1_type, sample_date
     FROM assigned_inv a,
          cns_t_seedlot c,
          cns_t_org_unit o,
          (SELECT   z.request_skey, request_type_st, request_yr,
                    spr_rqst_status_st, request_sequence, org_unit_no,
                    sowing_yr, item_id, seedlot_number, seedlot_test_code,
                    SUM (rqst_from_reserve + rqst_from_surplus) grams
               FROM cns_t_spar_request z, cns_t_request_seedlot x
              WHERE request_type_st IN
                       ('RTS', 'TST', 'CSP', 'SSP', 'ASP', 'SRQ', 'USP',
                        'RSP')
                AND spr_rqst_status_st IN ('ACT', 'APP')
                AND z.request_skey = x.request_skey
           GROUP BY z.request_skey,
                    item_id,
                    seedlot_number,
                    seedlot_test_code,
                    request_type_st,
                    request_yr,
                    spr_rqst_status_st,
                    request_sequence,
                    org_unit_no,
                    sowing_yr) req,
                    SEEDLOT_SAMPLEVIALDATE SV
    WHERE c.seedlot_number = a.seedlot_number(+)
      AND c.seedlot_number = req.seedlot_number(+)
      AND a.storage_end_dt_tm IS NULL
      AND req.org_unit_no = o.org_unit_no(+)
      AND c.seedlot_number = sv.seedlot_number(+)
   UNION
   SELECT c.family_lot_number, c.family_lot_number,
          DECODE (req.request_type_st,
                  'SRQ', req.sowing_yr
                   || SUBSTR (o.org_unit_code, 1, 3)
                   || LPAD (TO_CHAR (req.request_sequence), 4, '0')
                   || ' ',
                     req.request_type_st
                  || req.request_yr
                  || LPAD (TO_CHAR (req.request_sequence), 4, '0')
                  || SUBSTR (cns_fn_strip_item_id (req.request_type_st,
                                                   req.request_skey,
                                                   req.item_id
                                                  ),
                             1,
                             1
                            )
                 ),
          SUBSTR (cns_fn_test_act_string (req.request_skey,
                                          req.item_id,
                                          req.family_lot_number
                                         ),
                  1,
                  64
                 ),
          SUBSTR (cns_fn_test_cat_string (req.request_skey,
                                          req.item_id,
                                          req.family_lot_number
                                         ),
                  1,
                  64
                 ),
          req.grams, a.storage_strt_dt_tm, a.storage_end_dt_tm,
          a.storage_fclty_desc, a.to_section_id, a.to_shelf_id,
          a.to_position_id,
          a.to_section_id || a.to_shelf_id || a.to_position_id,
          a.from_section_id, a.from_shelf_id, a.from_position_id,
          a.from_section_id || a.from_shelf_id || a.from_position_id,
          a.no_containers, a.container_type_cd, c.vegetation_st,
          a.tsc_product_typ_cd,
          cns_fn_get_fl_current_spg (c.family_lot_number),
          DECODE (req.request_type_st, 'SRQ', req.sowing_yr, req.request_yr),
          NULL, req.request_type_st,
          NVL (cns_fn_reqtest_isgerm (req.request_skey, req.item_id), 0),
          DECODE
              (INSTR (cns_fn_test_act_string (req.request_skey,
                                              req.item_id,
                                              req.family_lot_number
                                             ),
                      'W1',
                      1,
                      1
                     ),
               0, NULL,
               'W1'
              ) w1_type, null
     FROM assigned_inv a,
          cns_t_family_lot c,
          cns_t_org_unit o,
          (SELECT   z.request_skey, request_type_st, request_yr,
                    spr_rqst_status_st, request_sequence, org_unit_no,
                    sowing_yr, x.item_id, family_lot_number,
                    seedlot_test_code,
                    SUM (rqst_from_reserve + rqst_from_surplus) grams
               FROM cns_t_spar_request z,
                    cns_t_request_seedlot x,
                    cns_t_request_item y
              WHERE request_type_st IN
                       ('RTS', 'TST', 'CSP', 'SSP', 'ASP', 'SRQ', 'RSP',
                        'USP')
                AND spr_rqst_status_st IN ('ACT', 'APP')
                AND z.request_skey = x.request_skey
                AND z.request_skey = y.request_skey
           GROUP BY z.request_skey,
                    x.item_id,
                    family_lot_number,
                    seedlot_test_code,
                    request_type_st,
                    request_yr,
                    spr_rqst_status_st,
                    request_sequence,
                    org_unit_no,
                    sowing_yr) req
    WHERE c.family_lot_number = a.seedlot_number(+)
      AND c.family_lot_number = req.family_lot_number(+)
      AND a.storage_end_dt_tm IS NULL
      AND req.org_unit_no = o.org_unit_no(+);


-- CONSEP.CNSR10_LOCHIST_LAB_CURRENTNOFA source

CREATE OR REPLACE VIEW CONSEP.CNSR10_LOCHIST_LAB_CURRENTNOFA
(SEEDLOT_NUMBER,SEEDLOT_DISPLAY,REQUEST_ID,TEST_TYPE,TEST_CATEGORY,REQUEST_GRAMS,STORAGE_STRT_DT_TM,STORAGE_END_DT_TM,STORAGE_FCLTY_DESC,TO_SECTION_ID,TO_SHELF_ID,TO_POSITION_ID,TO_CONCAT,FROM_SECTION_ID,FROM_SHELF_ID,FROM_POSITION_ID,FROM_CONCAT,NO_CONTAINERS,CONTAINER_TYPE_DSC,VEGETATION_ST,TSC_PRODUCT_DSC,SEEDS_PER_GRAM,REQUEST_YR,WITHDRAWAL_DATE,REQUEST_TYPE_ST,GERM_TEST_IND)
AS
SELECT
c.SEEDLOT_NUMBER,
DECODE(c.REGISTERD_SEED_IND,-1,c.SEEDLOT_NUMBER,c.SEEDLOT_NUMBER||'U'),
DECODE(req.REQUEST_TYPE_ST,'SRQ',req.SOWING_YR||SUBSTR(o.ORG_UNIT_CODE,1,3)||
LPAD(TO_CHAR(req.REQUEST_SEQUENCE),4,'0')||' ', req.REQUEST_TYPE_ST||
req.REQUEST_YR||LPAD(TO_CHAR(req.REQUEST_SEQUENCE),4,'0')
||SUBSTR(Cns_Fn_Strip_Item_Id(req.request_type_st,req.request_skey,req.ITEM_ID),1,1)),
Cns_Fn_Test_Act_String(req.request_skey, req.item_id, req.seedlot_number),
Cns_Fn_Test_Cat_String(req.request_skey, req.item_id, req.seedlot_number),
req.grams,
a.STORAGE_STRT_DT_TM,
a.STORAGE_END_DT_TM,
a.STORAGE_FCLTY_DESC,
a.TO_SECTION_ID,
a.TO_SHELF_ID,
a.TO_POSITION_ID,
a.TO_SECTION_ID||a.TO_SHELF_ID||a.TO_POSITION_ID,
a.FROM_SECTION_ID,
a.FROM_SHELF_ID,
a.FROM_POSITION_ID,
a.FROM_SECTION_ID||a.FROM_SHELF_ID||a.FROM_POSITION_ID,
a.NO_CONTAINERS,
Cns_Fn_Get_Container_Type_Dsc(a.CONTAINER_TYPE_CD),
c.VEGETATION_ST,
Cns_Fn_Get_Product_Type_Dsc(a.TSC_PRODUCT_TYP_CD),
Cns_Fn_Get_Current_Spg(c.SEEDLOT_NUMBER),
DECODE(req.REQUEST_TYPE_ST,'SRQ',req.SOWING_YR,req.request_yr),
NULL,
req.REQUEST_TYPE_ST,
nvl(cns_fn_reqtest_isgerm(req.request_skey,req.item_id),0)
FROM ASSIGNED_INV a,
     CNS_T_SEEDLOT c,
	 CNS_T_ORG_UNIT o,
     (SELECT z.request_skey, request_type_st,request_yr ,spr_rqst_status_st,request_sequence, ORG_UNIT_NO, sowing_yr ,
             item_id, seedlot_number, seedlot_test_code,SUM(RQST_FROM_RESERVE + RQST_FROM_SURPLUS) grams
     FROM CNS_T_SPAR_REQUEST Z, CNS_T_REQUEST_SEEDLOT X
     WHERE request_type_st IN ('RTS', 'TST','CSP','SSP','ASP', 'SRQ')
     AND spr_rqst_status_st IN ('ACT', 'APP')
     AND z.REQUEST_SKEY=x.REQUEST_SKEY
     GROUP BY z.request_skey, item_id, seedlot_number,seedlot_test_code,request_type_st,request_yr ,spr_rqst_status_st,request_sequence,ORG_UNIT_NO, sowing_yr) req
WHERE   c.SEEDLOT_NUMBER = a.SEEDLOT_NUMBER(+)
AND     c.SEEDLOT_NUMBER = req.SEEDLOT_NUMBER (+)
AND     a.STORAGE_END_DT_TM IS NULL
AND     req.ORG_UNIT_NO = o.ORG_UNIT_NO (+);


-- CONSEP.CNSR10_LOCHIS_LAB_CUR_RET_SEED source

CREATE OR REPLACE VIEW CONSEP.CNSR10_LOCHIS_LAB_CUR_RET_SEED
(SEEDLOT_NUMBER,SEEDLOT_DISPLAY,REQUEST_ID,TEST_TYPE,TEST_CATEGORY,REQUEST_GRAMS,STORAGE_STRT_DT_TM,STORAGE_END_DT_TM,STORAGE_FCLTY_DESC,TO_SECTION_ID,TO_SHELF_ID,TO_POSITION_ID,TO_CONCAT,FROM_SECTION_ID,FROM_SHELF_ID,FROM_POSITION_ID,FROM_CONCAT,NO_CONTAINERS,CONTAINER_TYPE_DSC,VEGETATION_ST,TSC_PRODUCT_DSC,SEEDS_PER_GRAM,REQUEST_YR,WITHDRAWAL_DATE,REQUEST_TYPE_ST,GERM_TEST_IND,QAR_ACT)
AS
SELECT
c.SEEDLOT_NUMBER,
DECODE(c.REGISTERD_SEED_IND,-1,c.SEEDLOT_NUMBER,c.SEEDLOT_NUMBER||'U'),
DECODE(req.REQUEST_TYPE_ST,'SRQ',req.SOWING_YR||SUBSTR(o.ORG_UNIT_CODE,1,3)||
LPAD(TO_CHAR(req.REQUEST_SEQUENCE),4,'0')||' ', req.REQUEST_TYPE_ST||
req.REQUEST_YR||LPAD(TO_CHAR(req.REQUEST_SEQUENCE),4,'0')
||SUBSTR(Cns_Fn_Strip_Item_Id(req.request_type_st,req.request_skey,req.ITEM_ID),1,1)),
Cns_Fn_Test_Act_String(req.request_skey, req.item_id, req.seedlot_number),
decode(instr(Cns_Fn_Test_Cat_String(req.request_skey, req.item_id, req.seedlot_number),'QAR  '),0,'','QAR'),
req.grams,
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
c.VEGETATION_ST,
'',
Cns_Fn_Get_Current_Spg(c.SEEDLOT_NUMBER),
DECODE(req.REQUEST_TYPE_ST,'SRQ',req.SOWING_YR,req.request_yr),
NULL,
req.REQUEST_TYPE_ST,
nvl(cns_fn_reqtest_isgerm(req.request_skey,req.item_id),0),
QAR_IND
FROM
     CNS_T_SEEDLOT c,
	 CNS_T_ORG_UNIT o,
     (SELECT z.request_skey, request_type_st,request_yr ,spr_rqst_status_st,request_sequence, ORG_UNIT_NO, sowing_yr ,
             item_id, seedlot_number, seedlot_test_code,SUM(RQST_FROM_RESERVE + RQST_FROM_SURPLUS) grams
     FROM CNS_T_SPAR_REQUEST Z, CNS_T_REQUEST_SEEDLOT X
     WHERE request_type_st IN ('SRQ')
     AND spr_rqst_status_st IN ('COM','CAN')
     AND z.REQUEST_SKEY=x.REQUEST_SKEY
     GROUP BY z.request_skey, item_id, seedlot_number,seedlot_test_code,request_type_st,request_yr ,spr_rqst_status_st,request_sequence,ORG_UNIT_NO, sowing_yr) req,
     REQ_HAS_QAR_ACT QAR
WHERE  c.SEEDLOT_NUMBER = req.SEEDLOT_NUMBER (+)
AND     req.ORG_UNIT_NO = o.ORG_UNIT_NO (+)
AND     instr(Cns_Fn_Test_Cat_String(req.request_skey, req.item_id, req.seedlot_number),'QAR  ') <> 0
AND   QAR.REQUEST_SKEY = REQ.REQUEST_SKEY
AND   QAR.ITEM_ID = REQ.ITEM_ID
AND   QAR_IND = -1;


-- CONSEP.CNSR12_CSP source

CREATE OR REPLACE VIEW CONSEP.CNSR12_CSP
(REQ_ID,ITEM_ID,REQUEST_ITEM,SPR_RQST_STATUS_ST,PRIORITY_DT,VEGETATION_ST,RQST_CLI_DISPLAY,REQUEST_SKEY,REQUEST_SEQUENCE,REQUEST_YR,REQUEST_TYPE_ST,SEEDLOT_NUMBER,SEEDLOT_DISPLAY,EXTRCT_CLI_NUMBER,EXTRCT_ACRONYM,EXTRCT_CLI_LOCN,HLS_COLLECTED,HLS_EXTRACTED,GENETIC_CLASS_CODE,SUPERIOR_PRVNC_IND,CLCTN_END_DT,PROC_CMPL_DT,ACTUAL_EXTR_DT,BLENDED_DT,EXTRCT_DT,FIRST_CLEAN_DT,SECOND_CLEAN_DT,ACTUAL_BLN_DT,DEWING_DT,CONESEEDRCV_DT,CLASS,FUNDING_SOURCE,UNIT_PRICE,BASE_PRICE,KILN_LOAD_SACK_COUNT,SL_COMPLETE,COLLECTION_AGENCY,SEPARATION_DT,SPAR_CONTAINER_COUNT,SPAR_CONTAINER_VOLUME,COLL_CLI_NUMBER,COLL_CLI_LOCN,REGISTERED_DT,FIRST_CLEAN_END_DT,ORIGINAL_SEED_QTY,ORIGINAL_POTENTIAL_TREES,COLL_ORG_UNIT_NO,SPAR_SEEDLOT_STATUS,CRITICAL_COMMENT_IND,ORIGINAL_GERMINATION_PCT,ORIGINAL_MC,MOISTURE_METER,RETREAT_EXTRACT,EXTRACT_OUTPUT,FIRST_CLEAN_OUTPUT,DEWING_OUTPUT,SECOND_CLEAN_OUTPUT,SEPARATION_OUTPUT,SHIPMENT_RECEIPT_COUNT,LATEST_SHIPMENT_RECEIPT,EXPECTED_SHIPMENT_RECEIPT,TOTAL_EXPECTED_SACKS,SHIPMENT_SACK_COUNT,RETREAT_VOLUME,ORCHARD_ID,LOT_KILN_BATCH,REQ_COMMENT,SPU_STRING,ORCH_BEC_STRING,YIELD_PER_HL,MCW_CURR,BLEND_MC)
AS
SELECT
--Modified July 2003 by mdellavi, suppress item_id display for SRQ/CSP type requests
             a.request_type_st
          || a.request_yr
          || LPAD (TO_CHAR (a.request_sequence), 4, '0'),
          ' ' item_id,
             a.request_type_st
          || a.request_yr
          || LPAD (TO_CHAR (a.request_sequence), 4, '0')
          || ' ',
          a.spr_rqst_status_st, a.priority_dt, a.vegetation_st,
          cns_fn_get_csp_requestor (e.seedlot_number), a.request_skey,
          a.request_sequence, a.request_yr, a.request_type_st,
          e.seedlot_number,
          DECODE (e.registerd_seed_ind,
                  -1, e.seedlot_number,
                  e.seedlot_number || 'U'
                 ),
          e.extrct_cli_number,
          cns_fn_get_client_acronym (e.extrct_cli_number, NULL),
          e.extrct_cli_locn_cd, e.clctn_volume, e.extraction_volume,
          e.genetic_class_code, e.superior_prvnc_ind, e.clctn_end_dt,
          e.processng_cmplt_dt, e.extraction_st_dt,
          cns_fn_get_plan_blend_dt (b.request_skey, b.item_id),
          cns_fn_get_plan_extrct_dt (b.request_skey,
                                     b.item_id,
                                     a.vegetation_st
                                    ),
          cns_fn_max_std_ria_begin_dt (a.request_skey, b.item_id, 'SC1'),
          cns_fn_max_std_ria_begin_dt (a.request_skey, b.item_id, 'SC2'),
          cns_fn_get_act_blend_dt (a.request_skey, b.item_id),
          cns_fn_max_std_ria_begin_dt (a.request_skey, b.item_id, 'DWG'),
          TRUNC (cns_fn_cone_seed_rcpt_dt (a.request_skey, b.item_id)),
             e.genetic_class_code
          || DECODE (NVL (e.superior_prvnc_ind, 0), -1, '+', ' '),
          cns_fn_get_spar_fund_srce_dsc
                              (cns_fn_get_spar_fund_srce_st (c.seedlot_number),
                               c.seedlot_number
                              ),
          g.unit_price, g.base_price, sc.sack_count, sl_complete,
          coll_acro.client_acronym || ' ' || e.clctn_cli_locn_cd,
          cns_fn_max_std_ria_begin_dt (a.request_skey, b.item_id, 'SSP'),
          e.no_of_containers, e.vol_per_container, e.clctn_cli_number,
          e.clctn_cli_locn_cd, e.registered_dt,
          cns_fn_max_std_ria_end_dt (a.request_skey, b.item_id, 'SC1'),
          e.original_seed_qty, original_potential_trees,
          cns_fn_get_org_unit_code (e.org_unit_no), e.seedlot_status_st,
          cns_fn_csp_critical_comm (b.request_skey, b.item_id),
          ogc.germination_pct, ogc.moisture_pct,
          cns_fn_get_act_blend_mc (a.request_skey, b.item_id),
          cns_fn_get_retreat_extrct_dt (b.request_skey,
                                        b.item_id,
                                        a.vegetation_st
                                       ),
          DECODE (cns_fn_is_abies (e.vegetation_st),
                  -1, abies_extraction_volume,
                  extract_volume
                 ),
          first_cleaning_volume, dewing_volume, second_cleaning_volume,
          seed_separation_volume, shipment_receipt_count,
          latest_shipment_receipt,
          TO_DATE (DECODE (ABS (  expected_shipment_receipt
                                - TRUNC (NVL (latest_shipment_receipt,
                                              TO_DATE ('01/01/1900 00:00:00',
                                                       'MM/DD/YYYY HH24:MI:SS'
                                                      )
                                             )
                                        )
                               ),
                           0, NULL,
                           expected_shipment_receipt
                          )
                  ),
          DECODE (ABS (  expected_shipment_receipt
                       - TRUNC (NVL (latest_shipment_receipt,
                                     TO_DATE ('01/01/1900 00:00:00',
                                              'MM/DD/YYYY HH24:MI:SS'
                                             )
                                    )
                               )
                      ),
                  0, NULL,
                  total_expected_sacks
                 ),
          shipment_sack_count, retreat_volume, orchard_id, cns_fn_lot_kiln_string(C.SEEDLOT_NUMBER),
	CNS_FN_REQ_COMM_STRING(a.request_skey, b.item_id),
    seedlot_plan_unit_summary.SPU_STRING,
    BEC_STRING, DECODE (e.extraction_volume,
                  0, NULL,
                  e.original_seed_qty / (e.extraction_volume * 1000)
                 ),
                 cns_fn_get_sl_current_MCW(e.seedlot_number ),
                 cns_fn_blend_mc_string(a.request_skey, b.item_id)


     FROM cns_t_spar_request a,
          cns_t_request_item b,
          cns_t_request_seedlot c,
          cns_t_code_subset_tbl d,
          cns_t_seedlot e,
          cns_t_blng_itm_price g,
          csp_sl_sack_count_kln_load sc,
          csp_cones_seedlot_complete slcom,
          cns_t_client_acronym coll_acro,
          original_potential_trees opt,
          original_germ_results_no_gsa ogc,
          csp_output_volumes csp_vol,
          seedlot_shipment_receipt_count ship,
          seedlot_plan_unit_summary
    WHERE a.request_skey = b.request_skey
      AND c.request_skey = b.request_skey
      AND c.item_id = b.item_id
      AND e.seedlot_number = c.seedlot_number
      AND a.request_type_st = d.code_argument
      AND d.code_subset_name = 'CSP_RQST_TYPE_ST'
      AND a.vegetation_st = g.vegetation_code(+)
      AND a.request_type_st = g.billing_item_id(+)
      AND c.request_skey = sc.request_skey(+)
      AND c.item_id = sc.item_id(+)
      AND c.request_skey = slcom.request_skey(+)
      AND c.item_id = slcom.item_id(+)
      AND e.clctn_cli_number = coll_acro.client_number(+)
      AND e.seedlot_number = opt.seedlot_number(+)
      AND e.seedlot_number = ogc.seedlot_number(+)
      AND b.request_skey = csp_vol.request_skey(+)
      AND b.item_id = csp_vol.item_id(+)
      AND e.seedlot_number = ship.seedlot_number
      AND e.seedlot_number = seedlot_plan_unit_summary.seedlot_number(+);


-- CONSEP.CNSR12_CSP_FAMILY source

CREATE OR REPLACE VIEW CONSEP.CNSR12_CSP_FAMILY
(REQ_ID,ITEM_ID,REQUEST_ITEM,SPR_RQST_STATUS_ST,PRIORITY_DT,VEGETATION_ST,RQST_CLI_DISPLAY,REQUEST_SKEY,REQUEST_SEQUENCE,REQUEST_YR,REQUEST_TYPE_ST,SEEDLOT_NUMBER,SEEDLOT_DISPLAY,EXTRCT_CLI_NUMBER,EXTRCT_ACRONYM,EXTRCT_CLI_LOCN,HLS_COLLECTED,HLS_EXTRACTED,GENETIC_CLASS_CODE,SUPERIOR_PRVNC_IND,CLCTN_END_DT,PROC_CMPL_DT,ACTUAL_EXTR_DT,BLENDED_DT,EXTRCT_DT,FIRST_CLEAN_DT,SECOND_CLEAN_DT,ACTUAL_BLN_DT,DEWING_DT,CONESEEDRCV_DT,CLASS,FUNDING_SOURCE,UNIT_PRICE,BASE_PRICE,KILN_LOAD_SACK_COUNT,SL_COMPLETE,COLLECTION_AGENCY,SEPARATION_DT,SPAR_CONTAINER_COUNT,SPAR_CONTAINER_VOLUME,COLL_CLI_NUMBER,COLL_CLI_LOCN,REGISTERED_DT,FIRST_CLEAN_END_DT,ORIGINAL_SEED_QTY,ORIGINAL_POTENTIAL_TREES,COLL_ORG_UNIT_NO,SPAR_SEEDLOT_STATUS,CRITICAL_COMMENT_IND,ORIGINAL_GERMINATION_PCT,ORIGINAL_MC,MOISTURE_METER,RETREAT_EXTRACT,EXTRACT_OUTPUT,FIRST_CLEAN_OUTPUT,DEWING_OUTPUT,SECOND_CLEAN_OUTPUT,SEPARATION_OUTPUT,SHIPMENT_RECEIPT_COUNT,LATEST_SHIPMENT_RECEIPT,EXPECTED_SHIPMENT_RECEIPT,TOTAL_EXPECTED_SACKS,SHIPMENT_SACK_COUNT,RETREAT_VOLUME,ORCHARD_ID,LOT_KILN_BATCH,REQ_COMMENT,SPU_STRING,ORCH_BEC_STRING,YIELD_PER_HL,MCW_CURR,BLEND_MC)
AS
SELECT
-- Created Sept 2001 by M.Ison for pl782
-- modified July 2003, suppress item_id for CSP type requests
             a.request_type_st
          || a.request_yr
          || LPAD (TO_CHAR (a.request_sequence), 4, '0'),
          ' ' item_id,
             a.request_type_st
          || a.request_yr
          || LPAD (TO_CHAR (a.request_sequence), 4, '0')
          || ' ',
          a.spr_rqst_status_st, a.priority_dt, a.vegetation_st,
             RPAD (NVL (client_acronym, NVL (f.clctn_cli_number, ' ')), 9)
          || f.clctn_cli_locn_cd,
          a.request_skey, a.request_sequence, a.request_yr, a.request_type_st,
          f.family_lot_number, f.family_lot_number, f.extrct_cli_number,
          cns_fn_get_client_acronym (f.extrct_cli_number, NULL),
          f.extrct_cli_locn_cd,
          decode (rcp.clctn_volume, null, esv.EXP_FAM_VOLUME, rcp.clctn_volume),
          DECODE (scr.extraction_st_dt, NULL, NULL, rcp.clctn_volume), '',
                                                                           -- no genetic class
          '',
             -- no superior provenance
             f.clctn_end_dt, tst.testing_cmplt_dt, scr.extraction_st_dt,
          cns_fn_get_plan_blend_dt (b.request_skey, b.item_id),
          cns_fn_get_plan_extrct_dt (b.request_skey,
                                     b.item_id,
                                     a.vegetation_st
                                    ),
          cns_fn_max_std_ria_begin_dt (a.request_skey, b.item_id, 'SC1'),
          cns_fn_max_std_ria_begin_dt (a.request_skey, b.item_id, 'SC2'),
          cns_fn_get_act_blend_dt (a.request_skey, b.item_id),
          cns_fn_max_std_ria_begin_dt (a.request_skey, b.item_id, 'DWG'),
          TRUNC (cns_fn_cone_seed_rcpt_dt (a.request_skey, b.item_id)), '',
          '', NULL, NULL, sc.sack_count, sl_complete, NULL,
          cns_fn_max_std_ria_begin_dt (a.request_skey, b.item_id, 'SSP'),
          decode (rcp.clctn_volume, null, esv.EXP_FAM_SACKS, rcp.no_containers),
          rcp.vol_per_container, NULL, NULL, NULL,
          cns_fn_max_std_ria_end_dt (a.request_skey, b.item_id, 'SC1'),
          bal.quantity_of_seed original_seed_qty, fam_orig_pot_trees, NULL,
          NULL, cns_fn_csp_critical_comm (b.request_skey, b.item_id),
          ftr.germination_pct, ftr.moisture_pct,
          cns_fn_get_act_blend_mc (a.request_skey, b.item_id),
          cns_fn_get_retreat_extrct_dt (b.request_skey,
                                        b.item_id,
                                        f.vegetation_st
                                       ),
          DECODE (cns_fn_is_abies (f.vegetation_st),
                  -1, abies_extraction_volume,
                  extract_volume
                 ),
          first_cleaning_volume, dewing_volume, second_cleaning_volume,
          seed_separation_volume, shipment_receipt_count,
          latest_shipment_receipt,
          TO_DATE (DECODE (ABS (  expected_shipment_receipt
                                - TRUNC (NVL (latest_shipment_receipt,
                                              TO_DATE ('01/01/1900 00:00:00',
                                                       'MM/DD/YYYY HH24:MI:SS'
                                                      )
                                             )
                                        )
                               ),
                           0, NULL,
                           expected_shipment_receipt
                          )
                  ),
          DECODE (ABS (  expected_shipment_receipt
                       - TRUNC (NVL (latest_shipment_receipt,
                                     TO_DATE ('01/01/1900 00:00:00',
                                              'MM/DD/YYYY HH24:MI:SS'
                                             )
                                    )
                               )
                      ),
                  0, NULL,
                  total_expected_sacks
                 ),
          shipment_sack_count, retreat_volume, NULL, cns_fn_lot_kiln_string(F.FAMILY_LOT_NUMBER ), CNS_FN_REQ_COMM_STRING(a.request_skey, b.item_id),
          NULL, NULL, NULL,
          cns_fn_get_fl_current_MCW(f.family_lot_number ),
          cns_fn_blend_mc_string(a.request_skey, b.item_id)

     FROM cns_t_spar_request a,
          cns_t_request_item b,
          cns_t_code_subset_tbl d,
          cns_t_family_lot f,
          cns_t_client_acronym g,
          familylot_extraction scr,
          familylot_testing_cmplt_date tst,
          familylot_receipt rcp,
          csp_cones_seedlot_complete slcom,
          csp_fl_sack_count_kln_load sc,
          cns_t_familylot_physbal bal,
          familylot_orig_balance fob,
          familylot_test_results ftr,
          csp_output_volumes csp,
          family_shipment_receipt_count ship,
          FAM_EXP_SHIPMENT_VOLUME esv
    WHERE a.request_skey = b.request_skey
      AND b.family_lot_number IS NOT NULL
      AND a.request_type_st = d.code_argument
      AND d.code_subset_name = 'CSP_RQST_TYPE_ST'
      AND g.client_number(+) = f.clctn_cli_number
      AND scr.family_lot_number(+) = b.family_lot_number
      AND rcp.family_lot_number(+) = b.family_lot_number
      AND tst.family_lot_number(+) = b.family_lot_number
      AND f.family_lot_number(+) = b.family_lot_number
      AND a.request_skey = slcom.request_skey(+)
      AND b.request_skey = sc.request_skey(+)
      AND b.item_id = sc.item_id(+)
      AND bal.family_lot_number(+) = b.family_lot_number
      AND bal.opening_bal_ind(+) = -1
      AND fob.family_lot_number(+) = b.family_lot_number
      AND ftr.family_lot_number(+) = b.family_lot_number
      AND b.request_skey = csp.request_skey(+)
      AND b.item_id = csp.item_id(+)
      AND b.family_lot_number = ship.family_lot_number
      and b.family_lot_number = esv.family_lot_number(+);


-- CONSEP.CNSR12_CSP_OWNER source

CREATE OR REPLACE VIEW CONSEP.CNSR12_CSP_OWNER
(REQ_ID,ITEM_ID,REQUEST_ITEM,SPR_RQST_STATUS_ST,PRIORITY_DT,VEGETATION_ST,RQST_CLI_DISPLAY,RQST_CLI_NUMBER,RQST_CLI_LOCN,REQUEST_SKEY,REQUEST_SEQUENCE,REQUEST_YR,REQUEST_TYPE_ST,SEEDLOT_NUMBER,SEEDLOT_DISPLAY,EXTRCT_CLI_NUMBER,EXTRCT_ACRONYM,EXTRCT_CLI_LOCN,HLS_COLLECTED,HLS_EXTRACTED,GENETIC_CLASS_CODE,SUPERIOR_PRVNC_IND,CLCTN_END_DT,PROC_CMPL_DT,ACTUAL_EXTR_DT,BLENDED_DT,EXTRCT_DT,FIRST_CLEAN_DT,SECOND_CLEAN_DT,ACTUAL_BLN_DT,DEWING_DT,CONESEEDRCV_DT,CLASS,FUNDING_SOURCE,UNIT_PRICE,BASE_PRICE,KILN_LOAD_SACK_COUNT,SL_COMPLETE,COLLECTION_AGENCY,SEPARATION_DT,SPAR_CONTAINER_COUNT,SPAR_CONTAINER_VOLUME,COLL_CLI_NUMBER,COLL_CLI_LOCN,REGISTERED_DT,FIRST_CLEAN_END_DT,ORIGINAL_SEED_QTY,ORIGINAL_POTENTIAL_TREES,COLL_ORG_UNIT_NO,SPAR_SEEDLOT_STATUS,CRITICAL_COMMENT_IND,ORIGINAL_GERMINATION_PCT,ORIGINAL_MC,MOISTURE_METER,RETREAT_EXTRACT,EXTRACT_OUTPUT,FIRST_CLEAN_OUTPUT,DEWING_OUTPUT,SECOND_CLEAN_OUTPUT,SEPARATION_OUTPUT,SHIPMENT_RECEIPT_COUNT,LATEST_SHIPMENT_RECEIPT,EXPECTED_SHIPMENT_RECEIPT,TOTAL_EXPECTED_SACKS,SHIPMENT_SACK_COUNT,RETREAT_VOLUME,ORCHARD_ID,LOT_KILN_BATCH,REQ_COMMENT,SPU_STRING,ORCH_BEC_STRING,YIELD_PER_HL,MCW_CURR,BLEND_MC)
AS
SELECT
--Modified July 2003 by mdellavi, suppress item_id display for SRQ/CSP type requests
             a.request_type_st
          || a.request_yr
          || LPAD (TO_CHAR (a.request_sequence), 4, '0'),
          ' ' item_id,
             a.request_type_st
          || a.request_yr
          || LPAD (TO_CHAR (a.request_sequence), 4, '0')
          || ' ',
          a.spr_rqst_status_st, a.priority_dt, a.vegetation_st,
          NVL (owner_acronym, owner_number) || ' ' || owner_locn_code,
          f.owner_number, f.owner_locn_code, a.request_skey,
          a.request_sequence, a.request_yr, a.request_type_st,
          e.seedlot_number,
          DECODE (e.registerd_seed_ind,
                  -1, e.seedlot_number,
                  e.seedlot_number || 'U'
                 ),
          e.extrct_cli_number,
          cns_fn_get_client_acronym (e.extrct_cli_number, NULL),
          e.extrct_cli_locn_cd,
          e.clctn_volume * NVL (original_pct_owned, 100) / 100,
          e.extraction_volume * NVL (original_pct_owned, 100) / 100,
          e.genetic_class_code, e.superior_prvnc_ind, e.clctn_end_dt,
          e.processng_cmplt_dt, e.extraction_st_dt,
          cns_fn_get_plan_blend_dt (b.request_skey, b.item_id),
          cns_fn_get_plan_extrct_dt (b.request_skey,
                                     b.item_id,
                                     a.vegetation_st
                                    ),
          cns_fn_max_std_ria_begin_dt (a.request_skey, b.item_id, 'SC1'),
          cns_fn_max_std_ria_begin_dt (a.request_skey, b.item_id, 'SC2'),
          cns_fn_get_act_blend_dt (a.request_skey, b.item_id),
          cns_fn_max_std_ria_begin_dt (a.request_skey, b.item_id, 'DWG'),
          cns_fn_cone_seed_rcpt_dt (a.request_skey, b.item_id),
             e.genetic_class_code
          || DECODE (NVL (e.superior_prvnc_ind, 0), -1, '+', ' '),
          f.spar_fund_srce_st, g.unit_price, g.base_price, sc.sack_count,
          sl_complete, coll_acro.client_acronym || ' ' || e.clctn_cli_locn_cd,
          cns_fn_max_std_ria_begin_dt (a.request_skey, b.item_id, 'SSP'),
          e.no_of_containers, e.vol_per_container, e.clctn_cli_number,
          e.clctn_cli_locn_cd, e.registered_dt,
          cns_fn_max_std_ria_end_dt (a.request_skey, b.item_id, 'SC1'),
          ROUND (e.original_seed_qty * NVL (original_pct_owned, 100) / 100, 1),
          ROUND (original_potential_trees * NVL (original_pct_owned, 100)
                 / 100,
                 1
                ),
          cns_fn_get_org_unit_code (e.org_unit_no), e.seedlot_status_st,
          cns_fn_csp_critical_comm (b.request_skey, b.item_id),
          ogc.germination_pct, ogc.moisture_pct,
          cns_fn_get_act_blend_mc (a.request_skey, b.item_id),
          cns_fn_get_retreat_extrct_dt (b.request_skey,
                                        b.item_id,
                                        a.vegetation_st
                                       ),
          NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
          orchard_id, cns_fn_lot_kiln_string(C.SEEDLOT_NUMBER), CNS_FN_REQ_COMM_STRING(a.request_skey, b.item_id),
          seedlot_plan_unit_summary.SPU_STRING,
          BEC_STRING, DECODE (e.extraction_volume,
                  0, NULL,
                  e.original_seed_qty / (e.extraction_volume * 1000)
                 ),
                 cns_fn_get_sl_current_MCW(e.seedlot_number ),
                 cns_fn_blend_mc_string(a.request_skey, b.item_id)


     FROM cns_t_spar_request a,
          cns_t_request_item b,
          cns_t_request_seedlot c,
          cns_t_code_subset_tbl d,
          cns_t_seedlot e,
          original_seed_owners f,
          cns_t_blng_itm_price g,
          csp_sl_sack_count_kln_load sc,
          csp_cones_seedlot_complete slcom,
          cns_t_client_acronym coll_acro,
          original_potential_trees opt,
          original_germ_results_no_gsa ogc,
          seedlot_plan_unit_summary
    WHERE a.request_skey = b.request_skey
      AND c.request_skey = b.request_skey
      AND c.item_id = b.item_id
      AND e.seedlot_number = c.seedlot_number
      AND a.request_type_st = d.code_argument
      AND d.code_subset_name = 'CSP_RQST_TYPE_ST'
      AND c.seedlot_number = f.seedlot_number(+)
      AND a.vegetation_st = g.vegetation_code(+)
      AND a.request_type_st = g.billing_item_id(+)
      AND c.request_skey = sc.request_skey(+)
      AND c.item_id = sc.item_id(+)
      AND c.request_skey = slcom.request_skey(+)
      AND c.item_id = slcom.item_id(+)
      AND e.clctn_cli_number = coll_acro.client_number(+)
      AND e.seedlot_number = opt.seedlot_number(+)
      AND e.seedlot_number = ogc.seedlot_number(+)
      AND e.seedlot_number = seedlot_plan_unit_summary.Seedlot_number(+);


-- CONSEP.CNSR12_CSP_RQST_FOR_CLIENT source

CREATE OR REPLACE VIEW CONSEP.CNSR12_CSP_RQST_FOR_CLIENT
(REQ_ID,ITEM_ID,REQUEST_ITEM,SPR_RQST_STATUS_ST,PRIORITY_DT,VEGETATION_ST,RQST_CLI_DISPLAY,RQST_CLI_NUMBER,RQST_CLI_LOCN,REQUEST_SKEY,REQUEST_SEQUENCE,REQUEST_YR,REQUEST_TYPE_ST,SEEDLOT_NUMBER,SEEDLOT_DISPLAY,EXTRCT_CLI_NUMBER,EXTRCT_ACRONYM,EXTRCT_CLI_LOCN,HLS_COLLECTED,HLS_EXTRACTED,CLCTN_END_DT,PROC_CMPL_DT,ACTUAL_EXTR_DT,GENETIC_CLASS_CODE,SUPERIOR_PRVNC_IND,BLENDED_DT,EXTRCT_DT,FIRST_CLEAN_DT,SECOND_CLEAN_DT,ACTUAL_BLN_DT,DEWING_DT,CONESEEDRCV_DT,CLASS,FUNDING_SOURCE,UNIT_PRICE,BASE_PRICE,KILN_LOAD_SACK_COUNT,SL_COMPLETE,COLLECTION_AGENCY,SEPARATION_DT,SPAR_CONTAINER_COUNT,SPAR_CONTAINER_VOLUME,COLL_CLI_NUMBER,COLL_CLI_LOCN,REGISTERED_DT,FIRST_CLEAN_END_DT,ORIGINAL_SEED_QTY,ORIGINAL_POTENTIAL_TREES,COLL_ORG_UNIT_NO,SPAR_SEEDLOT_STATUS,CRITICAL_COMMENT_IND,ORIGINAL_GERMINATION_PCT,ORIGINAL_MC,MOISTURE_METER,RETREAT_EXTRACT,EXTRACT_OUTPUT,FIRST_CLEAN_OUTPUT,DEWING_OUTPUT,SECOND_CLEAN_OUTPUT,SEPARATION_OUTPUT,SHIPMENT_RECEIPT_COUNT,LATEST_SHIPMENT_RECEIPT,EXPECTED_SHIPMENT_RECEIPT,TOTAL_EXPECTED_SACKS,SHIPMENT_SACK_COUNT,RETREAT_VOLUME,ORCHARD_ID,LOT_KILN_BATCH,REQ_COMMENT,SPU_STRING,ORCH_BEC_STRING,YIELD_PER_HL,MCW_CURR,BLEND_MC)
AS
SELECT
-- modified July 2003 by mdellavi, suppress item_id display
             a.request_type_st
          || a.request_yr
          || LPAD (TO_CHAR (a.request_sequence), 4, '0'),
          ' ' item_id,
             a.request_type_st
          || a.request_yr
          || LPAD (TO_CHAR (a.request_sequence), 4, '0')
          || ' ',
          a.spr_rqst_status_st, a.priority_dt, a.vegetation_st,
          cns_fn_get_csp_requestor (e.seedlot_number),
--Cns_Fn_Get_Csp_Requestor(e.SEEDLOT_NUMBER) ||' ' || c.CLIENT_LOCN_CODE,
--NVL(CA.CLIENT_ACRONYM,c.CLIENT_NUMBER) || ' ' || c.CLIENT_LOCN_CODE,
                                                      c.client_number,
          c.client_locn_code, a.request_skey, a.request_sequence,
          a.request_yr, a.request_type_st, e.seedlot_number,
          DECODE (e.registerd_seed_ind,
                  -1, e.seedlot_number,
                  e.seedlot_number || 'U'
                 ),
          e.extrct_cli_number,
          cns_fn_get_client_acronym (e.extrct_cli_number, NULL),
          e.extrct_cli_locn_cd,
          e.clctn_volume * NVL (original_pct_owned, 100) / 100,
          e.extraction_volume * NVL (original_pct_owned, 100) / 100,
          e.clctn_end_dt, e.processng_cmplt_dt, e.extraction_st_dt,
          e.genetic_class_code, e.superior_prvnc_ind,
          cns_fn_get_plan_blend_dt (b.request_skey, b.item_id),
          cns_fn_get_plan_extrct_dt (b.request_skey,
                                     b.item_id,
                                     a.vegetation_st
                                    ),
          cns_fn_max_std_ria_begin_dt (a.request_skey, b.item_id, 'SC1'),
          cns_fn_max_std_ria_begin_dt (a.request_skey, b.item_id, 'SC2'),
          cns_fn_get_act_blend_dt (a.request_skey, b.item_id),
          cns_fn_max_std_ria_begin_dt (a.request_skey, b.item_id, 'DWG'),
          cns_fn_cone_seed_rcpt_dt (a.request_skey, b.item_id),
             e.genetic_class_code
          || DECODE (NVL (e.superior_prvnc_ind, 0), -1, '+', ' '),
          cns_fn_get_spar_fund_srce_dsc
                              (cns_fn_get_spar_fund_srce_st (c.seedlot_number),
                               c.seedlot_number
                              ),
          g.unit_price, g.base_price, sc.sack_count, sl_complete,
          coll_acro.client_acronym || ' ' || e.clctn_cli_locn_cd,
          cns_fn_max_std_ria_begin_dt (a.request_skey, b.item_id, 'SSP'),
          e.no_of_containers, e.vol_per_container, e.clctn_cli_number,
          e.clctn_cli_locn_cd, e.registered_dt,
          cns_fn_max_std_ria_end_dt (a.request_skey, b.item_id, 'SC1'),
          e.original_seed_qty, original_potential_trees,
          cns_fn_get_org_unit_code (e.org_unit_no), e.seedlot_status_st,
          cns_fn_csp_critical_comm (b.request_skey, b.item_id),
          ogc.germination_pct, ogc.moisture_pct,
          cns_fn_get_act_blend_mc (a.request_skey, b.item_id),
          cns_fn_get_retreat_extrct_dt (b.request_skey,
                                        b.item_id,
                                        a.vegetation_st
                                       ),
          DECODE (cns_fn_is_abies (e.vegetation_st),
                  0, abies_extraction_volume,
                  extract_volume
                 ),
          first_cleaning_volume, dewing_volume, second_cleaning_volume,
          seed_separation_volume, shipment_receipt_count,
          latest_shipment_receipt,
          TO_DATE (DECODE (ABS (  expected_shipment_receipt
                                - TRUNC (NVL (latest_shipment_receipt,
                                              TO_DATE ('01/01/1900 00:00:00',
                                                       'MM/DD/YYYY HH24:MI:SS'
                                                      )
                                             )
                                        )
                               ),
                           0, NULL,
                           expected_shipment_receipt
                          )
                  ),
          DECODE (ABS (  expected_shipment_receipt
                       - TRUNC (NVL (latest_shipment_receipt,
                                     TO_DATE ('01/01/1900 00:00:00',
                                              'MM/DD/YYYY HH24:MI:SS'
                                             )
                                    )
                               )
                      ),
                  0, NULL,
                  total_expected_sacks
                 ),
          shipment_sack_count, retreat_volume, orchard_id, cns_fn_lot_kiln_string(C.SEEDLOT_NUMBER),  CNS_FN_REQ_COMM_STRING(a.request_skey, b.item_id),
          seedlot_plan_unit_summary.SPU_STRING,
          BEC_STRING, DECODE (e.extraction_volume,
                  0, NULL,
                  e.original_seed_qty / (e.extraction_volume * 1000)
                 ),
cns_fn_get_sl_current_MCW(e.seedlot_number ),
cns_fn_blend_mc_string(a.request_skey, b.item_id)


     FROM cns_t_spar_request a,
          cns_t_request_item b,
          cns_t_seedlot_own_qty c,
          cns_t_code_subset_tbl d,
          cns_t_seedlot e,
          cns_t_request_seedlot f,
          cns_t_blng_itm_price g,
          csp_sl_sack_count_kln_load sc,
          cns_t_client_acronym ca,
          csp_cones_seedlot_complete slcom,
          cns_t_client_acronym coll_acro,
          original_potential_trees opt,
          original_germ_results_no_gsa ogc,
          csp_output_volumes csp_vol,
          seedlot_shipment_receipt_count ship,
          seedlot_plan_unit_summary
    WHERE a.request_skey = b.request_skey
      AND f.request_skey = b.request_skey
      AND f.item_id = b.item_id
      AND e.seedlot_number = f.seedlot_number
      AND c.seedlot_number = e.seedlot_number
      AND c.original_pct_owned > 0
      AND a.request_type_st = d.code_argument
      AND d.code_subset_name = 'CSP_RQST_TYPE_ST'
      AND a.vegetation_st = g.vegetation_code(+)
      AND a.request_type_st = g.billing_item_id(+)
      AND f.request_skey = sc.request_skey(+)
      AND f.item_id = sc.item_id(+)
      AND c.client_number = ca.client_number(+)
      AND f.request_skey = slcom.request_skey(+)
      AND f.item_id = slcom.item_id(+)
      AND e.clctn_cli_number = coll_acro.client_number(+)
      AND e.seedlot_number = opt.seedlot_number(+)
      AND e.seedlot_number = ogc.seedlot_number
      AND b.request_skey = csp_vol.request_skey(+)
      AND b.item_id = csp_vol.item_id(+)
      AND e.seedlot_number = ship.seedlot_number
      AND e.seedlot_number = seedlot_plan_unit_summary.seedlot_number(+);


-- CONSEP.CNSR12_CSP_RQST_FOR_CLI_FAMILY source

CREATE OR REPLACE VIEW CONSEP.CNSR12_CSP_RQST_FOR_CLI_FAMILY
(REQ_ID,ITEM_ID,REQUEST_ITEM,SPR_RQST_STATUS_ST,PRIORITY_DT,VEGETATION_ST,RQST_CLI_DISPLAY,RQST_CLI_NUMBER,RQST_CLI_LOCN,REQUEST_SKEY,REQUEST_SEQUENCE,REQUEST_YR,REQUEST_TYPE_ST,FAMILY_LOT_NUMBER,SEEDLOT_DISPLAY,EXTRCT_CLI_NUMBER,EXTRCT_ACRONYM,EXTRCT_CLI_LOCN,HLS_COLLECTED,HLS_EXTRACTED,CLCTN_END_DT,PROC_CMPL_DT,ACTUAL_EXTR_DT,GENETIC_CLASS_CODE,SUPERIOR_PRVNC_IND,BLENDED_DT,EXTRCT_DT,FIRST_CLEAN_DT,SECOND_CLEAN_DT,ACTUAL_BLN_DT,DEWING_DT,CONESEEDRCV_DT,CLASS,FUNDING_SOURCE,UNIT_PRICE,BASE_PRICE,KILN_LOAD_SACK_COUNT,SL_COMPLETE,COLLECTION_AGENCY,SEPARATION_DT,SPAR_CONTAINER_COUNT,SPAR_CONTAINER_VOLUME,COLL_CLI_NUMBER,COLL_CLI_LOCN,REGISTERED_DT,FIRST_CLEAN_END_DT,ORIGINAL_SEED_QTY,ORIGINAL_POTENTIAL_TREES,COLL_ORG_UNIT_NO,SPAR_SEEDLOT_STATUS,CRITICAL_COMMENT_IND,ORIGINAL_GERMINATION_PCT,ORIGINAL_MC,MOISTURE_METER,RETREAT_EXTRACT,EXTRACT_OUTPUT,FIRST_CLEAN_OUTPUT,DEWING_OUTPUT,SECOND_CLEAN_OUTPUT,SEPARATION_OUTPUT,SHIPMENT_RECEIPT_COUNT,LATEST_SHIPMENT_RECEIPT,EXPECTED_SHIPMENT_RECEIPT,TOTAL_EXPECTED_SACKS,SHIPMENT_SACK_COUNT,RETREAT_VOLUME,ORCHARD_ID,LOT_KILN_BATCH,REQ_COMMENT,SPU_STRING,ORCH_BEC_STRING,YIELD_PER_HL,MCW_CURR,BLEND_MC)
AS
SELECT
-- modified July 2003 by mdellavi, suppress item_id display
             a.request_type_st
          || a.request_yr
          || LPAD (TO_CHAR (a.request_sequence), 4, '0'),
          ' ' item_id,
             a.request_type_st
          || a.request_yr
          || LPAD (TO_CHAR (a.request_sequence), 4, '0')
          || ' ',
          a.spr_rqst_status_st, a.priority_dt, a.vegetation_st,
             RPAD (NVL (client_acronym, NVL (f.clctn_cli_number, ' ')), 9)
          || f.clctn_cli_locn_cd,
          f.clctn_cli_number, f.clctn_cli_locn_cd, a.request_skey,
          a.request_sequence, a.request_yr, a.request_type_st,
          f.family_lot_number, f.family_lot_number, f.extrct_cli_number,
          cns_fn_get_client_acronym (f.extrct_cli_number, NULL),
          f.extrct_cli_locn_cd, rcp.clctn_volume, rcp.clctn_volume,
          f.clctn_end_dt, tst.testing_cmplt_dt, scr.extraction_st_dt, '',
                                                                          -- no genetic class
          '',
             -- no superior provenance
             cns_fn_get_plan_blend_dt (b.request_skey, b.item_id),
          cns_fn_get_plan_extrct_dt (b.request_skey,
                                     b.item_id,
                                     a.vegetation_st
                                    ),
          cns_fn_max_std_ria_begin_dt (a.request_skey, b.item_id, 'SC1'),
          cns_fn_max_std_ria_begin_dt (a.request_skey, b.item_id, 'SC2'),
          cns_fn_get_act_blend_dt (a.request_skey, b.item_id),
          cns_fn_max_std_ria_begin_dt (a.request_skey, b.item_id, 'DWG'),
          cns_fn_cone_seed_rcpt_dt (a.request_skey, b.item_id), '', '', NULL,
          NULL, sc.sack_count, sl_complete, NULL,
          cns_fn_max_std_ria_begin_dt (a.request_skey, b.item_id, 'SSP'),
          rcp.no_containers, rcp.vol_per_container, NULL, NULL, NULL,
          cns_fn_max_std_ria_end_dt (a.request_skey, b.item_id, 'SC1'), NULL,
          NULL, NULL, NULL,
          cns_fn_csp_critical_comm (b.request_skey, b.item_id),
          ftr.germination_pct, ftr.moisture_pct,
          cns_fn_get_act_blend_mc (a.request_skey, b.item_id),
          cns_fn_get_retreat_extrct_dt (b.request_skey,
                                        b.item_id,
                                        f.vegetation_st
                                       ),
          DECODE (cns_fn_is_abies (f.vegetation_st),
                  0, abies_extraction_volume,
                  extract_volume
                 ),
          first_cleaning_volume, dewing_volume, second_cleaning_volume,
          seed_separation_volume, shipment_receipt_count,
          latest_shipment_receipt,
          TO_DATE (DECODE (ABS (  expected_shipment_receipt
                                - TRUNC (NVL (latest_shipment_receipt,
                                              TO_DATE ('01/01/1900 00:00:00',
                                                       'MM/DD/YYYY HH24:MI:SS'
                                                      )
                                             )
                                        )
                               ),
                           0, NULL,
                           expected_shipment_receipt
                          )
                  ),
          DECODE (ABS (  expected_shipment_receipt
                       - TRUNC (NVL (latest_shipment_receipt,
                                     TO_DATE ('01/01/1900 00:00:00',
                                              'MM/DD/YYYY HH24:MI:SS'
                                             )
                                    )
                               )
                      ),
                  0, NULL,
                  total_expected_sacks
                 ),
          shipment_sack_count, retreat_volume, orchard_id, cns_fn_lot_kiln_string(F.FAMILY_LOT_NUMBER ), CNS_FN_REQ_COMM_STRING(a.request_skey, b.item_id),
          NULL, NULL, NULL,
          cns_fn_get_fl_current_MCW(f.family_lot_number ),
          cns_fn_blend_mc_string(a.request_skey, b.item_id)

     FROM cns_t_spar_request a,
          cns_t_request_item b,
          cns_t_family_lot f,
          cns_t_code_subset_tbl d,
          cns_t_client_acronym acr,
          familylot_extraction scr,
          familylot_testing_cmplt_date tst,
          familylot_receipt rcp,
          csp_cones_seedlot_complete slcom,
          csp_fl_sack_count_kln_load sc,
          familylot_test_results ftr,
          csp_output_volumes csp_vol,
          family_shipment_receipt_count ship
    WHERE b.request_skey = a.request_skey
      AND b.family_lot_number IS NOT NULL
      AND a.request_type_st = d.code_argument
      AND d.code_subset_name = 'CSP_RQST_TYPE_ST'
      AND acr.client_number(+) = f.clctn_cli_number
      AND scr.family_lot_number(+) = b.family_lot_number
      AND rcp.family_lot_number(+) = b.family_lot_number
      AND tst.family_lot_number(+) = b.family_lot_number
      AND f.family_lot_number(+) = b.family_lot_number
      AND a.request_skey = slcom.request_skey(+)
      AND b.request_skey = sc.request_skey(+)
      AND b.item_id = sc.item_id(+)
      AND ftr.family_lot_number(+) = f.family_lot_number
      AND b.request_skey = csp_vol.request_skey(+)
      AND b.item_id = csp_vol.item_id(+)
      AND f.family_lot_number = ship.family_lot_number;


-- CONSEP.CNSR12_CSP_UNION source

CREATE OR REPLACE VIEW CONSEP.CNSR12_CSP_UNION
(REQ_ID,ITEM_ID,REQUEST_ITEM,SPR_RQST_STATUS_ST,PRIORITY_DT,VEGETATION_ST,RQST_CLI_DISPLAY,REQUEST_SKEY,REQUEST_SEQUENCE,REQUEST_YR,REQUEST_TYPE_ST,SEEDLOT_NUMBER,SEEDLOT_DISPLAY,EXTRCT_CLI_NUMBER,EXTRCT_ACRONYM,EXTRCT_CLI_LOCN,HLS_COLLECTED,HLS_EXTRACTED,GENETIC_CLASS_CODE,SUPERIOR_PRVNC_IND,CLCTN_END_DT,PROC_CMPL_DT,ACTUAL_EXTR_DT,BLENDED_DT,EXTRCT_DT,FIRST_CLEAN_DT,SECOND_CLEAN_DT,ACTUAL_BLN_DT,DEWING_DT,CONESEEDRCV_DT,CLASS,FUNDING_SOURCE,UNIT_PRICE,BASE_PRICE,KILN_LOAD_SACK_COUNT,SL_COMPLETE,COLLECTION_AGENCY,SEPARATION_DT,SPAR_CONTAINER_COUNT,SPAR_CONTAINER_VOLUME,COLL_CLI_NUMBER,COLL_CLI_LOCN,REGISTERED_DT,FIRST_CLEAN_END_DT,ORIGINAL_SEED_QTY,ORIGINAL_POTENTIAL_TREES,COLL_ORG_UNIT_NO,SPAR_SEEDLOT_STATUS,CRITICAL_COMMENT_IND,ORIGINAL_GERMINATION_PCT,ORIGINAL_MC,MOISTURE_METER,RETREAT_EXTRACT,EXTRACT_OUTPUT,FIRST_CLEAN_OUTPUT,DEWING_OUTPUT,SECOND_CLEAN_OUTPUT,SEPARATION_OUTPUT,SHIPMENT_RECEIPT_COUNT,LATEST_SHIPMENT_RECEIPT,EXPECTED_SHIPMENT_RECEIPT,TOTAL_EXPECTED_SACKS,SHIPMENT_SACK_COUNT,RETREAT_VOLUME,ORCHARD_ID,LOT_KILN_BATCH,REQ_COMMENT,SPU_STRING,ORCH_BEC_STRING,YIELD_PER_HL,MCW_CURR,BLEND_MC)
AS
SELECT req_id, item_id, request_item, spr_rqst_status_st, priority_dt,
          vegetation_st, rqst_cli_display, request_skey, request_sequence,
          request_yr, request_type_st, seedlot_number, seedlot_display,
          extrct_cli_number, extrct_acronym, extrct_cli_locn, hls_collected,
          hls_extracted, genetic_class_code, superior_prvnc_ind, clctn_end_dt,
          proc_cmpl_dt, actual_extr_dt, blended_dt, extrct_dt, first_clean_dt,
          second_clean_dt, actual_bln_dt, dewing_dt, coneseedrcv_dt, CLASS,
          funding_source, unit_price, base_price, kiln_load_sack_count,
          sl_complete, collection_agency, separation_dt, spar_container_count,
          spar_container_volume, coll_cli_number, coll_cli_locn,
          registered_dt, first_clean_end_dt, original_seed_qty,
          original_potential_trees, coll_org_unit_no, spar_seedlot_status,
          critical_comment_ind, original_germination_pct, original_mc,
          moisture_meter, retreat_extract, extract_output, first_clean_output,
          dewing_output, second_clean_output, separation_output,
          shipment_receipt_count, latest_shipment_receipt,
          expected_shipment_receipt, total_expected_sacks,
          shipment_sack_count, retreat_volume, orchard_id, lot_kiln_batch, REQ_COMMENT, SPU_STRING, ORCH_BEC_STRING, YIELD_PER_HL, MCW_CURR, BLEND_MC
          FROM cnsr12_csp
   UNION ALL
   SELECT req_id, item_id, request_item, spr_rqst_status_st, priority_dt,
          vegetation_st, rqst_cli_display, request_skey, request_sequence,
          request_yr, request_type_st, seedlot_number, seedlot_display,
          extrct_cli_number, extrct_acronym, extrct_cli_locn, hls_collected,
          TO_NUMBER (hls_extracted), genetic_class_code,
          TO_NUMBER (superior_prvnc_ind), clctn_end_dt, proc_cmpl_dt,
          actual_extr_dt, blended_dt, extrct_dt, first_clean_dt,
          second_clean_dt, actual_bln_dt, dewing_dt, coneseedrcv_dt, CLASS,
          funding_source, unit_price, base_price, kiln_load_sack_count,
          sl_complete, collection_agency, separation_dt, spar_container_count,
          spar_container_volume, coll_cli_number, coll_cli_locn,
          registered_dt, first_clean_end_dt, original_seed_qty,
          original_potential_trees, coll_org_unit_no, spar_seedlot_status,
          critical_comment_ind, TO_NUMBER (original_germination_pct),
          original_mc, moisture_meter, retreat_extract, extract_output,
          first_clean_output, dewing_output, second_clean_output,
          separation_output, shipment_receipt_count, latest_shipment_receipt,
          expected_shipment_receipt, total_expected_sacks,
          shipment_sack_count, retreat_volume, orchard_id, lot_kiln_batch, REQ_COMMENT, SPU_STRING, ORCH_BEC_STRING, YIELD_PER_HL, MCW_CURR, BLEND_MC
     FROM cnsr12_csp_family;


-- CONSEP.CNSR14 source

CREATE OR REPLACE VIEW CONSEP.CNSR14
(SEEDLOT_NUMBER,SEEDLOT_DISPLAY,REQUEST_ITEM,VEGETATION_ST,EXTRACTORY,EXTRCT_CLI_LOCN_CD,PRIORITY_DT,PURITY_PCT,MOISTURE_PCT,SEEDS_PER_GRAM,GERM_TEST_DATE,GERM_TEST_COMPLETE_IND)
AS
SELECT
s.SEEDLOT_NUMBER,
DECODE(s.REGISTERD_SEED_IND, -1,
       s.SEEDLOT_NUMBER, s.SEEDLOT_NUMBER||'U'),
rmc.REQUEST_ID||rmc.ITEM_ID,
s.VEGETATION_ST,
cns_fn_GET_CLIENT_ACRONYM(s.EXTRCT_CLI_NUMBER, NULL),
EXTRCT_CLI_LOCN_CD,
rqst.PRIORITY_DT,
pur.PURITY_PCT,
mc.MOISTURE_PCT,
spg.SEEDS_PER_GRAM,
DECODE(grm.TEST_COMPLETE_IND,-1,rgrm.ACTUAL_END_DT_TM,rgrm.PLANNED_END_DT),
grm.TEST_COMPLETE_IND
FROM    CNS_T_SEEDLOT s,
 CNS_T_RQST_ITM_ACTVTY rmc,
 CNS_T_RQST_ITM_ACTVTY rpur,
 CNS_T_RQST_ITM_ACTVTY rspg,
 CNS_T_RQST_ITM_ACTVTY rgrm,
 CNS_T_TSC_TEST_RESULT mc,
 CNS_T_TSC_TEST_RESULT pur,
 CNS_T_TSC_TEST_RESULT spg,
 CNS_T_TSC_TEST_RESULT grm,
 CNS_T_TEST_REGIME reg,
 CNS_T_SPAR_REQUEST rqst
WHERE   s.READY_FOR_STRG_DT  IS NULL
AND rmc.SEEDLOT_NUMBER = s.SEEDLOT_NUMBER
AND rmc.REQUEST_SKEY > 0
AND rmc.ACTIVITY_TYPE_CD = 'MC'
AND rmc.TEST_CATEGORY_CD = 'STD'
AND mc.RIA_SKEY  = rmc.RIA_SKEY
AND mc.ACCEPT_RESULT_IND = -1
AND mc.TEST_COMPLETE_IND = -1
AND rqst.REQUEST_SKEY = rmc.REQUEST_SKEY
AND rqst.REQUEST_TYPE_ST IN ('ASP','CSP','SSP','USP','RSP')
AND rqst.SPR_RQST_STATUS_ST <> 'CAN'
AND rpur.SEEDLOT_NUMBER = s.SEEDLOT_NUMBER
AND rpur.REQUEST_SKEY = rmc.REQUEST_SKEY
AND rpur.REQUEST_SKEY > 0
AND rpur.ACTIVITY_TYPE_CD = 'PUR'
AND rpur.TEST_CATEGORY_CD = 'STD'
AND pur.RIA_SKEY  = rpur.RIA_SKEY
AND pur.ACCEPT_RESULT_IND = -1
AND pur.TEST_COMPLETE_IND = -1
AND rspg.SEEDLOT_NUMBER = s.SEEDLOT_NUMBER
AND spg.RIA_SKEY  = rspg.RIA_SKEY
AND rspg.REQUEST_SKEY = rpur.REQUEST_SKEY
AND rspg.REQUEST_SKEY > 0
AND rspg.ACTIVITY_TYPE_CD = 'SPG'
AND rspg.TEST_CATEGORY_CD = 'STD'
AND rgrm.SEEDLOT_NUMBER = s.SEEDLOT_NUMBER
--AND rgrm.REQUEST_SKEY = rspg.REQUEST_SKEY
AND rgrm.REQUEST_SKEY > 0
AND SUBSTR(rgrm.REQUEST_ID,1,3) IN ('ASP','CSP','SSP','USP','RSP', 'TST')
AND rgrm.TEST_CATEGORY_CD = 'STD'
AND grm.RIA_SKEY  = rgrm.RIA_SKEY
AND reg.SEEDLOT_TEST_CODE = grm.ACTIVITY_TYPE_CD
union
SELECT
f.FAMILY_LOT_NUMBER,
f.FAMILY_LOT_NUMBER,
rmc.REQUEST_ID||rmc.ITEM_ID,
f.VEGETATION_ST,
' ',' ',
rqst.PRIORITY_DT,
pur.PURITY_PCT,
mc.MOISTURE_PCT,
spg.SEEDS_PER_GRAM,
DECODE(grm.TEST_COMPLETE_IND,-1,rgrm.ACTUAL_END_DT_TM,rgrm.PLANNED_END_DT),
grm.TEST_COMPLETE_IND
FROM    CNS_T_FAMILY_LOT f,
 CNS_T_RQST_ITM_ACTVTY rmc,
 CNS_T_RQST_ITM_ACTVTY rpur,
 CNS_T_RQST_ITM_ACTVTY rspg,
 CNS_T_RQST_ITM_ACTVTY rgrm,
 CNS_T_TSC_TEST_RESULT mc,
 CNS_T_TSC_TEST_RESULT pur,
 CNS_T_TSC_TEST_RESULT spg,
 CNS_T_TSC_TEST_RESULT grm,
 CNS_T_TEST_REGIME reg,
 CNS_T_SPAR_REQUEST rqst,
 CNS_T_REQUEST_ITEM item
WHERE   f.READY_FOR_STRG_DT  IS NULL
AND item.FAMILY_LOT_NUMBER = f.FAMILY_LOT_NUMBER
AND item.request_skey = rqst.request_skey
AND rmc.REQUEST_SKEY > 0
AND rmc.ACTIVITY_TYPE_CD = 'MC'
AND rmc.TEST_CATEGORY_CD = 'STD'
AND mc.RIA_SKEY  = rmc.RIA_SKEY
AND mc.ACCEPT_RESULT_IND = -1
AND mc.TEST_COMPLETE_IND = -1
AND rqst.REQUEST_SKEY = rmc.REQUEST_SKEY
AND rqst.REQUEST_TYPE_ST IN ('ASP','CSP','SSP','USP')
AND rqst.SPR_RQST_STATUS_ST <> 'CAN'
AND rpur.REQUEST_SKEY = rmc.REQUEST_SKEY
AND rpur.REQUEST_SKEY > 0
AND rpur.ACTIVITY_TYPE_CD = 'PUR'
AND rpur.TEST_CATEGORY_CD = 'STD'
AND pur.RIA_SKEY  = rpur.RIA_SKEY
AND pur.ACCEPT_RESULT_IND = -1
AND pur.TEST_COMPLETE_IND = -1
AND spg.RIA_SKEY  = rspg.RIA_SKEY
AND rspg.REQUEST_SKEY = rpur.REQUEST_SKEY
AND rspg.REQUEST_SKEY > 0
AND rspg.ACTIVITY_TYPE_CD = 'SPG'
AND rspg.TEST_CATEGORY_CD = 'STD'
AND rgrm.REQUEST_SKEY = rspg.REQUEST_SKEY
AND rgrm.REQUEST_SKEY > 0
AND rgrm.TEST_CATEGORY_CD = 'STD'
AND grm.RIA_SKEY  = rgrm.RIA_SKEY
AND reg.SEEDLOT_TEST_CODE = grm.ACTIVITY_TYPE_CD;


-- CONSEP.CNSR14_ORIG source

CREATE OR REPLACE VIEW CONSEP.CNSR14_ORIG
(SEEDLOT_NUMBER,SEEDLOT_DISPLAY,REQUEST_ITEM,VEGETATION_ST,EXTRACTORY,EXTRCT_CLI_LOCN_CD,PRIORITY_DT,PURITY_PCT,MOISTURE_PCT,SEEDS_PER_GRAM,GERM_TEST_DATE,GERM_TEST_COMPLETE_IND)
AS
SELECT
s.SEEDLOT_NUMBER,
DECODE(s.REGISTERD_SEED_IND, -1,
       s.SEEDLOT_NUMBER, s.SEEDLOT_NUMBER||'U'),
rmc.REQUEST_ID||rmc.ITEM_ID,
s.VEGETATION_ST,
cns_fn_GET_CLIENT_ACRONYM(s.EXTRCT_CLI_NUMBER, NULL),
EXTRCT_CLI_LOCN_CD,
rqst.PRIORITY_DT,
pur.PURITY_PCT,
mc.MOISTURE_PCT,
spg.SEEDS_PER_GRAM,
DECODE(grm.TEST_COMPLETE_IND,-1,rgrm.ACTUAL_END_DT_TM,rgrm.PLANNED_END_DT),
grm.TEST_COMPLETE_IND
FROM    CNS_T_SEEDLOT s,
 CNS_T_RQST_ITM_ACTVTY rmc,
 CNS_T_RQST_ITM_ACTVTY rpur,
 CNS_T_RQST_ITM_ACTVTY rspg,
 CNS_T_RQST_ITM_ACTVTY rgrm,
 CNS_T_TSC_TEST_RESULT mc,
 CNS_T_TSC_TEST_RESULT pur,
 CNS_T_TSC_TEST_RESULT spg,
 CNS_T_TSC_TEST_RESULT grm,
 CNS_T_TEST_REGIME reg,
 CNS_T_SPAR_REQUEST rqst
WHERE   s.READY_FOR_STRG_DT  IS NULL
AND rmc.SEEDLOT_NUMBER = s.SEEDLOT_NUMBER
AND rmc.REQUEST_SKEY > 0
AND rmc.ACTIVITY_TYPE_CD = 'MC'
AND rmc.TEST_CATEGORY_CD = 'STD'
AND mc.RIA_SKEY  = rmc.RIA_SKEY
AND mc.ACCEPT_RESULT_IND = -1
AND mc.TEST_COMPLETE_IND = -1
AND rqst.REQUEST_SKEY = rmc.REQUEST_SKEY
AND rqst.REQUEST_TYPE_ST IN ('ASP','CSP','SSP','USP','RSP')
AND rqst.SPR_RQST_STATUS_ST <> 'CAN'
AND rpur.SEEDLOT_NUMBER = s.SEEDLOT_NUMBER
AND rpur.REQUEST_SKEY = rmc.REQUEST_SKEY
AND rpur.REQUEST_SKEY > 0
AND rpur.ACTIVITY_TYPE_CD = 'PUR'
AND rpur.TEST_CATEGORY_CD = 'STD'
AND pur.RIA_SKEY  = rpur.RIA_SKEY
AND pur.ACCEPT_RESULT_IND = -1
AND pur.TEST_COMPLETE_IND = -1
AND rspg.SEEDLOT_NUMBER = s.SEEDLOT_NUMBER
AND spg.RIA_SKEY  = rspg.RIA_SKEY
AND rspg.REQUEST_SKEY = rpur.REQUEST_SKEY
AND rspg.REQUEST_SKEY > 0
AND rspg.ACTIVITY_TYPE_CD = 'SPG'
AND rspg.TEST_CATEGORY_CD = 'STD'
AND rgrm.SEEDLOT_NUMBER = s.SEEDLOT_NUMBER
AND rgrm.REQUEST_SKEY = rspg.REQUEST_SKEY
AND rgrm.REQUEST_SKEY > 0
AND rgrm.TEST_CATEGORY_CD = 'STD'
AND grm.RIA_SKEY  = rgrm.RIA_SKEY
AND reg.SEEDLOT_TEST_CODE = grm.ACTIVITY_TYPE_CD
union
SELECT
f.FAMILY_LOT_NUMBER,
f.FAMILY_LOT_NUMBER,
rmc.REQUEST_ID||rmc.ITEM_ID,
f.VEGETATION_ST,
' ',' ',
rqst.PRIORITY_DT,
pur.PURITY_PCT,
mc.MOISTURE_PCT,
spg.SEEDS_PER_GRAM,
DECODE(grm.TEST_COMPLETE_IND,-1,rgrm.ACTUAL_END_DT_TM,rgrm.PLANNED_END_DT),
grm.TEST_COMPLETE_IND
FROM    CNS_T_FAMILY_LOT f,
 CNS_T_RQST_ITM_ACTVTY rmc,
 CNS_T_RQST_ITM_ACTVTY rpur,
 CNS_T_RQST_ITM_ACTVTY rspg,
 CNS_T_RQST_ITM_ACTVTY rgrm,
 CNS_T_TSC_TEST_RESULT mc,
 CNS_T_TSC_TEST_RESULT pur,
 CNS_T_TSC_TEST_RESULT spg,
 CNS_T_TSC_TEST_RESULT grm,
 CNS_T_TEST_REGIME reg,
 CNS_T_SPAR_REQUEST rqst,
 CNS_T_REQUEST_ITEM item
WHERE   f.READY_FOR_STRG_DT  IS NULL
AND item.FAMILY_LOT_NUMBER = f.FAMILY_LOT_NUMBER
AND item.request_skey = rqst.request_skey
AND rmc.REQUEST_SKEY > 0
AND rmc.ACTIVITY_TYPE_CD = 'MC'
AND rmc.TEST_CATEGORY_CD = 'STD'
AND mc.RIA_SKEY  = rmc.RIA_SKEY
AND mc.ACCEPT_RESULT_IND = -1
AND mc.TEST_COMPLETE_IND = -1
AND rqst.REQUEST_SKEY = rmc.REQUEST_SKEY
AND rqst.REQUEST_TYPE_ST IN ('ASP','CSP','SSP','USP')
AND rqst.SPR_RQST_STATUS_ST <> 'CAN'
AND rpur.REQUEST_SKEY = rmc.REQUEST_SKEY
AND rpur.REQUEST_SKEY > 0
AND rpur.ACTIVITY_TYPE_CD = 'PUR'
AND rpur.TEST_CATEGORY_CD = 'STD'
AND pur.RIA_SKEY  = rpur.RIA_SKEY
AND pur.ACCEPT_RESULT_IND = -1
AND pur.TEST_COMPLETE_IND = -1
AND spg.RIA_SKEY  = rspg.RIA_SKEY
AND rspg.REQUEST_SKEY = rpur.REQUEST_SKEY
AND rspg.REQUEST_SKEY > 0
AND rspg.ACTIVITY_TYPE_CD = 'SPG'
AND rspg.TEST_CATEGORY_CD = 'STD'
AND rgrm.REQUEST_SKEY = rspg.REQUEST_SKEY
AND rgrm.REQUEST_SKEY > 0
AND rgrm.TEST_CATEGORY_CD = 'STD'
AND grm.RIA_SKEY  = rgrm.RIA_SKEY
AND reg.SEEDLOT_TEST_CODE = grm.ACTIVITY_TYPE_CD;


-- CONSEP.CNSR14_TRY2 source

CREATE OR REPLACE VIEW CONSEP.CNSR14_TRY2
(SEEDLOT_NUMBER,SEEDLOT_DISPLAY,REQUEST_ITEM,VEGETATION_ST,EXTRACTORY,EXTRCT_CLI_LOCN_CD,PRIORITY_DT,PURITY_PCT,MOISTURE_PCT,SEEDS_PER_GRAM,GERM_TEST_DATE,GERM_TEST_COMPLETE_IND)
AS
SELECT
s.SEEDLOT_NUMBER,
DECODE(s.REGISTERD_SEED_IND, -1,
       s.SEEDLOT_NUMBER, s.SEEDLOT_NUMBER||'U'),
rmc.REQUEST_ID||rmc.ITEM_ID,
s.VEGETATION_ST,
cns_fn_GET_CLIENT_ACRONYM(s.EXTRCT_CLI_NUMBER, NULL),
EXTRCT_CLI_LOCN_CD,
rqst.PRIORITY_DT,
pur.PURITY_PCT,
mc.MOISTURE_PCT,
spg.SEEDS_PER_GRAM,
DECODE(grm.TEST_COMPLETE_IND,-1,rgrm.ACTUAL_END_DT_TM,rgrm.PLANNED_END_DT),
grm.TEST_COMPLETE_IND
FROM    CNS_T_SEEDLOT s,
 CNS_T_RQST_ITM_ACTVTY rmc,
 CNS_T_RQST_ITM_ACTVTY rpur,
 CNS_T_RQST_ITM_ACTVTY rspg,
 CNS_T_RQST_ITM_ACTVTY rgrm,
 CNS_T_TSC_TEST_RESULT mc,
 CNS_T_TSC_TEST_RESULT pur,
 CNS_T_TSC_TEST_RESULT spg,
 CNS_T_TSC_TEST_RESULT grm,
 CNS_T_TEST_REGIME reg,
 CNS_T_SPAR_REQUEST rqst
WHERE   s.READY_FOR_STRG_DT  IS NULL
AND rmc.SEEDLOT_NUMBER = s.SEEDLOT_NUMBER
AND rmc.REQUEST_SKEY > 0
AND rmc.ACTIVITY_TYPE_CD = 'MC'
AND rmc.TEST_CATEGORY_CD = 'STD'
AND mc.RIA_SKEY  = rmc.RIA_SKEY
AND mc.ACCEPT_RESULT_IND = -1
AND mc.TEST_COMPLETE_IND = -1
AND rqst.REQUEST_SKEY = rmc.REQUEST_SKEY
AND rqst.REQUEST_TYPE_ST IN ('ASP','CSP','SSP','USP','RSP')
AND rqst.SPR_RQST_STATUS_ST <> 'CAN'
AND rpur.SEEDLOT_NUMBER = s.SEEDLOT_NUMBER
AND rpur.REQUEST_SKEY = rmc.REQUEST_SKEY
AND rpur.REQUEST_SKEY > 0
AND rpur.ACTIVITY_TYPE_CD = 'PUR'
AND rpur.TEST_CATEGORY_CD = 'STD'
AND pur.RIA_SKEY  = rpur.RIA_SKEY
AND pur.ACCEPT_RESULT_IND = -1
AND pur.TEST_COMPLETE_IND = -1
AND rspg.SEEDLOT_NUMBER = s.SEEDLOT_NUMBER
AND spg.RIA_SKEY  = rspg.RIA_SKEY
AND rspg.REQUEST_SKEY = rpur.REQUEST_SKEY
AND rspg.REQUEST_SKEY > 0
AND rspg.ACTIVITY_TYPE_CD = 'SPG'
AND rspg.TEST_CATEGORY_CD = 'STD'
AND rgrm.SEEDLOT_NUMBER = s.SEEDLOT_NUMBER
--AND rgrm.REQUEST_SKEY = rspg.REQUEST_SKEY
AND rgrm.REQUEST_SKEY > 0
AND SUBSTR(rgrm.REQUEST_ID,1,3) IN ('ASP','CSP','SSP','USP','RSP', 'TST')
AND rgrm.TEST_CATEGORY_CD = 'STD'
AND grm.RIA_SKEY  = rgrm.RIA_SKEY
AND reg.SEEDLOT_TEST_CODE = grm.ACTIVITY_TYPE_CD
union
SELECT
f.FAMILY_LOT_NUMBER,
f.FAMILY_LOT_NUMBER,
rmc.REQUEST_ID||rmc.ITEM_ID,
f.VEGETATION_ST,
' ',' ',
rqst.PRIORITY_DT,
pur.PURITY_PCT,
mc.MOISTURE_PCT,
spg.SEEDS_PER_GRAM,
DECODE(grm.TEST_COMPLETE_IND,-1,rgrm.ACTUAL_END_DT_TM,rgrm.PLANNED_END_DT),
grm.TEST_COMPLETE_IND
FROM    CNS_T_FAMILY_LOT f,
 CNS_T_RQST_ITM_ACTVTY rmc,
 CNS_T_RQST_ITM_ACTVTY rpur,
 CNS_T_RQST_ITM_ACTVTY rspg,
 CNS_T_RQST_ITM_ACTVTY rgrm,
 CNS_T_TSC_TEST_RESULT mc,
 CNS_T_TSC_TEST_RESULT pur,
 CNS_T_TSC_TEST_RESULT spg,
 CNS_T_TSC_TEST_RESULT grm,
 CNS_T_TEST_REGIME reg,
 CNS_T_SPAR_REQUEST rqst,
 CNS_T_REQUEST_ITEM item
WHERE   f.READY_FOR_STRG_DT  IS NULL
AND item.FAMILY_LOT_NUMBER = f.FAMILY_LOT_NUMBER
AND item.request_skey = rqst.request_skey
AND rmc.REQUEST_SKEY > 0
AND rmc.ACTIVITY_TYPE_CD = 'MC'
AND rmc.TEST_CATEGORY_CD = 'STD'
AND mc.RIA_SKEY  = rmc.RIA_SKEY
AND mc.ACCEPT_RESULT_IND = -1
AND mc.TEST_COMPLETE_IND = -1
AND rqst.REQUEST_SKEY = rmc.REQUEST_SKEY
AND rqst.REQUEST_TYPE_ST IN ('ASP','CSP','SSP','USP')
AND rqst.SPR_RQST_STATUS_ST <> 'CAN'
AND rpur.REQUEST_SKEY = rmc.REQUEST_SKEY
AND rpur.REQUEST_SKEY > 0
AND rpur.ACTIVITY_TYPE_CD = 'PUR'
AND rpur.TEST_CATEGORY_CD = 'STD'
AND pur.RIA_SKEY  = rpur.RIA_SKEY
AND pur.ACCEPT_RESULT_IND = -1
AND pur.TEST_COMPLETE_IND = -1
AND spg.RIA_SKEY  = rspg.RIA_SKEY
AND rspg.REQUEST_SKEY = rpur.REQUEST_SKEY
AND rspg.REQUEST_SKEY > 0
AND rspg.ACTIVITY_TYPE_CD = 'SPG'
AND rspg.TEST_CATEGORY_CD = 'STD'
AND rgrm.REQUEST_SKEY = rspg.REQUEST_SKEY
AND rgrm.REQUEST_SKEY > 0
AND rgrm.TEST_CATEGORY_CD = 'STD'
AND grm.RIA_SKEY  = rgrm.RIA_SKEY
AND reg.SEEDLOT_TEST_CODE = grm.ACTIVITY_TYPE_CD;


-- CONSEP.CNSR15 source

CREATE OR REPLACE VIEW CONSEP.CNSR15
(REQUEST_TYPE,DESCRIPTION,NEW_YTD,NEW_MON,NEW_TODAY,CAN_YTD,CAN_MON,CAN_TODAY)
AS
SELECT
C.CODE_ARGUMENT,
C.EXPANDED_RESULT,
cns_fn_new_requests_ytd(C.CODE_ARGUMENT),
cns_fn_new_requests_month(C.CODE_ARGUMENT),
cns_fn_new_requests_today(C.CODE_ARGUMENT),
cns_fn_cancel_requests_ytd(C.CODE_ARGUMENT),
cns_fn_cancel_requests_month(C.CODE_ARGUMENT),
cns_fn_cancel_requests_today(C.CODE_ARGUMENT)
FROM
	CNS_T_CODE_LIST_TABLE C,
	CNS_T_CODE_SUBSET_TBL S
WHERE
	S.CODE_SUBSET_NAME      = 'REQUEST_TYPE_ST'
AND     S.COLUMN_NAME           = C.COLUMN_NAME
AND     S.CODE_ARGUMENT         = C.CODE_ARGUMENT
UNION
select 'SRQQA',
'Seedling Request - QA Tests',
cns_fn_new_requests_ytd('SRQQA'),
cns_fn_new_requests_month('SRQQA'),
cns_fn_new_requests_today('SRQQA'),
cns_fn_cancel_requests_ytd('SRQQA'),
0,
0
from dual;


-- CONSEP.CNSR15_NEW_REQUESTS source

CREATE OR REPLACE VIEW CONSEP.CNSR15_NEW_REQUESTS
(REQUEST_TYPE,SEQUENCE_NO,REQUEST_ID,ACTION_DATE,ACTUAL_STRAT_DATE,SOW_DATE,LBL,WITHDRAW_DATE,INHOUSE_INV_NO,REQUEST_TYPE_ST,SEEDLOT_NUMBER,REQUEST_SKEY,VEGETATION_ST,NRSRY_CLI_NUMBER,NRSRY_CLI_LOCN_CD,ORCH_ID,DEFAULT_SOW_DATE)
AS
SELECT
T1.REQUEST_TYPE, T1.SEQUENCE_NO, T1.REQUEST_ID,
T1.ACTION_DATE, T1.ACTUAL_STRAT_DATE, T1.SOW_DATE,
T1.LBL, T1.WITHDRAW_DATE, T1.INHOUSE_INV_NO,
T1.REQUEST_TYPE_ST, T1.SEEDLOT_NUMBER, T1.REQUEST_SKEY,
T2.VEGETATION_ST,NVL(T4.NURSERY_ACRONYM,T3.NRSRY_CLI_NUMBER),
T3.NRSRY_CLI_LOCN_CD,
T2.ORCHARD_ID,
DECODE(T1.REQUEST_TYPE_ST,'SRQ',cns_fn_m_def_sow_date(T1.request_skey),'N')
FROM
CNS_T_CNSLR15_RSLT T1,
CNS_T_SEEDLOT T2,
CNS_T_REQUEST_ITEM T3,
NURSERY_LOCATION T4
WHERE T1.SEEDLOT_NUMBER = T2.SEEDLOT_NUMBER
AND T1.SEEDLOT_NUMBER <> '00000'
AND T1.REQUEST_TYPE = 'NEW REQUESTS'
AND T3.REQUEST_SKEY = T1.REQUEST_SKEY
AND T3.NRSRY_CLI_NUMBER = T4.CLIENT_NUMBER (+)
AND T3.NRSRY_CLI_LOCN_CD = T4.CLIENT_LOCN_CODE (+)
UNION
SELECT
T1.REQUEST_TYPE, T1.SEQUENCE_NO, T1.REQUEST_ID,
T1.ACTION_DATE, T1.ACTUAL_STRAT_DATE, T1.SOW_DATE,
T1.LBL, T1.WITHDRAW_DATE, T1.INHOUSE_INV_NO,
T1.REQUEST_TYPE_ST, T1.FAMILY_LOT_NUMBER, T1.REQUEST_SKEY,
T2.VEGETATION_ST, NVL(T4.CLIENT_ACRONYM,T3.NRSRY_CLI_NUMBER),   T3.NRSRY_CLI_LOCN_CD,
T2.ORCHARD_ID , NULL
FROM
CNS_T_CNSLR15_RSLT T1,
CNS_T_FAMILY_LOT T2,
CNS_T_REQUEST_ITEM T3,
CNS_T_CLIENT_ACRONYM T4
WHERE T2.FAMILY_LOT_NUMBER = T1.FAMILY_LOT_NUMBER
AND T1.REQUEST_TYPE = 'NEW REQUESTS'
AND T3.REQUEST_SKEY = T1.REQUEST_SKEY
AND T3.NRSRY_CLI_NUMBER = T4.CLIENT_NUMBER (+);


-- CONSEP.CNSR15_NEW_REQUESTS_WITH_TESTS source

CREATE OR REPLACE VIEW CONSEP.CNSR15_NEW_REQUESTS_WITH_TESTS
(REQUEST_TYPE,SEQUENCE_NO,REQUEST_ID,ACTION_DATE,ACTUAL_STRAT_DATE,SOW_DATE,LBL,WITHDRAW_DATE,INHOUSE_INV_NO,REQUEST_TYPE_ST,SEEDLOT_NUMBER,REQUEST_SKEY,VEGETATION_ST,NRSRY_CLI_NUMBER,NRSRY_CLI_LOCN_CD,ACTIVITY_TYPE_CD,RTS_ID,TEST_STATUS,WITHDRAW_DT,QA_TEST_CODE,ORCH_ID,DAYS_OVERDUE)
AS
SELECT
decode(T1.REQUEST_TYPE_ST,'SRQ','AA' || T1.Request_type, T1.Request_type),
T1.SEQUENCE_NO, T1.REQUEST_ID,
TO_CHAR(T1.ACTION_DATE,'YYYY/MM/DD') , TO_CHAR(T1.ACTUAL_STRAT_DATE,'YYYY/MM/DD') ,
TO_CHAR(T1.SOW_DATE,'YYYY/MM/DD'), T1.LBL,TO_CHAR(T1.WITHDRAW_DATE,'YYYY/MM/DD') ,
T1.INHOUSE_INV_NO,T1.REQUEST_TYPE_ST, T1.SEEDLOT_NUMBER, T1.REQUEST_SKEY,
T2.VEGETATION_ST, NVL(T4.CLIENT_ACRONYM,T3.NRSRY_CLI_NUMBER), T3.NRSRY_CLI_LOCN_CD,
T6.ACTIVITY_TYPE_CD ,
NULL, NULL,
null,
T1.QA_TEST_CODE,
T2.ORCHARD_ID,
NULL
FROM
CNS_T_CNSLR15_RSLT T1,
CNS_T_SEEDLOT T2,
CNS_T_REQUEST_ITEM T3,
CNS_T_CLIENT_ACRONYM T4,
CNS_T_RQST_ITM_ACTVTY T5,
CNS_T_TSC_TEST_RESULT T6
WHERE T1.SEEDLOT_NUMBER = T2.SEEDLOT_NUMBER
AND T1.REQUEST_TYPE IN ('NEW REQUESTS','CHANGED REQUESTS')
AND T1.REQUEST_TYPE_ST IN ('TST','RTS','SRQ')
AND T3.REQUEST_SKEY = T1.REQUEST_SKEY
AND T6.RIA_SKEY = T5.RIA_SKEY
AND T1.REQUEST_SKEY = T5.REQUEST_SKEY
AND T3.REQUEST_SKEY = T5.REQUEST_SKEY
AND T3.ITEM_ID = T5.ITEM_ID
AND T1.Seedlot_number = T5.Seedlot_Number
AND T3.NRSRY_CLI_NUMBER = T4.CLIENT_NUMBER (+)
UNION
SELECT
T1.REQUEST_TYPE, T1.SEQUENCE_NO, T1.REQUEST_ID,
TO_CHAR(T1.ACTION_DATE,'YYYY/MM/DD') , TO_CHAR(T1.ACTUAL_STRAT_DATE,'YYYY/MM/DD') ,
TO_CHAR(T1.SOW_DATE,'YYYY/MM/DD') ,T1.LBL, TO_CHAR(T1.WITHDRAW_DATE,'YYYY/MM/DD') ,
T1.INHOUSE_INV_NO, T1.REQUEST_TYPE_ST, T1.SEEDLOT_NUMBER, T1.REQUEST_SKEY,
T2.VEGETATION_ST, NVL(T4.CLIENT_ACRONYM,T3.NRSRY_CLI_NUMBER), T3.NRSRY_CLI_LOCN_CD,
NULL,
T7.REQUEST_ID,
NULL,
null,
T1.QA_TEST_CODE,
T2.ORCHARD_ID,
trunc(SYSDATE) - trunc(T7.RETEST_DUE_DATE)
FROM
CNS_T_CNSLR15_RSLT T1,
CNS_T_SEEDLOT T2,
CNS_T_REQUEST_ITEM T3,
CNS_T_CLIENT_ACRONYM T4,
CNS_T_RQST_TST_SRVC T7,
CNS_T_SPAR_REQUEST T10
WHERE T1.SEEDLOT_NUMBER = T2.SEEDLOT_NUMBER
AND T1.REQUEST_TYPE = 'NEW REQUESTS'
AND T1.REQUEST_TYPE_ST IN ('SRQ')
AND T3.REQUEST_SKEY = T1.REQUEST_SKEY
AND T3.NRSRY_CLI_NUMBER = T4.CLIENT_NUMBER (+)
AND T7.SEEDLOT_NUMBER = T1.SEEDLOT_NUMBER
AND T10.REQUEST_SKEY = T1.REQUEST_SKEY
AND T10.SPR_RQST_STATUS_ST <> 'CAN'
UNION
SELECT
T1.REQUEST_TYPE, T1.SEQUENCE_NO, T1.REQUEST_ID,
TO_CHAR(T1.ACTION_DATE,'YYYY/MM/DD') , TO_CHAR(T1.ACTUAL_STRAT_DATE,'YYYY/MM/DD') ,
TO_CHAR(T1.SOW_DATE,'YYYY/MM/DD'), T1.LBL, TO_CHAR(T1.WITHDRAW_DATE,'YYYY/MM/DD') ,
T1.INHOUSE_INV_NO, T1.REQUEST_TYPE_ST, T1.SEEDLOT_NUMBER, T1.REQUEST_SKEY,
T2.VEGETATION_ST, NVL(T4.CLIENT_ACRONYM,T3.NRSRY_CLI_NUMBER), T3.NRSRY_CLI_LOCN_CD,
T6.ACTIVITY_TYPE_CD ,
T5.REQUEST_ID,
T8.SPR_RQST_STATUS_ST,
To_char(T6.SEED_WITHDRAWAL_DATE,'YYYY/MM/DD'),
T1.QA_TEST_CODE,
T2.ORCHARD_ID,
NULL
FROM
CNS_T_CNSLR15_RSLT T1,
CNS_T_SEEDLOT T2,
CNS_T_REQUEST_ITEM T3,
CNS_T_CLIENT_ACRONYM T4,
CNS_T_RQST_ITM_ACTVTY T5,
CNS_T_TSC_TEST_RESULT T6,
CNS_T_SPAR_REQUEST T8,
CNS_T_REquest_Seedlot T9,
CNS_T_SPAR_REQUEST T10
WHERE T1.SEEDLOT_NUMBER = T2.SEEDLOT_NUMBER
AND T1.REQUEST_TYPE = 'NEW REQUESTS'
AND T1.REQUEST_TYPE_ST IN ('SRQ')
AND T3.REQUEST_SKEY = T1.REQUEST_SKEY
AND T3.NRSRY_CLI_NUMBER = T4.CLIENT_NUMBER (+)
AND T6.RIA_SKEY = T5.RIA_SKEY
AND T9.REQUEST_SKEY = T5.REQUEST_SKEY
AND T9.ITEM_ID = T5.ITEM_ID
AND T1.Seedlot_number = T5.Seedlot_Number
AND T8.Request_skey = T9.Request_skey
AND T1.SEEDLOT_NUMBER = T9.SEEDLOT_NUMBER
AND T8.REQUEST_TYPE_ST IN ('TST','RTS')
AND T8.SPR_RQST_STATUS_ST IN ('APP', 'ACT')
AND T5.TEST_CATEGORY_CD = 'STD'
AND T9.SEEDLOT_TEST_CODE = T6.ACTIVITY_TYPE_CD
AND T10.REQUEST_SKEY = T1.REQUEST_SKEY
AND T10.SPR_RQST_STATUS_ST <> 'CAN';


-- CONSEP.CNSR15_ORIG source

CREATE OR REPLACE VIEW CONSEP.CNSR15_ORIG
(REQUEST_TYPE,DESCRIPTION,NEW_YTD,NEW_MON,NEW_TODAY,CAN_YTD,CAN_MON,CAN_TODAY)
AS
SELECT
C.CODE_ARGUMENT,
C.EXPANDED_RESULT,
cns_fn_new_requests_ytd(C.CODE_ARGUMENT),
cns_fn_new_requests_month(C.CODE_ARGUMENT),
cns_fn_new_requests_today(C.CODE_ARGUMENT),
cns_fn_cancel_requests_ytd(C.CODE_ARGUMENT),
cns_fn_cancel_requests_month(C.CODE_ARGUMENT),
cns_fn_cancel_requests_today(C.CODE_ARGUMENT)
FROM
	CNS_T_CODE_LIST_TABLE C,
	CNS_T_CODE_SUBSET_TBL S
WHERE
	S.CODE_SUBSET_NAME      = 'REQUEST_TYPE_ST'
AND     S.COLUMN_NAME           = C.COLUMN_NAME
AND     S.CODE_ARGUMENT         = C.CODE_ARGUMENT;


-- CONSEP.CNSR16 source

CREATE OR REPLACE VIEW CONSEP.CNSR16
(REQUEST_SKEY,ITEM_ID,CHANGE_DT,SEQUENCE_NO,CHANGE_DESC,LATEST_ACTIONED_DT,REQUEST_TYPE_ST,REQUEST_ITEM,SPR_RQST_STATUS_ST,INHOUSE_INV_NO,VEGETATION_ST,SEEDLOT_NUMBER,DEFAULT_SOW_DATE)
AS
SELECT DISTINCT
-- modified July 2003 by mdellavi, suppress item_id display for SRQ/CSP type requests
-- modified Feb 2004 by mdellavi, add seedlot number
a.REQUEST_SKEY,
SUBSTR(Cns_Fn_Strip_Item_Id(a.request_type_st,a.request_skey,b.ITEM_ID),1,1),
f.CHANGE_DT,
f.SEQUENCE_NO,
f.CHANGE_DESC,
b.LATEST_ACTIONED_DT,
a.REQUEST_TYPE_ST,
DECODE(a.REQUEST_TYPE_ST,'SRQ', a.SOWING_YR||
       SUBSTR(e.ORG_UNIT_CODE||'   ',1,3)||
       LPAD(a.request_sequence,4,'0')||' ',
       a.REQUEST_TYPE_ST||a.REQUEST_YR||
       LPAD(a.request_sequence,4,'0')
       ||SUBSTR(Cns_Fn_Strip_Item_Id(a.request_type_st,a.request_skey,b.ITEM_ID),1,1)),
a.SPR_RQST_STATUS_ST,
b.INHOUSE_INV_NO,
d.VEGETATION_ST,
d.SEEDLOT_NUMBER,
DECODE(a.REQUEST_TYPE_ST,'SRQ',cns_fn_m_def_sow_date(a.request_skey),'N')
FROM
    CNS_T_SPAR_REQUEST a,
    CNS_T_REQUEST_ITEM b,
    CNS_T_REQUEST_SEEDLOT c,
    CNS_T_SEEDLOT d,
    CNS_T_ORG_UNIT e,
    CNS_T_RQST_ITM_CHG_LG f
WHERE   a.REQUEST_SKEY = b.REQUEST_SKEY
AND     b.REQUEST_SKEY = c.REQUEST_SKEY
AND     b.ITEM_ID = c.ITEM_ID
AND     f.REQUEST_SKEY = b.REQUEST_SKEY
AND     f.ITEM_ID = b.ITEM_ID
AND     c.SEEDLOT_NUMBER = d.SEEDLOT_NUMBER
AND     a.ORG_UNIT_NO = e.ORG_UNIT_NO (+);


-- CONSEP.CNSR17 source

CREATE OR REPLACE VIEW CONSEP.CNSR17
(SEEDLOT_SAMPLE,SEEDLOT_DISPLAY,REQ_ID,REQUEST_ITEM,ACTIVITY_TYPE_CD,RIA_SKEY,SAMPLE_ID,SEEDLOT_NUMBER,VEGETATION_ST,ITEM_ID,REVISED_START_DT,REVISED_END_DT,ACTUAL_BEGIN_DT_TM,ACTUAL_END_DT_TM,ACCEPT_RESULT_IND,TEST_RANK,TEST_COMPLETE_IND,GERM_TEST_IND,TEST_CATEGORY_CD,GERMINATION_PCT,MOISTURE_PCT,GERMINATION_VALUE,WEIGHT_PER_100,SEEDS_PER_GRAM,PURITY_PCT,OTHER_TEST_RESULT,ACTIVITY_DURATION,ACTVTY_TM_UNIT_DSC,COLUMN_NAME,SIGNIFICNT_STS_IND,PROCESS_COMMIT_IND,RIA_COMMENT,REQUEST_SKEY,ACTIVITY_TYPE_DSC,REQUEST_TYPE_ST,SPAR_FUND_SRCE_ST,GRAMS,TEST_GRAMS,CURRENT_TEST_IND,REQUEST_YR)
AS
SELECT
-- modified July 2003 by mdellavi, suppress item_id display for SRQ/CSP type requests
NVL(a.SEEDLOT_NUMBER,c.SAMPLE_ID),
NVL(c.SAMPLE_ID,DECODE(g.REGISTERD_SEED_IND,-1,a.SEEDLOT_NUMBER,a.SEEDLOT_NUMBER||'U')),
a.REQUEST_ID,
a.REQUEST_ID||SUBSTR(Cns_Fn_Strip_Item_Id(e.request_type_st,e.request_skey,a.ITEM_ID),1,1) REQUEST_ITEM,
a.ACTIVITY_TYPE_CD,
a.RIA_SKEY,
c.SAMPLE_ID,
a.SEEDLOT_NUMBER,
a.VEGETATION_ST,
SUBSTR(Cns_Fn_Strip_Item_Id(e.request_type_st,e.request_skey,a.ITEM_ID),1,1) item_id,
a.REVISED_START_DT,
a.REVISED_END_DT,
a.ACTUAL_BEGIN_DT_TM,
a.ACTUAL_END_DT_TM,
d.ACCEPT_RESULT_IND,
d.TEST_RANK,
d.TEST_COMPLETE_IND,
Cns_Fn_Get_Germ_Test_Ind(a.ACTIVITY_TYPE_CD),
a.TEST_CATEGORY_CD,
d.GERMINATION_PCT,
d.MOISTURE_PCT,
d.GERMINATION_VALUE,
d.WEIGHT_PER_100,
d.SEEDS_PER_GRAM,
d.PURITY_PCT,
d.OTHER_TEST_RESULT,
a.ACTIVITY_DURATION,
b.EXPANDED_RESULT ACTVTY_TM_UNIT_DSC,
b.COLUMN_NAME,
a.SIGNIFICNT_STS_IND,
a.PROCESS_COMMIT_IND,
a.RIA_COMMENT,
c.REQUEST_SKEY,
f.EXPANDED_RESULT,
e.request_type_st,
e.spar_fund_srce_st,
Cns_Fn_Get_Rqst_Grams(c.REQUEST_SKEY,a.ITEM_ID),
Cns_Fn_Get_Rqst_Test_Grams(c.REQUEST_SKEY,a.ITEM_ID),
d.CURRENT_TEST_IND,
DECODE(e.REQUEST_TYPE_ST,'SRQ',e.SOWING_YR,e.REQUEST_YR)
FROM
     CNS_T_RQST_ITM_ACTVTY a,
    CNS_T_CODE_LIST_TABLE b,
    CNS_T_REQUEST_ITEM c,
    CNS_T_TSC_TEST_RESULT d,
    CNS_T_SPAR_REQUEST e,
    CNS_T_CODE_LIST_TABLE f,
    CNS_T_SEEDLOT g
WHERE c.ITEM_ID = a.ITEM_ID
AND c.REQUEST_SKEY = a.REQUEST_SKEY
AND a.ACTVTY_TM_UNIT_ST = b.CODE_ARGUMENT
AND b.COLUMN_NAME = 'UNIT_OF_MEASURE_CD'
AND d.RIA_SKEY = a.RIA_SKEY
AND a.ACTIVITY_TYPE_CD = f.CODE_ARGUMENT
AND f.COLUMN_NAME = 'ACTIVITY_TYPE_CD'
AND e.REQUEST_SKEY = c.REQUEST_SKEY
AND g.SEEDLOT_NUMBER (+) = a.SEEDLOT_NUMBER;


-- CONSEP.CNSR19 source

CREATE OR REPLACE VIEW CONSEP.CNSR19
(PRIORITY_DT,RQST_CLI_DISPLAY,REQ_ID,ITEM_ID,REQUEST_ITEM,REQUEST_YR,REQUEST_TYPE_ST,SPR_RQST_STATUS_ST,SEEDLOT_NUMBER,SEEDLOT_DISPLAY,VEGETATION_ST,CLCTN_VOLUME,ACTUAL_EXTR_DT,CONESEEDRCV_DT,BLENDED_DT,WEIGH_DT,MC_DT,PUR_DT,SPG_DT,REVISED_END_DT,ACTUAL_END_DT_TM,ACTUAL_BEGIN_DT_TM,TEST_CATEGORY_CD,TEST_COMPLETE_IND,ACCEPT_RESULT_IND,SEED_WITHDRAWAL_DATE,SEEDLOT_STATUS)
AS
SELECT
--modified July 2003 by Mdellavi, suppress item id for SRQ/CSP type requests
r.PRIORITY_DT,
DECODE(r.REQUEST_TYPE_ST,
'CSP',cns_fn_get_csp_requestor(s.SEEDLOT_NUMBER),
'SSP',cns_fn_get_csp_requestor(s.SEEDLOT_NUMBER),
'USP',cns_fn_get_csp_requestor(s.SEEDLOT_NUMBER),
'ASP',cns_fn_get_csp_requestor(s.SEEDLOT_NUMBER),
'RSP',cns_fn_get_csp_requestor(s.SEEDLOT_NUMBER),
RPAD(cns_fn_get_client_acronym(r.RQST_CLI_NUMBER,NULL),8)||r.RQST_CLI_LOCN_CD),
DECODE(r.REQUEST_TYPE_ST, 'SRQ', r.SOWING_YR||SUBSTR(o.ORG_UNIT_CODE,1,3)||
LPAD(TO_CHAR(r.REQUEST_SEQUENCE),4,'0'), r.REQUEST_TYPE_ST||
r.REQUEST_YR||LPAD(TO_CHAR(r.REQUEST_SEQUENCE),4,'0')) REQ_ID,
-- Item_ID needed for consep Nov 2003 MP
--SUBSTR(Cns_Fn_Strip_Item_Id(r.request_type_st,r.request_skey,i.ITEM_ID),1,1) ITEM_ID,
i.item_id,
DECODE(r.REQUEST_TYPE_ST, 'SRQ', r.SOWING_YR||SUBSTR(o.ORG_UNIT_CODE,1,3)||
LPAD(TO_CHAR(r.REQUEST_SEQUENCE),4,'0')||' ', r.REQUEST_TYPE_ST||
r.REQUEST_YR||LPAD(TO_CHAR(r.REQUEST_SEQUENCE),4,'0')
||SUBSTR(Cns_Fn_Strip_Item_Id(r.request_type_st,r.request_skey,i.ITEM_ID),1,1) ) REQUEST_ITEM,
DECODE(r.REQUEST_TYPE_ST,'SRQ',r.SOWING_YR,r.REQUEST_YR),
r.REQUEST_TYPE_ST,
r.SPR_RQST_STATUS_ST,
s.SEEDLOT_NUMBER,
DECODE(s.REGISTERD_SEED_IND,-1,s.SEEDLOT_NUMBER,s.SEEDLOT_NUMBER||'U'),
s.VEGETATION_ST,
DECODE(r.REQUEST_TYPE_ST,
'CSP',s.CLCTN_VOLUME,
'SSP',s.CLCTN_VOLUME,
'USP',s.CLCTN_VOLUME,
'ASP',s.CLCTN_VOLUME,
'RSP',s.CLCTN_VOLUME,
NULL),
DECODE(r.REQUEST_TYPE_ST,
'CSP',s.EXTRACTION_ST_DT,
'SSP',s.EXTRACTION_ST_DT,
'USP',s.EXTRACTION_ST_DT,
'ASP',s.EXTRACTION_ST_DT,
'RSP',s.EXTRACTION_ST_DT,
NULL),
DECODE(r.REQUEST_TYPE_ST,
'CSP',cns_fn_cone_seed_rcpt_dt(r.REQUEST_SKEY,i.ITEM_ID),
'SSP',cns_fn_cone_seed_rcpt_dt(r.REQUEST_SKEY,i.ITEM_ID),
'USP',cns_fn_cone_seed_rcpt_dt(r.REQUEST_SKEY,i.ITEM_ID),
'ASP',cns_fn_cone_seed_rcpt_dt(r.REQUEST_SKEY,i.ITEM_ID),
'RSP',cns_fn_cone_seed_rcpt_dt(r.REQUEST_SKEY,i.ITEM_ID),
NULL),
DECODE(r.REQUEST_TYPE_ST,
'CSP',cns_fn_get_act_blend_dt(r.REQUEST_SKEY,i.ITEM_ID),
'SSP',cns_fn_get_act_blend_dt(r.REQUEST_SKEY,i.ITEM_ID),
'USP',cns_fn_get_act_blend_dt(r.REQUEST_SKEY,i.ITEM_ID),
'ASP',cns_fn_get_act_blend_dt(r.REQUEST_SKEY,i.ITEM_ID),
'RSP',cns_fn_get_act_blend_dt(r.REQUEST_SKEY,i.ITEM_ID),
NULL),
DECODE(r.REQUEST_TYPE_ST,
'CSP',cns_fn_max_std_ria_begin_dt(r.REQUEST_SKEY,i.ITEM_ID,'WEI'),
'SSP',cns_fn_max_std_ria_begin_dt(r.REQUEST_SKEY,i.ITEM_ID,'WEI'),
'USP',cns_fn_max_std_ria_begin_dt(r.REQUEST_SKEY,i.ITEM_ID,'WEI'),
'ASP',cns_fn_max_std_ria_begin_dt(r.REQUEST_SKEY,i.ITEM_ID,'WEI'),
'RSP',cns_fn_max_std_ria_begin_dt(r.REQUEST_SKEY,i.ITEM_ID,'WEI'),
NULL),
cns_fn_max_ria_end_dt(r.REQUEST_SKEY,i.ITEM_ID,'MC'),
cns_fn_max_ria_end_dt(r.REQUEST_SKEY,i.ITEM_ID,'PUR'),
cns_fn_max_ria_end_dt(r.REQUEST_SKEY,i.ITEM_ID,'SPG'),
TO_DATE(NULL),
TO_DATE(NULL),
TO_DATE(NULL),
TO_CHAR(NULL),
TO_NUMBER(NULL),
TO_NUMBER(NULL),
TO_DATE(NULL),
s.SEEDLOT_STATUS_ST
FROM
CNS_T_SPAR_REQUEST r,
CNS_T_ORG_UNIT o,
REQUEST_ITEM_SEEDLOT i,
CNS_T_SEEDLOT s
WHERE r.REQUEST_SKEY   > 0
AND i.REQUEST_SKEY  = r.REQUEST_SKEY
AND o.ORG_UNIT_NO (+)    = r.ORG_UNIT_NO
AND s.SEEDLOT_NUMBER = i.SEEDLOT_NUMBER
AND NOT EXISTS
(SELECT DISTINCT REQUEST_SKEY FROM CNS_T_RQST_ITM_ACTVTY sub2, CNS_T_TEST_REGIME sub3
WHERE   sub2.REQUEST_SKEY = i.REQUEST_SKEY
AND  sub2.ITEM_ID  = i.ITEM_ID
AND  sub2.TEST_RESULT_IND = -1
AND  sub3.SEEDLOT_TEST_CODE = sub2.ACTIVITY_TYPE_CD)
AND EXISTS
(SELECT DISTINCT REQUEST_SKEY FROM CNS_T_RQST_ITM_ACTVTY sub
WHERE   sub.REQUEST_SKEY = i.REQUEST_SKEY
AND  sub.ITEM_ID  = i.ITEM_ID
AND  sub.TEST_RESULT_IND = -1
AND NOT EXISTS (SELECT SEEDLOT_TEST_CODE FROM CNS_T_TEST_REGIME sub4
WHERE sub4.SEEDLOT_TEST_CODE = sub.ACTIVITY_TYPE_CD ))
UNION ALL
SELECT
r.PRIORITY_DT,
DECODE(r.REQUEST_TYPE_ST,
'CSP',cns_fn_get_csp_requestor(s.SEEDLOT_NUMBER),
'SSP',cns_fn_get_csp_requestor(s.SEEDLOT_NUMBER),
'USP',cns_fn_get_csp_requestor(s.SEEDLOT_NUMBER),
'ASP',cns_fn_get_csp_requestor(s.SEEDLOT_NUMBER),
'RSP',cns_fn_get_csp_requestor(s.SEEDLOT_NUMBER),
RPAD(cns_fn_get_client_acronym(r.RQST_CLI_NUMBER,NULL),8)||r.RQST_CLI_LOCN_CD),
DECODE(r.REQUEST_TYPE_ST, 'SRQ', r.SOWING_YR||SUBSTR(o.ORG_UNIT_CODE,1,3)||
LPAD(TO_CHAR(r.REQUEST_SEQUENCE),4,'0'), r.REQUEST_TYPE_ST||
r.REQUEST_YR||LPAD(TO_CHAR(r.REQUEST_SEQUENCE),4,'0')) REQ_ID,
--SUBSTR(Cns_Fn_Strip_Item_Id(r.request_type_st,r.request_skey,i.ITEM_ID),1,1) ITEM_ID,
i.item_id,
DECODE(r.REQUEST_TYPE_ST, 'SRQ', r.SOWING_YR||SUBSTR(o.ORG_UNIT_CODE,1,3)||
LPAD(TO_CHAR(r.REQUEST_SEQUENCE),4,'0')||' ', r.REQUEST_TYPE_ST||
r.REQUEST_YR||LPAD(TO_CHAR(r.REQUEST_SEQUENCE),4,'0')
||SUBSTR(Cns_Fn_Strip_Item_Id(r.request_type_st,r.request_skey,i.ITEM_ID),1,1)) REQUEST_ITEM,
DECODE(r.REQUEST_TYPE_ST,'SRQ',r.SOWING_YR,r.REQUEST_YR),
r.REQUEST_TYPE_ST,
r.SPR_RQST_STATUS_ST,
s.SEEDLOT_NUMBER,
DECODE(s.REGISTERD_SEED_IND,-1,s.SEEDLOT_NUMBER,s.SEEDLOT_NUMBER||'U'),
s.VEGETATION_ST,
DECODE(r.REQUEST_TYPE_ST,
'CSP',s.CLCTN_VOLUME,
'SSP',s.CLCTN_VOLUME,
'USP',s.CLCTN_VOLUME,
'ASP',s.CLCTN_VOLUME,
'RSP',s.CLCTN_VOLUME,
NULL),
DECODE(r.REQUEST_TYPE_ST,
'CSP',s.EXTRACTION_ST_DT,
'SSP',s.EXTRACTION_ST_DT,
'USP',s.EXTRACTION_ST_DT,
'ASP',s.EXTRACTION_ST_DT,
'RSP',s.EXTRACTION_ST_DT,
NULL),
DECODE(r.REQUEST_TYPE_ST,
'CSP',cns_fn_cone_seed_rcpt_dt(r.REQUEST_SKEY,i.ITEM_ID),
'SSP',cns_fn_cone_seed_rcpt_dt(r.REQUEST_SKEY,i.ITEM_ID),
'USP',cns_fn_cone_seed_rcpt_dt(r.REQUEST_SKEY,i.ITEM_ID),
'ASP',cns_fn_cone_seed_rcpt_dt(r.REQUEST_SKEY,i.ITEM_ID),
'RSP',cns_fn_cone_seed_rcpt_dt(r.REQUEST_SKEY,i.ITEM_ID),
NULL),
DECODE(r.REQUEST_TYPE_ST,
'CSP',cns_fn_get_act_blend_dt(r.REQUEST_SKEY,i.ITEM_ID),
'SSP',cns_fn_get_act_blend_dt(r.REQUEST_SKEY,i.ITEM_ID),
'USP',cns_fn_get_act_blend_dt(r.REQUEST_SKEY,i.ITEM_ID),
'ASP',cns_fn_get_act_blend_dt(r.REQUEST_SKEY,i.ITEM_ID),
'RSP',cns_fn_get_act_blend_dt(r.REQUEST_SKEY,i.ITEM_ID),
NULL),
DECODE(r.REQUEST_TYPE_ST,
'CSP',cns_fn_max_std_ria_begin_dt(r.REQUEST_SKEY,i.ITEM_ID,'WEI'),
'SSP',cns_fn_max_std_ria_begin_dt(r.REQUEST_SKEY,i.ITEM_ID,'WEI'),
'USP',cns_fn_max_std_ria_begin_dt(r.REQUEST_SKEY,i.ITEM_ID,'WEI'),
'ASP',cns_fn_max_std_ria_begin_dt(r.REQUEST_SKEY,i.ITEM_ID,'WEI'),
'RSP',cns_fn_max_std_ria_begin_dt(r.REQUEST_SKEY,i.ITEM_ID,'WEI'),
NULL),
cns_fn_max_ria_end_dt(r.REQUEST_SKEY,i.ITEM_ID,'MC'),
cns_fn_max_ria_end_dt(r.REQUEST_SKEY,i.ITEM_ID,'PUR'),
cns_fn_max_ria_end_dt(r.REQUEST_SKEY,i.ITEM_ID,'SPG'),
ria.REVISED_END_DT,
ria.ACTUAL_END_DT_TM,
ria.ACTUAL_BEGIN_DT_TM,
ria.TEST_CATEGORY_CD,
tsc.TEST_COMPLETE_IND,
tsc.ACCEPT_RESULT_IND,
tsc.SEED_WITHDRAWAL_DATE,
s.SEEDLOT_STATUS_ST
FROM
CNS_T_SPAR_REQUEST r,
CNS_T_ORG_UNIT o,
REQUEST_ITEM_SEEDLOT i,
CNS_T_SEEDLOT s,
CNS_T_RQST_ITM_ACTVTY ria,
CNS_T_TSC_TEST_RESULT tsc
WHERE r.REQUEST_SKEY   > 0
AND i.REQUEST_SKEY  = r.REQUEST_SKEY
AND o.ORG_UNIT_NO (+)    = r.ORG_UNIT_NO
AND s.SEEDLOT_NUMBER = i.SEEDLOT_NUMBER
AND ria.request_skey = i.request_skey
AND ria.item_id  = i.item_id
AND ria.ria_skey  = cns_fn_cnsr19_ria_skey(i.REQUEST_SKEY,i.ITEM_ID)
AND tsc.ria_skey  = ria.ria_skey;


-- CONSEP.CNSR19_FAMILYLOT source

CREATE OR REPLACE VIEW CONSEP.CNSR19_FAMILYLOT
(PRIORITY_DT,RQST_CLI_DISPLAY,REQ_ID,ITEM_ID,REQUEST_ITEM,REQUEST_YR,REQUEST_TYPE_ST,SPR_RQST_STATUS_ST,SEEDLOT_NUMBER,SEEDLOT_DISPLAY,VEGETATION_ST,CLCTN_VOLUME,ACTUAL_EXTR_DT,CONESEEDRCV_DT,BLENDED_DT,WEIGH_DT,MC_DT,PUR_DT,SPG_DT,REVISED_END_DT,ACTUAL_END_DT_TM,ACTUAL_BEGIN_DT_TM,TEST_CATEGORY_CD,TEST_COMPLETE_IND,ACCEPT_RESULT_IND,SEED_WITHDRAWAL_DATE,SEEDLOT_STATUS)
AS
SELECT
--Created Sept 15, 2001 by M.Ison
--Modified July 2003 by mdellavi, suppress item_id display for SRQ/CSP type requests
          r.priority_dt,
          DECODE (r.request_type_st,
                  'CSP', cns_fn_get_csp_requestor (s.family_lot_number),
                  'SSP', cns_fn_get_csp_requestor (s.family_lot_number),
                  'USP', cns_fn_get_csp_requestor (s.family_lot_number),
                  'ASP', cns_fn_get_csp_requestor (s.family_lot_number),
                  'RSP', cns_fn_get_csp_requestor (s.family_lot_number),
                     RPAD (cns_fn_get_client_acronym (r.rqst_cli_number, NULL),
                           8
                          )
                  || r.rqst_cli_locn_cd
                 ),
          DECODE (r.request_type_st,
                  'SRQ', r.sowing_yr
                   || SUBSTR (o.org_unit_code, 1, 3)
                   || LPAD (TO_CHAR (r.request_sequence), 4, '0'),
                     r.request_type_st
                  || r.request_yr
                  || LPAD (TO_CHAR (r.request_sequence), 4, '0')
                 ) req_id,
          SUBSTR (cns_fn_strip_item_id (r.request_type_st,
                                        r.request_skey,
                                        i.item_id
                                       ),
                  1,
                  1
                 ) item_id,
          DECODE
              (r.request_type_st,
               'SRQ', r.sowing_yr
                || SUBSTR (o.org_unit_code, 1, 3)
                || LPAD (TO_CHAR (r.request_sequence), 4, '0')
                || ' ',
                  r.request_type_st
               || r.request_yr
               || LPAD (TO_CHAR (r.request_sequence), 4, '0')
               || SUBSTR (cns_fn_strip_item_id (r.request_type_st,
                                                r.request_skey,
                                                i.item_id
                                               ),
                          1,
                          1
                         )
              ) request_item,
          DECODE (r.request_type_st, 'SRQ', r.sowing_yr, r.request_yr),
          r.request_type_st, r.spr_rqst_status_st, s.family_lot_number,
          s.family_lot_number, s.vegetation_st,
          DECODE (r.request_type_st,
                  'CSP', rcp.clctn_volume,
                  'SSP', rcp.clctn_volume,
                  'USP', rcp.clctn_volume,
                  'ASP', rcp.clctn_volume,
                  'RSP', rcp.clctn_volume,
                  NULL
                 ),
          DECODE (r.request_type_st,
                  'CSP', scr.extraction_st_dt,
                  'SSP', scr.extraction_st_dt,
                  'USP', scr.extraction_st_dt,
                  'ASP', scr.extraction_st_dt,
                  'RSP', scr.extraction_st_dt,
                  NULL
                 ),
          DECODE (r.request_type_st,
                  'CSP', cns_fn_cone_seed_rcpt_dt (r.request_skey, i.item_id),
                  'SSP', cns_fn_cone_seed_rcpt_dt (r.request_skey, i.item_id),
                  'USP', cns_fn_cone_seed_rcpt_dt (r.request_skey, i.item_id),
                  'ASP', cns_fn_cone_seed_rcpt_dt (r.request_skey, i.item_id),
                  'RSP', cns_fn_cone_seed_rcpt_dt (r.request_skey, i.item_id),
                  NULL
                 ),
          DECODE (r.request_type_st,
                  'CSP', cns_fn_get_act_blend_dt (r.request_skey, i.item_id),
                  'SSP', cns_fn_get_act_blend_dt (r.request_skey, i.item_id),
                  'USP', cns_fn_get_act_blend_dt (r.request_skey, i.item_id),
                  'ASP', cns_fn_get_act_blend_dt (r.request_skey, i.item_id),
                  'RSP', cns_fn_get_act_blend_dt (r.request_skey, i.item_id),
                  NULL
                 ),
          DECODE (r.request_type_st,
                  'CSP', cns_fn_max_std_ria_begin_dt (r.request_skey,
                                                      i.item_id,
                                                      'WEI'
                                                     ),
                  'SSP', cns_fn_max_std_ria_begin_dt (r.request_skey,
                                                      i.item_id,
                                                      'WEI'
                                                     ),
                  'USP', cns_fn_max_std_ria_begin_dt (r.request_skey,
                                                      i.item_id,
                                                      'WEI'
                                                     ),
                  'ASP', cns_fn_max_std_ria_begin_dt (r.request_skey,
                                                      i.item_id,
                                                      'WEI'
                                                     ),
                  'RSP', cns_fn_max_std_ria_begin_dt (r.request_skey,
                                                      i.item_id,
                                                      'WEI'
                                                     ),
                  NULL
                 ),
          cns_fn_max_ria_end_dt (r.request_skey, i.item_id, 'MC'),
          cns_fn_max_ria_end_dt (r.request_skey, i.item_id, 'PUR'),
          cns_fn_max_ria_end_dt (r.request_skey, i.item_id, 'SPG'),
          TO_DATE (NULL), TO_DATE (NULL), TO_DATE (NULL), TO_CHAR (NULL),
          TO_NUMBER (NULL), TO_NUMBER (NULL), TO_DATE (NULL), NULL
     FROM cns_t_spar_request r,
          cns_t_org_unit o,
          cns_t_request_item i,
          cns_t_family_lot s,
          familylot_extraction scr,
          familylot_receipt rcp
    WHERE r.request_skey > 0
      AND i.request_skey = r.request_skey
      AND i.family_lot_number IS NOT NULL
      AND o.org_unit_no(+) = r.org_unit_no
      AND s.family_lot_number = i.family_lot_number
      AND scr.family_lot_number(+) = s.family_lot_number
      AND rcp.family_lot_number(+) = s.family_lot_number
      AND NOT EXISTS (
             SELECT DISTINCT request_skey
                        FROM cns_t_rqst_itm_actvty sub2,
                             cns_t_test_regime sub3
                       WHERE sub2.request_skey = i.request_skey
                         AND sub2.item_id = i.item_id
                         AND sub2.test_result_ind = -1
                         AND sub3.seedlot_test_code = sub2.activity_type_cd)
      AND EXISTS (
             SELECT DISTINCT request_skey
                        FROM cns_t_rqst_itm_actvty sub
                       WHERE sub.request_skey = i.request_skey
                         AND sub.item_id = i.item_id
                         AND sub.test_result_ind = -1
                         AND NOT EXISTS (
                                SELECT seedlot_test_code
                                  FROM cns_t_test_regime sub4
                                 WHERE sub4.seedlot_test_code =
                                                          sub.activity_type_cd))
   UNION ALL
   SELECT r.priority_dt,
          DECODE (r.request_type_st,
                  'CSP', cns_fn_get_csp_requestor (s.family_lot_number),
                  'SSP', cns_fn_get_csp_requestor (s.family_lot_number),
                  'USP', cns_fn_get_csp_requestor (s.family_lot_number),
                  'ASP', cns_fn_get_csp_requestor (s.family_lot_number),
                  'RSP', cns_fn_get_csp_requestor (s.family_lot_number),
                     RPAD (cns_fn_get_client_acronym (r.rqst_cli_number, NULL),
                           8
                          )
                  || r.rqst_cli_locn_cd
                 ),
          DECODE (r.request_type_st,
                  'SRQ', r.sowing_yr
                   || SUBSTR (o.org_unit_code, 1, 3)
                   || LPAD (TO_CHAR (r.request_sequence), 4, '0'),
                     r.request_type_st
                  || r.request_yr
                  || LPAD (TO_CHAR (r.request_sequence), 4, '0')
                 ) req_id,
          SUBSTR (cns_fn_strip_item_id (r.request_type_st,
                                        r.request_skey,
                                        i.item_id
                                       ),
                  1,
                  1
                 ) item_id,
          DECODE
              (r.request_type_st,
               'SRQ', r.sowing_yr
                || SUBSTR (o.org_unit_code, 1, 3)
                || LPAD (TO_CHAR (r.request_sequence), 4, '0')
                || ' ',
                  r.request_type_st
               || r.request_yr
               || LPAD (TO_CHAR (r.request_sequence), 4, '0')
               || SUBSTR (cns_fn_strip_item_id (r.request_type_st,
                                                r.request_skey,
                                                i.item_id
                                               ),
                          1,
                          1
                         )
              ) request_item,
          DECODE (r.request_type_st, 'SRQ', r.sowing_yr, r.request_yr),
          r.request_type_st, r.spr_rqst_status_st, s.family_lot_number,
          s.family_lot_number, s.vegetation_st,
          DECODE (r.request_type_st,
                  'CSP', rcp.clctn_volume,
                  'SSP', rcp.clctn_volume,
                  'USP', rcp.clctn_volume,
                  'ASP', rcp.clctn_volume,
                  'RSP', rcp.clctn_volume,
                  NULL
                 ),
          DECODE (r.request_type_st,
                  'CSP', scr.extraction_st_dt,
                  'SSP', scr.extraction_st_dt,
                  'USP', scr.extraction_st_dt,
                  'ASP', scr.extraction_st_dt,
                  'RSP', scr.extraction_st_dt,
                  NULL
                 ),
          DECODE (r.request_type_st,
                  'CSP', cns_fn_cone_seed_rcpt_dt (r.request_skey, i.item_id),
                  'SSP', cns_fn_cone_seed_rcpt_dt (r.request_skey, i.item_id),
                  'USP', cns_fn_cone_seed_rcpt_dt (r.request_skey, i.item_id),
                  'ASP', cns_fn_cone_seed_rcpt_dt (r.request_skey, i.item_id),
                  'RSP', cns_fn_cone_seed_rcpt_dt (r.request_skey, i.item_id),
                  NULL
                 ),
          DECODE (r.request_type_st,
                  'CSP', cns_fn_get_act_blend_dt (r.request_skey, i.item_id),
                  'SSP', cns_fn_get_act_blend_dt (r.request_skey, i.item_id),
                  'USP', cns_fn_get_act_blend_dt (r.request_skey, i.item_id),
                  'ASP', cns_fn_get_act_blend_dt (r.request_skey, i.item_id),
                  'RSP', cns_fn_get_act_blend_dt (r.request_skey, i.item_id),
                  NULL
                 ),
          DECODE (r.request_type_st,
                  'CSP', cns_fn_max_std_ria_begin_dt (r.request_skey,
                                                      i.item_id,
                                                      'WEI'
                                                     ),
                  'SSP', cns_fn_max_std_ria_begin_dt (r.request_skey,
                                                      i.item_id,
                                                      'WEI'
                                                     ),
                  'USP', cns_fn_max_std_ria_begin_dt (r.request_skey,
                                                      i.item_id,
                                                      'WEI'
                                                     ),
                  'ASP', cns_fn_max_std_ria_begin_dt (r.request_skey,
                                                      i.item_id,
                                                      'WEI'
                                                     ),
                  'RSP', cns_fn_max_std_ria_begin_dt (r.request_skey,
                                                      i.item_id,
                                                      'WEI'
                                                     ),
                  NULL
                 ),
          cns_fn_max_ria_end_dt (r.request_skey, i.item_id, 'MC'),
          cns_fn_max_ria_end_dt (r.request_skey, i.item_id, 'PUR'),
          cns_fn_max_ria_end_dt (r.request_skey, i.item_id, 'SPG'),
          ria.revised_end_dt, ria.actual_end_dt_tm, ria.actual_begin_dt_tm,
          ria.test_category_cd, tsc.test_complete_ind, tsc.accept_result_ind,
          tsc.seed_withdrawal_date, NULL
     FROM cns_t_spar_request r,
          cns_t_org_unit o,
          cns_t_request_item i,
          cns_t_family_lot s,
          cns_t_rqst_itm_actvty ria,
          cns_t_tsc_test_result tsc,
          familylot_extraction scr,
          familylot_receipt rcp
    WHERE r.request_skey > 0
      AND i.request_skey = r.request_skey
      AND i.family_lot_number IS NOT NULL
      AND o.org_unit_no(+) = r.org_unit_no
      AND s.family_lot_number = i.family_lot_number
      AND scr.family_lot_number(+) = s.family_lot_number
      AND rcp.family_lot_number(+) = s.family_lot_number
      AND ria.request_skey = i.request_skey
      AND ria.item_id = i.item_id
      AND ria.ria_skey = cns_fn_cnsr19_ria_skey_fam (i.request_skey, i.item_id) -- Alberta Familylots have no standard Germ test.
      AND tsc.ria_skey = ria.ria_skey;


-- CONSEP.CNSR19_RQST_FOR_CLIENT source

CREATE OR REPLACE VIEW CONSEP.CNSR19_RQST_FOR_CLIENT
(PRIORITY_DT,RQST_CLI_DISPLAY,REQUEST_CLI_NO,REQUEST_CLI_LOCN,REQ_ID,ITEM_ID,REQUEST_ITEM,REQUEST_YR,REQUEST_TYPE_ST,SPR_RQST_STATUS_ST,SEEDLOT_NUMBER,SEEDLOT_DISPLAY,VEGETATION_ST,CLCTN_VOLUME,ACTUAL_EXTR_DT,CONESEEDRCV_DT,BLENDED_DT,WEIGH_DT,MC_DT,PUR_DT,SPG_DT,REVISED_END_DT,ACTUAL_END_DT_TM,ACTUAL_BEGIN_DT_TM,TEST_CATEGORY_CD,TEST_COMPLETE_IND,ACCEPT_RESULT_IND,SEED_WITHDRAWAL_DATE,SEEDLOT_STATUS)
AS
SELECT
--modified July 2003 by Mdellavi, suppress item id for SRQ/CSP type requests
r.PRIORITY_DT,
cns_fn_get_csp_requestor(s.SEEDLOT_NUMBER),
soq.CLIENT_NUMBER,
soq.CLIENT_LOCN_CODE,
r.REQUEST_TYPE_ST||r.REQUEST_YR||LPAD(TO_CHAR(r.REQUEST_SEQUENCE),4,'0') REQ_ID,
-- item_id needed for conseo Nov 2003 MP
--' ' ITEM_ID,
i.item_id,
r.REQUEST_TYPE_ST||r.REQUEST_YR||LPAD(TO_CHAR(r.REQUEST_SEQUENCE),4,'0')||' ' REQUEST_ITEM,
r.REQUEST_YR,
r.REQUEST_TYPE_ST,
r.SPR_RQST_STATUS_ST,
s.SEEDLOT_NUMBER,
DECODE(s.REGISTERD_SEED_IND,-1,s.SEEDLOT_NUMBER,s.SEEDLOT_NUMBER||'U'),
s.VEGETATION_ST,
s.CLCTN_VOLUME,
s.EXTRACTION_ST_DT,
cns_fn_cone_seed_rcpt_dt(r.REQUEST_SKEY,i.ITEM_ID),
cns_fn_get_act_blend_dt(r.REQUEST_SKEY,i.ITEM_ID),
cns_fn_max_std_ria_begin_dt(r.REQUEST_SKEY,i.ITEM_ID,'WEI'),
cns_fn_max_ria_end_dt(r.REQUEST_SKEY,i.ITEM_ID,'MC'),
cns_fn_max_ria_end_dt(r.REQUEST_SKEY,i.ITEM_ID,'PUR'),
cns_fn_max_ria_end_dt(r.REQUEST_SKEY,i.ITEM_ID,'SPG'),
TO_DATE(NULL),
TO_DATE(NULL),
TO_DATE(NULL),
TO_CHAR(NULL),
TO_NUMBER(NULL),
TO_NUMBER(NULL),
TO_DATE(NULL),
S.SEEDLOT_STATUS_ST
FROM
CNS_T_SPAR_REQUEST r,
CNS_T_ORG_UNIT o,
REQUEST_ITEM_SEEDLOT i,
CNS_T_SEEDLOT_OWN_QTY soq,
CNS_T_SEEDLOT s
WHERE r.REQUEST_SKEY   > 0
AND r.REQUEST_TYPE_ST IN ('CSP','USP','ASP','SSP','RSP')
AND o.ORG_UNIT_NO (+)    = r.ORG_UNIT_NO
AND i.REQUEST_SKEY  = r.REQUEST_SKEY
AND soq.SEEDLOT_NUMBER = i.SEEDLOT_NUMBER
AND     soq.ORIGINAL_PCT_OWNED > 0
AND s.SEEDLOT_NUMBER = i.SEEDLOT_NUMBER
AND NOT EXISTS
(SELECT DISTINCT REQUEST_SKEY FROM CNS_T_RQST_ITM_ACTVTY sub2, CNS_T_TEST_REGIME sub3
WHERE sub2.REQUEST_SKEY = i.REQUEST_SKEY
AND   sub2.ITEM_ID  = i.ITEM_ID
AND   sub2.TEST_RESULT_IND = -1
AND  sub3.SEEDLOT_TEST_CODE = sub2.ACTIVITY_TYPE_CD)
AND EXISTS
(SELECT DISTINCT REQUEST_SKEY FROM CNS_T_RQST_ITM_ACTVTY sub
WHERE   sub.REQUEST_SKEY = i.REQUEST_SKEY
AND  sub.ITEM_ID  = i.ITEM_ID
AND  sub.TEST_RESULT_IND = -1
AND NOT EXISTS (SELECT SEEDLOT_TEST_CODE FROM CNS_T_TEST_REGIME sub4
WHERE sub4.SEEDLOT_TEST_CODE = sub.ACTIVITY_TYPE_CD ))
UNION ALL
SELECT
r.PRIORITY_DT,
RPAD(cns_fn_get_client_acronym(r.RQST_CLI_NUMBER,NULL),8)||r.RQST_CLI_LOCN_CD,
r.RQST_CLI_NUMBER,
r.RQST_CLI_LOCN_CD,
DECODE(r.REQUEST_TYPE_ST, 'SRQ', r.SOWING_YR||SUBSTR(o.ORG_UNIT_CODE,1,3)||
LPAD(TO_CHAR(r.REQUEST_SEQUENCE),4,'0'), r.REQUEST_TYPE_ST||
r.REQUEST_YR||LPAD(TO_CHAR(r.REQUEST_SEQUENCE),4,'0')) REQ_ID,
--item_id needed for consep Nov 2003 MP
--SUBSTR(Cns_Fn_Strip_Item_Id(r.request_type_st,r.request_skey,i.ITEM_ID),1,1),
i.item_id,
DECODE(r.REQUEST_TYPE_ST, 'SRQ', r.SOWING_YR||SUBSTR(o.ORG_UNIT_CODE,1,3)||
LPAD(TO_CHAR(r.REQUEST_SEQUENCE),4,'0')||' ', r.REQUEST_TYPE_ST||
r.REQUEST_YR||LPAD(TO_CHAR(r.REQUEST_SEQUENCE),4,'0')
||SUBSTR(Cns_Fn_Strip_Item_Id(r.request_type_st,r.request_skey,i.ITEM_ID),1,1)) REQUEST_ITEM,
DECODE(r.REQUEST_TYPE_ST,'SRQ',r.SOWING_YR,r.REQUEST_YR),
r.REQUEST_TYPE_ST,
r.SPR_RQST_STATUS_ST,
s.SEEDLOT_NUMBER,
DECODE(s.REGISTERD_SEED_IND,-1,s.SEEDLOT_NUMBER,s.SEEDLOT_NUMBER||'U'),
s.VEGETATION_ST,
TO_NUMBER(NULL),
TO_DATE(NULL),
TO_DATE(NULL),
TO_DATE(NULL),
TO_DATE(NULL),
cns_fn_max_ria_end_dt(r.REQUEST_SKEY,i.ITEM_ID,'MC'),
cns_fn_max_ria_end_dt(r.REQUEST_SKEY,i.ITEM_ID,'PUR'),
cns_fn_max_ria_end_dt(r.REQUEST_SKEY,i.ITEM_ID,'SPG'),
TO_DATE(NULL),
TO_DATE(NULL),
TO_DATE(NULL),
TO_CHAR(NULL),
TO_NUMBER(NULL),
TO_NUMBER(NULL),
TO_DATE(NULL),
S.SEEDLOT_STATUS_ST
FROM    CNS_T_SPAR_REQUEST r,
CNS_T_ORG_UNIT o,
REQUEST_ITEM_SEEDLOT i,
CNS_T_SEEDLOT s
WHERE r.REQUEST_SKEY   > 0
AND r.REQUEST_TYPE_ST NOT IN ('CSP','USP','ASP','SSP','RSP')
AND i.REQUEST_SKEY  = r.REQUEST_SKEY
AND o.ORG_UNIT_NO (+)    = r.ORG_UNIT_NO
AND s.SEEDLOT_NUMBER = i.SEEDLOT_NUMBER
AND NOT EXISTS
(SELECT DISTINCT REQUEST_SKEY FROM CNS_T_RQST_ITM_ACTVTY sub2, CNS_T_TEST_REGIME sub3
WHERE   sub2.REQUEST_SKEY = i.REQUEST_SKEY
AND  sub2.ITEM_ID  = i.ITEM_ID
AND  sub2.TEST_RESULT_IND = -1
AND  sub3.SEEDLOT_TEST_CODE = sub2.ACTIVITY_TYPE_CD)
AND EXISTS
(SELECT DISTINCT REQUEST_SKEY FROM CNS_T_RQST_ITM_ACTVTY sub
WHERE   sub.REQUEST_SKEY = i.REQUEST_SKEY
AND  sub.ITEM_ID  = i.ITEM_ID
AND  sub.TEST_RESULT_IND = -1
AND NOT EXISTS (SELECT SEEDLOT_TEST_CODE FROM CNS_T_TEST_REGIME sub4
WHERE sub4.SEEDLOT_TEST_CODE = sub.ACTIVITY_TYPE_CD ))
UNION ALL
SELECT
r.PRIORITY_DT,
cns_fn_get_csp_requestor(s.SEEDLOT_NUMBER),
soq.CLIENT_NUMBER,
soq.CLIENT_LOCN_CODE,
r.REQUEST_TYPE_ST||r.REQUEST_YR||LPAD(TO_CHAR(r.REQUEST_SEQUENCE),4,'0') REQ_ID,
' ' ITEM_ID,
r.REQUEST_TYPE_ST||r.REQUEST_YR||LPAD(TO_CHAR(r.REQUEST_SEQUENCE),4,'0')||' ' REQUEST_ITEM,
DECODE(r.REQUEST_TYPE_ST,'SRQ',r.SOWING_YR,r.REQUEST_YR),
r.REQUEST_TYPE_ST,
r.SPR_RQST_STATUS_ST,
s.SEEDLOT_NUMBER,
DECODE(s.REGISTERD_SEED_IND,-1,s.SEEDLOT_NUMBER,s.SEEDLOT_NUMBER||'U'),
s.VEGETATION_ST,
s.CLCTN_VOLUME,
s.EXTRACTION_ST_DT,
cns_fn_cone_seed_rcpt_dt(r.REQUEST_SKEY,i.ITEM_ID),
cns_fn_get_act_blend_dt(r.REQUEST_SKEY,i.ITEM_ID),
cns_fn_max_std_ria_begin_dt(r.REQUEST_SKEY,i.ITEM_ID,'WEI'),
cns_fn_max_ria_end_dt(r.REQUEST_SKEY,i.ITEM_ID,'MC'),
cns_fn_max_ria_end_dt(r.REQUEST_SKEY,i.ITEM_ID,'PUR'),
cns_fn_max_ria_end_dt(r.REQUEST_SKEY,i.ITEM_ID,'SPG'),
ria.REVISED_END_DT,
ria.ACTUAL_END_DT_TM,
ria.ACTUAL_BEGIN_DT_TM,
ria.TEST_CATEGORY_CD,
tsc.TEST_COMPLETE_IND,
tsc.ACCEPT_RESULT_IND,
tsc.SEED_WITHDRAWAL_DATE,
S.SEEDLOT_STATUS_ST
FROM
CNS_T_SPAR_REQUEST r,
CNS_T_ORG_UNIT o,
REQUEST_ITEM_SEEDLOT i,
CNS_T_SEEDLOT_OWN_QTY soq,
CNS_T_SEEDLOT s,
CNS_T_RQST_ITM_ACTVTY ria,
CNS_T_TSC_TEST_RESULT tsc
WHERE r.REQUEST_SKEY   > 0
AND r.REQUEST_TYPE_ST IN ('CSP','USP','ASP','SSP','RSP')
AND i.REQUEST_SKEY  = r.REQUEST_SKEY
AND o.ORG_UNIT_NO (+)    = r.ORG_UNIT_NO
AND s.SEEDLOT_NUMBER = i.SEEDLOT_NUMBER
AND soq.SEEDLOT_NUMBER = s.SEEDLOT_NUMBER
AND     soq.ORIGINAL_PCT_OWNED > 0
AND ria.request_skey = i.request_skey
AND ria.item_id  = i.item_id
AND ria.ria_skey  = cns_fn_cnsr19_ria_skey(i.REQUEST_SKEY,i.ITEM_ID)
AND tsc.ria_skey  = ria.ria_skey
UNION ALL
SELECT
r.PRIORITY_DT,
RPAD(cns_fn_get_client_acronym(r.RQST_CLI_NUMBER,NULL),8)||r.RQST_CLI_LOCN_CD,
r.RQST_CLI_NUMBER,
r.RQST_CLI_LOCN_CD,
DECODE(r.REQUEST_TYPE_ST, 'SRQ', r.SOWING_YR||SUBSTR(o.ORG_UNIT_CODE,1,3)||
LPAD(TO_CHAR(r.REQUEST_SEQUENCE),4,'0'), r.REQUEST_TYPE_ST||
r.REQUEST_YR||LPAD(TO_CHAR(r.REQUEST_SEQUENCE),4,'0')) REQ_ID,
SUBSTR(Cns_Fn_Strip_Item_Id(r.request_type_st,r.request_skey,i.ITEM_ID),1,1) ITEM_ID,
DECODE(r.REQUEST_TYPE_ST, 'SRQ', r.SOWING_YR||SUBSTR(o.ORG_UNIT_CODE,1,3)||
LPAD(TO_CHAR(r.REQUEST_SEQUENCE),4,'0')||' ', r.REQUEST_TYPE_ST||
r.REQUEST_YR||LPAD(TO_CHAR(r.REQUEST_SEQUENCE),4,'0')
||SUBSTR(Cns_Fn_Strip_Item_Id(r.request_type_st,r.request_skey,i.ITEM_ID),1,1)) REQUEST_ITEM,
DECODE(r.REQUEST_TYPE_ST,'SRQ',r.SOWING_YR,r.REQUEST_YR),
r.REQUEST_TYPE_ST,
r.SPR_RQST_STATUS_ST,
s.SEEDLOT_NUMBER,
DECODE(s.REGISTERD_SEED_IND,-1,s.SEEDLOT_NUMBER,s.SEEDLOT_NUMBER||'U'),
s.VEGETATION_ST,
TO_NUMBER(NULL),
TO_DATE(NULL),
TO_DATE(NULL),
TO_DATE(NULL),
TO_DATE(NULL),
cns_fn_max_ria_end_dt(r.REQUEST_SKEY,i.ITEM_ID,'MC'),
cns_fn_max_ria_end_dt(r.REQUEST_SKEY,i.ITEM_ID,'PUR'),
cns_fn_max_ria_end_dt(r.REQUEST_SKEY,i.ITEM_ID,'SPG'),
ria.REVISED_END_DT,
ria.ACTUAL_END_DT_TM,
ria.ACTUAL_BEGIN_DT_TM,
ria.TEST_CATEGORY_CD,
tsc.TEST_COMPLETE_IND,
tsc.ACCEPT_RESULT_IND,
tsc.SEED_WITHDRAWAL_DATE,
S.SEEDLOT_STATUS_ST
FROM
CNS_T_SPAR_REQUEST r,
CNS_T_ORG_UNIT o,
REQUEST_ITEM_SEEDLOT i,
CNS_T_SEEDLOT s,
CNS_T_RQST_ITM_ACTVTY ria,
CNS_T_TSC_TEST_RESULT tsc
WHERE
r.REQUEST_SKEY   > 0
AND r.REQUEST_TYPE_ST NOT IN ('CSP','USP','ASP','SSP','RSP')
AND i.REQUEST_SKEY  = r.REQUEST_SKEY
AND o.ORG_UNIT_NO (+)    = r.ORG_UNIT_NO
AND s.SEEDLOT_NUMBER = i.SEEDLOT_NUMBER
AND ria.request_skey = i.request_skey
AND ria.item_id  = i.item_id
AND ria.ria_skey  = cns_fn_cnsr19_ria_skey(i.REQUEST_SKEY,i.ITEM_ID)
AND tsc.ria_skey  = ria.ria_skey;


-- CONSEP.CNSR19_RQST_FOR_CLI_FAMILY source

CREATE OR REPLACE VIEW CONSEP.CNSR19_RQST_FOR_CLI_FAMILY
(PRIORITY_DT,RQST_CLI_DISPLAY,REQUEST_CLI_NO,REQUEST_CLI_LOCN,REQ_ID,ITEM_ID,REQUEST_ITEM,REQUEST_YR,REQUEST_TYPE_ST,SPR_RQST_STATUS_ST,SEEDLOT_NUMBER,SEEDLOT_DISPLAY,VEGETATION_ST,CLCTN_VOLUME,ACTUAL_EXTR_DT,CONESEEDRCV_DT,BLENDED_DT,WEIGH_DT,MC_DT,PUR_DT,SPG_DT,REVISED_END_DT,ACTUAL_END_DT_TM,ACTUAL_BEGIN_DT_TM,TEST_CATEGORY_CD,TEST_COMPLETE_IND,ACCEPT_RESULT_IND,SEED_WITHDRAWAL_DATE,SEEDLOT_STATUS)
AS
SELECT
-- Created Sept 15, 2001 by M.Ison
-- This view only looks at CSP_REQUEST_TYPE_ST types
-- Modified July 2003 by Mdellavi, suppress item_id display
r.PRIORITY_DT,
RPAD(cns_fn_get_client_acronym(s.CLCTN_CLI_NUMBER,NULL),8)||s.CLCTN_CLI_LOCN_CD,
s.CLCTN_CLI_NUMBER,
s.CLCTN_CLI_LOCN_CD,
r.REQUEST_TYPE_ST||r.REQUEST_YR||LPAD(TO_CHAR(r.REQUEST_SEQUENCE),4,'0') REQ_ID,
' ' ITEM_ID,
r.REQUEST_TYPE_ST||r.REQUEST_YR||LPAD(TO_CHAR(r.REQUEST_SEQUENCE),4,'0')||' ' REQUEST_ITEM,
r.REQUEST_YR,
r.REQUEST_TYPE_ST,
r.SPR_RQST_STATUS_ST,
S.FAMILY_LOT_NUMBER,
S.FAMILY_LOT_NUMBER,
s.VEGETATION_ST,
rcp.CLCTN_VOLUME,
scr.EXTRACTION_ST_DT,
cns_fn_cone_seed_rcpt_dt(r.REQUEST_SKEY,i.ITEM_ID),
cns_fn_get_act_blend_dt(r.REQUEST_SKEY,i.ITEM_ID),
cns_fn_max_std_ria_begin_dt(r.REQUEST_SKEY,i.ITEM_ID,'WEI'),
cns_fn_max_ria_end_dt(r.REQUEST_SKEY,i.ITEM_ID,'MC'),
cns_fn_max_ria_end_dt(r.REQUEST_SKEY,i.ITEM_ID,'PUR'),
cns_fn_max_ria_end_dt(r.REQUEST_SKEY,i.ITEM_ID,'SPG'),
TO_DATE(NULL),
TO_DATE(NULL),
TO_DATE(NULL),
TO_CHAR(NULL),
TO_NUMBER(NULL),
TO_NUMBER(NULL),
TO_DATE(NULL),
NULL
FROM
    CNS_T_SPAR_REQUEST r,
 CNS_T_ORG_UNIT o,
 CNS_T_REQUEST_ITEM i,
    CNS_T_FAMILY_LOT s,
 FAMILYLOT_EXTRACTION scr,
 FAMILYLOT_RECEIPT rcp
WHERE
 r.REQUEST_SKEY   > 0
AND r.REQUEST_TYPE_ST IN ('CSP','USP','ASP','SSP')
AND i.REQUEST_SKEY  = r.REQUEST_SKEY
AND i.FAMILY_LOT_NUMBER IS NOT NULL
AND s.FAMILY_LOT_NUMBER = i.FAMILY_LOT_NUMBER
AND o.ORG_UNIT_NO (+) = r.ORG_UNIT_NO
AND scr.FAMILY_LOT_NUMBER (+) = i.FAMILY_LOT_NUMBER
AND rcp.FAMILY_LOT_NUMBER (+) = i.FAMILY_LOT_NUMBER
AND NOT EXISTS
  (SELECT DISTINCT REQUEST_SKEY FROM CNS_T_RQST_ITM_ACTVTY sub2, CNS_T_TEST_REGIME sub3
   WHERE   sub2.REQUEST_SKEY = i.REQUEST_SKEY
   AND  sub2.ITEM_ID  = i.ITEM_ID
   AND  sub2.TEST_RESULT_IND = -1
   AND  sub3.SEEDLOT_TEST_CODE = sub2.ACTIVITY_TYPE_CD)
AND EXISTS
  (SELECT DISTINCT REQUEST_SKEY FROM CNS_T_RQST_ITM_ACTVTY sub
   WHERE   sub.REQUEST_SKEY = i.REQUEST_SKEY
   AND  sub.ITEM_ID  = i.ITEM_ID
   AND  sub.TEST_RESULT_IND = -1
   AND NOT EXISTS (SELECT SEEDLOT_TEST_CODE FROM CNS_T_TEST_REGIME sub4
                   WHERE sub4.SEEDLOT_TEST_CODE = sub.ACTIVITY_TYPE_CD ))
UNION ALL
SELECT
r.PRIORITY_DT,
RPAD(cns_fn_get_client_acronym(s.CLCTN_CLI_NUMBER,NULL),8)||s.CLCTN_CLI_LOCN_CD,
s.CLCTN_CLI_NUMBER,
s.CLCTN_CLI_LOCN_CD,
r.REQUEST_TYPE_ST||r.REQUEST_YR||LPAD(TO_CHAR(r.REQUEST_SEQUENCE),4,'0') REQ_ID,
' ' ITEM_ID,
r.REQUEST_TYPE_ST||r.REQUEST_YR||LPAD(TO_CHAR(r.REQUEST_SEQUENCE),4,'0')||' ' REQUEST_ITEM,
DECODE(r.REQUEST_TYPE_ST,'SRQ',r.SOWING_YR,r.REQUEST_YR),
r.REQUEST_TYPE_ST,
r.SPR_RQST_STATUS_ST,
S.FAMILY_LOT_NUMBER,
S.FAMILY_LOT_NUMBER,
s.VEGETATION_ST,
rcp.CLCTN_VOLUME,
scr.EXTRACTION_ST_DT,
cns_fn_cone_seed_rcpt_dt(r.REQUEST_SKEY,i.ITEM_ID),
cns_fn_get_act_blend_dt(r.REQUEST_SKEY,i.ITEM_ID),
cns_fn_max_std_ria_begin_dt(r.REQUEST_SKEY,i.ITEM_ID,'WEI'),
cns_fn_max_ria_end_dt(r.REQUEST_SKEY,i.ITEM_ID,'MC'),
cns_fn_max_ria_end_dt(r.REQUEST_SKEY,i.ITEM_ID,'PUR'),
cns_fn_max_ria_end_dt(r.REQUEST_SKEY,i.ITEM_ID,'SPG'),
ria.REVISED_END_DT,
ria.ACTUAL_END_DT_TM,
ria.ACTUAL_BEGIN_DT_TM,
ria.TEST_CATEGORY_CD,
tsc.TEST_COMPLETE_IND,
tsc.ACCEPT_RESULT_IND,
tsc.SEED_WITHDRAWAL_DATE,
NULL
FROM
   CNS_T_SPAR_REQUEST r,
   CNS_T_ORG_UNIT o,
   CNS_T_REQUEST_ITEM i,
   CNS_T_FAMILY_LOT s,
   CNS_T_RQST_ITM_ACTVTY ria,
   CNS_T_TSC_TEST_RESULT tsc,
   FAMILYLOT_EXTRACTION scr,
   FAMILYLOT_RECEIPT rcp
WHERE r.REQUEST_SKEY    > 0
AND r.REQUEST_TYPE_ST IN ('CSP','USP','ASP','SSP')
AND i.FAMILY_LOT_NUMBER IS NOT NULL
AND i.REQUEST_SKEY         = r.REQUEST_SKEY
AND o.ORG_UNIT_NO    (+)   = r.ORG_UNIT_NO
AND s.FAMILY_LOT_NUMBER     = i.FAMILY_LOT_NUMBER
AND scr.FAMILY_LOT_NUMBER (+) = i.FAMILY_LOT_NUMBER
AND rcp.FAMILY_LOT_NUMBER (+) = i.FAMILY_LOT_NUMBER
AND ria.request_skey     = i.request_skey
AND ria.item_id     = i.item_id
AND ria.ria_skey    = cns_fn_cnsr19_ria_skey(i.REQUEST_SKEY,i.ITEM_ID)
AND tsc.ria_skey    = ria.ria_skey;


-- CONSEP.CNSR25 source

CREATE OR REPLACE VIEW CONSEP.CNSR25
(RIA_SKEY,INHOUSE_INV_NO,LATEST_ACTIONED_DT,REQ_ID,STNDRD_ACTIVITY_ID,ACTUAL_BEGIN_DT_TM,ACTUAL_END_DT_TM,REQUEST_SKEY,REQUEST_TYPE_ST,REQUEST_SOWING_YR)
AS
SELECT DISTINCT
A.RIA_SKEY,
D.INHOUSE_INV_NO,
D.LATEST_ACTIONED_DT,
DECODE(B.REQUEST_TYPE_ST,'SRQ',B.SOWING_YR||SUBSTR(C.ORG_UNIT_CODE,1,3)||
       LPAD(TO_CHAR(b.REQUEST_SEQUENCE),4,'0')||A.ITEM_ID,
       B.REQUEST_TYPE_ST||B.REQUEST_YR||
       LPAD(TO_CHAR(b.REQUEST_SEQUENCE),4,'0')||A.ITEM_ID) REQ_ID,
A.STNDRD_ACTIVITY_ID,
A.ACTUAL_BEGIN_DT_TM,
A.ACTUAL_END_DT_TM,
B.REQUEST_SKEY,
B.REQUEST_TYPE_ST,
DECODE(B.REQUEST_TYPE_ST,'SRQ',B.SOWING_YR,B.REQUEST_YR)
FROM    CNS_T_RQST_ITM_ACTVTY A,
	CNS_T_SPAR_REQUEST B,
	CNS_T_ORG_UNIT C,
	CNS_T_REQUEST_ITEM D
WHERE   B.ORG_UNIT_NO = C.ORG_UNIT_NO (+)
AND     B.REQUEST_SKEY = D.REQUEST_SKEY
AND     A.REQUEST_SKEY = D.REQUEST_SKEY
AND     B.REQUEST_SKEY <> 0
AND     B.SPR_RQST_STATUS_ST='CAN';


-- CONSEP.CNSR57INV source

CREATE OR REPLACE VIEW CONSEP.CNSR57INV
(INHOUSE_INVNTRY_ID,VEGETATION_ST,SHIP_TO_CLI_NUMBER,SHIP_TO_CLI_LOC_CD,REQUIRED_BY_DT,ACTION_DT,SOWING_DT,SEEDLOT_TEST_CODE,SHIP_TO_CLI_NO_ACRNM,EXPANDED_RESULT,NURSERY_COMMENT)
AS
SELECT
a.INHOUSE_INVNTRY_ID,
a.VEGETATION_ST,
a.SHIP_TO_CLI_NUMBER,
a.SHIP_TO_CLI_LOC_CD,
a.REQUIRED_BY_DT,
a.ACTION_DT,
a.SOWING_DT,
a.SEEDLOT_TEST_CODE,
DECODE(RTRIM(cns_fn_get_cli_nurs_acronym(a.SHIP_TO_CLI_NUMBER,a.SHIP_TO_CLI_LOC_CD)),NULL,RPAD(a.SHIP_TO_CLI_NUMBER,8,'0'),
cns_fn_get_cli_nurs_acronym(a.SHIP_TO_CLI_NUMBER,a.SHIP_TO_CLI_LOC_CD)) SHIP_TO_CLI_NO_ACRNM,
cns_fn_get_codelist_dsc('SEEDLOT_TEST_CODE',a.SEEDLOT_TEST_CODE),
wp.NURSERY_COMMENT
FROM    CNS_T_INHOUSE_INVNTRY a,
CNS_T_CLIENT_ACRONYM b,
(SELECT DISTINCT std.STD_WORKPLAN_SKEY, wn.CLIENT_NUMBER, wn.CLIENT_LOCN_CODE, wn.NURSERY_COMMENT,
ws.VEGETATION_ST, wt.SEEDLOT_TEST_CODE
FROM CNS_T_STD_WORKPLAN std,
CNS_T_WRKPLN_NURSERY wn,
CNS_T_WRKPLN_SPECIES ws,
CNS_T_WRKPLN_TST_TYPE wt
WHERE std.EXPIRY_DT IS NULL
AND	  wn.STD_WORKPLAN_SKEY (+) = std.STD_WORKPLAN_SKEY
AND	  ws.STD_WORKPLAN_SKEY (+) = std.STD_WORKPLAN_SKEY
AND   wt.STD_WORKPLAN_SKEY (+) = std.STD_WORKPLAN_SKEY) wp
WHERE   a.SHIP_TO_CLI_NUMBER = b.CLIENT_NUMBER (+)
AND     a.SHIP_TO_CLI_NUMBER = wp.CLIENT_NUMBER (+)
AND     a.SHIP_TO_CLI_LOC_CD = wp.CLIENT_LOCN_CODE (+)
AND     a.VEGETATION_ST = wp.VEGETATION_ST (+)
AND     a.SEEDLOT_TEST_CODE = wp.SEEDLOT_TEST_CODE (+);


-- CONSEP.CNS_QUARTER_REPORT_DATA source

CREATE OR REPLACE VIEW CONSEP.CNS_QUARTER_REPORT_DATA
(REQUEST_SKEY,ITEM_ID,YR,APPROVE_DATE,WITHDRAW_DATE,STRAT_DATE,MMC_DATE,SHIP_DATE,SHIP_TO_PELLET_DATE,VEGETATION_ST)
AS
SELECT
a.request_skey,
b.item_id,
decode(a.request_type_st, 'SRQ',SOWING_YR, REQUEST_YR),
trunc(SR.APPROVED_TIMESTAMP),
cns_fn_get_withdrawal_date(a.request_skey, b.item_id),
Cns_Fn_Get_Strat_Start_Date(a.request_skey,b.item_id),
cns_fn_get_MMC_DATE_NON_QA(a.request_skey, b.item_id),
Cns_Fn_Get_Ship_Date(a.request_skey,b.item_id),
cns_fn_get_ship_pellet_date(a.request_skey,B.item_id),
a.vegetation_st

FROM
CNS_T_SPAR_REQUEST A,
THE.SPAR_REQUEST SR,
CNS_T_REQUEST_ITEM B
where a.request_skey = sr.request_skey
AND a.request_skey = b.request_skey
and request_type_st = 'SRQ'
and decode(a.request_type_st, 'SRQ',SOWING_YR, REQUEST_YR) = 2007;


-- CONSEP.CNS_T_BILLING_ITEM source

CREATE OR REPLACE VIEW CONSEP.CNS_T_BILLING_ITEM
(BILLING_ITEM_ID,REQUEST_TYPE_CODE,SERVICE_BILLING_METHOD_CODE,REVISION_COUNT,BILLING_ITEM_DESC)
AS
SELECT "BILLING_ITEM_ID","REQUEST_TYPE_CODE","SERVICE_BILLING_METHOD_CODE","REVISION_COUNT","BILLING_ITEM_DESC" from THE.BILLING_ITEM;


-- CONSEP.CNS_T_BILLING_OBLIGATION source

CREATE OR REPLACE VIEW CONSEP.CNS_T_BILLING_OBLIGATION
(REQUEST_SKEY,ITEM_ID,CLIENT_NUMBER,CLIENT_LOCN_CODE,PCT_OWNERSHIP)
AS
SELECT "REQUEST_SKEY","ITEM_ID","CLIENT_NUMBER","CLIENT_LOCN_CODE","PCT_OWNERSHIP" from THE.BILLING_OBLIGATION;


-- CONSEP.CNS_T_BLNG_ITM_ACTVTY source

CREATE OR REPLACE VIEW CONSEP.CNS_T_BLNG_ITM_ACTVTY
(BILLING_ITEM_ID,STANDARD_ACTIVITY_ID,EFFECTIVE_DATE,EXPIRY_DATE,REVISION_COUNT)
AS
SELECT "BILLING_ITEM_ID","STANDARD_ACTIVITY_ID","EFFECTIVE_DATE","EXPIRY_DATE","REVISION_COUNT" from THE.BILLING_ITEM_ACTIVITY;


-- CONSEP.CNS_T_BLNG_ITM_DISC source

CREATE OR REPLACE VIEW CONSEP.CNS_T_BLNG_ITM_DISC
(BILLING_ITEM_ID,BILLING_ITEM_PRICE_SKEY,BILLING_ITEM_DISC_SKEY,DISCOUNT_EFF_DATE,MIN_PROCESSING_QTY,DISCOUNT_EXP_DATE,MAX_PROCESSING_QTY,DISCOUNT_PERCENT,REVISION_COUNT,DISCOUNT_COMMENT)
AS
SELECT "BILLING_ITEM_ID","BILLING_ITEM_PRICE_SKEY","BILLING_ITEM_DISC_SKEY","DISCOUNT_EFF_DATE","MIN_PROCESSING_QTY","DISCOUNT_EXP_DATE","MAX_PROCESSING_QTY","DISCOUNT_PERCENT","REVISION_COUNT","DISCOUNT_COMMENT" from THE.BILLING_ITEM_DISC;


-- CONSEP.CNS_T_BLNG_ITM_PRICE source

CREATE OR REPLACE VIEW CONSEP.CNS_T_BLNG_ITM_PRICE
(BILLING_ITEM_ID,BILLING_ITEM_PRICE_SKEY,EFFECTIVE_DATE,EXPIRY_DATE,VEGETATION_CODE,BASE_PRICE,UNIT_PRICE,REVISION_COUNT,UNIT_OF_MEASURE_CODE)
AS
SELECT "BILLING_ITEM_ID","BILLING_ITEM_PRICE_SKEY","EFFECTIVE_DATE","EXPIRY_DATE","VEGETATION_CODE","BASE_PRICE","UNIT_PRICE","REVISION_COUNT","UNIT_OF_MEASURE_CODE" from THE.BILLING_ITEM_PRICE;


-- CONSEP.CNS_T_CAVITIES_BLOCK source

CREATE OR REPLACE VIEW CONSEP.CNS_T_CAVITIES_BLOCK
(SEEDLING_CONTNR_CD,CAVITIES_PER_BLOCK,REVISION_COUNT)
AS
SELECT SEEDLING_CONTAINER_CODE      SEEDLING_CONTNR_CD
      , CAVITIES_PER_BLOCK
      , REVISION_COUNT
 FROM THE.CAVITIES_BLOCK;


-- CONSEP.CNS_T_CLIENT_ACRONYM source

CREATE OR REPLACE VIEW CONSEP.CNS_T_CLIENT_ACRONYM
(CLIENT_ACRONYM,CLIENT_NUMBER,REVISION_COUNT)
AS
SELECT "CLIENT_ACRONYM","CLIENT_NUMBER","REVISION_COUNT" from THE.CLIENT_ACRONYM;


-- CONSEP.CNS_T_CLIENT_LOCATION source

CREATE OR REPLACE VIEW CONSEP.CNS_T_CLIENT_LOCATION
(CLIENT_NUMBER,CLIENT_LOCN_CODE,CLIENT_LOCN_NAME,ADDRESS_1,ADDRESS_2,ADDRESS_3,CITY,PROVINCE,POSTAL_CODE,COUNTRY,BUSINESS_PHONE,HOME_PHONE)
AS
SELECT T2.CLIENT_NUMBER
      , T2.CLIENT_LOCN_CODE
      , T2.CLIENT_LOCN_NAME
      , T2.ADDRESS_1
      , T2.ADDRESS_2
      , T2.ADDRESS_3
      , T2.CITY
      , T2.PROVINCE
      , T2.POSTAL_CODE
      , T2.COUNTRY
      , T2.BUSINESS_PHONE
      , T2.HOME_PHONE
 FROM THE.CLIENT_ACRONYM T1
    , THE.CLIENT_LOCATION T2
 WHERE T1.CLIENT_NUMBER = T2.CLIENT_NUMBER;


-- CONSEP.CNS_T_CLIENT_NURS_ACRONYM source

CREATE OR REPLACE VIEW CONSEP.CNS_T_CLIENT_NURS_ACRONYM
(CLIENT_ACRONYM,CLIENT_NUMBER,CLIENT_LOCN_CODE,REVISION_COUNT,SORT_ORD)
AS
SELECT "CLIENT_ACRONYM","CLIENT_NUMBER",NULL,"REVISION_COUNT", 2 from CNS_T_CLIENT_ACRONYM
UNION
SELECT "NURSERY_ACRONYM","CLIENT_NUMBER","CLIENT_LOCN_CODE","REVISION_COUNT", 1 from CNS_T_NURSERY_LOCATION
ORDER BY 5;


-- CONSEP.CNS_T_CLIENT_PUBLIC source

CREATE OR REPLACE VIEW CONSEP.CNS_T_CLIENT_PUBLIC
(CLIENT_NUMBER,CLIENT_NAME,LEGAL_FIRST_NAME,LEGAL_MIDDLE_NAME,CLIENT_STATUS_CODE,CLIENT_TYPE_CODE)
AS
SELECT T1.CLIENT_NUMBER
      , T1.CLIENT_NAME
      , T1.LEGAL_FIRST_NAME
      , T1.LEGAL_MIDDLE_NAME
      , T1.CLIENT_STATUS_CODE
      , T1.CLIENT_TYPE_CODE
 FROM THE.FOREST_CLIENT T1
    , THE.CLIENT_ACRONYM T2
 WHERE T2.CLIENT_NUMBER = T1.CLIENT_NUMBER;


-- CONSEP.CNS_T_CLNT_RCVBL_ACCT source

CREATE OR REPLACE VIEW CONSEP.CNS_T_CLNT_RCVBL_ACCT
(CLIENT_NUMBER,CLIENT_LOCN_CODE,ACCOUNT_STATUS_CD)
AS
SELECT  CLIENT_NUMBER
       , CLIENT_LOCN_CODE
       , ACCOUNT_STATUS_CD
 FROM the.CLNT_RCVBL_ACCT;


-- CONSEP.CNS_T_CNSL01A_TEMP source

CREATE OR REPLACE VIEW CONSEP.CNS_T_CNSL01A_TEMP
(REQUEST_SKEY,REQUEST_TYPE_ST,SOWING_YR,REQUEST_YR,ORG_UNIT_NO,REQUEST_SEQUENCE,SPR_RQST_STATUS_ST,RQST_CLI_NUMBER,RQST_CLI_LOCN_CD,MTHD_OF_PAYMENT_CD,REQUIRED_BY_DT,PRIORITY_DT,AUTHORIZATION_CD,VEGETATION_ST,SEEDLING_STKTYP_CD,SEEDLING_CONTNR_CD,SEEDLING_STKAGE_CD,PLANTING_YR,PLANTING_DAY,PLANTING_SEASON_ST,QTY_SEEDLINGS_RQST,SPAR_FUND_SRCE_ST,CLIENT_REFERENCE,REQUEST_COMMENT,CROWN_LAND_IND,PROCESSED_IND)
AS
SELECT
   REQUEST_SKEY, REQUEST_TYPE_CODE, SOWING_YEAR,
   REQUEST_YEAR, ORG_UNIT_NO, REQUEST_SEQUENCE,
   SPR_REQUEST_STATUS_CODE, RQST_CLI_NUMBER, RQST_CLI_LOCN_CD,
   METHOD_OF_PAYMENT_CODE, REQUIRED_BY_DATE, PRIORITY_DATE,
   AUTHORIZATION_CODE, VEGETATION_CODE, SEEDLING_STOCK_TYPE_CODE,
   SEEDLING_CONTAINER_CODE, SEEDLING_STOCK_AGE_CODE, PLANTING_YEAR,
   PLANTING_DAY, PLANTING_SEASON_CODE, QTY_SEEDLINGS_RQST,  SPAR_FUND_SRCE_CODE,
   CLIENT_REFERENCE, REQUEST_COMMENT,CROWN_LAND_IND,PROCESSED_IND
  FROM
   SPAR_REQUEST_DOWNLOAD
  WHERE PROCESSED_IND IS NULL OR PROCESSED_IND = 'N';


-- CONSEP.CNS_T_CNSL01A_TEMP_ALL source

CREATE OR REPLACE VIEW CONSEP.CNS_T_CNSL01A_TEMP_ALL
(REQUEST_SKEY,REQUEST_TYPE_ST,SOWING_YR,REQUEST_YR,ORG_UNIT_NO,REQUEST_SEQUENCE,SPR_RQST_STATUS_ST,RQST_CLI_NUMBER,RQST_CLI_LOCN_CD,MTHD_OF_PAYMENT_CD,REQUIRED_BY_DT,PRIORITY_DT,AUTHORIZATION_CD,VEGETATION_ST,SEEDLING_STKTYP_CD,SEEDLING_CONTNR_CD,SEEDLING_STKAGE_CD,PLANTING_YR,PLANTING_DAY,PLANTING_SEASON_ST,QTY_SEEDLINGS_RQST,SPAR_FUND_SRCE_ST,CLIENT_REFERENCE,REQUEST_COMMENT,CROWN_LAND_IND,PROCESSED_IND)
AS
SELECT
   REQUEST_SKEY, REQUEST_TYPE_CODE, SOWING_YEAR,
   REQUEST_YEAR, ORG_UNIT_NO, REQUEST_SEQUENCE,
   SPR_REQUEST_STATUS_CODE, RQST_CLI_NUMBER, RQST_CLI_LOCN_CD,
   METHOD_OF_PAYMENT_CODE, REQUIRED_BY_DATE, PRIORITY_DATE,
   AUTHORIZATION_CODE, VEGETATION_CODE, SEEDLING_STOCK_TYPE_CODE,
   SEEDLING_CONTAINER_CODE, SEEDLING_STOCK_AGE_CODE, PLANTING_YEAR,
   PLANTING_DAY, PLANTING_SEASON_CODE, QTY_SEEDLINGS_RQST,  SPAR_FUND_SRCE_CODE,
   CLIENT_REFERENCE, REQUEST_COMMENT,CROWN_LAND_IND,PROCESSED_IND
  FROM
   SPAR_REQUEST_DOWNLOAD;


-- CONSEP.CNS_T_CNSL01B_TEMP source

CREATE OR REPLACE VIEW CONSEP.CNS_T_CNSL01B_TEMP
(REQUEST_SKEY,ITEM_ID,STD_WRKPLN_SKEY,VEGETATION_ST,SAMPLE_ID,FAMILY_LOT_NUMBER,RQST_SDLNGS_RSRVD,RQST_SDLNGS_SRPLS,NO_OF_CONTAINERS,CONE_VOLUME,SEED_QUANTITY,SHIPTO_CLI_NUMBER,SHIPTO_CLI_LOCN_CD,REQUIRED_BY_DT,LATEST_ACTIONED_DT,RCMNDED_SOWING_DT,SPCFIED_SOWING_DT,NRSRY_OBLIGATN_IND,NRSRY_CLI_NUMBER,NRSRY_CLI_LOCN_CD,EXTRCT_CLI_NUMBER,EXTRCT_CLI_LOCN_CD,INTERIM_STORGE_LOC,NO_OF_CONES,CONE_IND,SAMPLE_ELEVATION,SRV_BLNG_CREATE_TS,SAMPLE_LOC_DESC)
AS
SELECT
   REQUEST_SKEY, ITEM_ID, STANDARD_WORKPLAN_SKEY,
   VEGETATION_CODE, SAMPLE_ID, FAMILY_LOT_NUMBER,
   RQST_SDLNGS_RSRVD, RQST_SDLNGS_SRPLS, NO_OF_CONTAINERS,
   CONE_VOLUME, SEED_QUANTITY, SHIPTO_CLI_NUMBER,
   SHIPTO_CLI_LOCN_CD, REQUIRED_BY_DATE, LATEST_ACTIONED_DATE,
   RCMNDED_SOWING_DATE, SPCFIED_SOWING_DATE, DECODE(NRSRY_OBLIGATN_IND,'Y',-1,'N',0,NRSRY_OBLIGATN_IND),
   NRSRY_CLI_NUMBER, NRSRY_CLI_LOCN_CD, EXTRCT_CLI_NUMBER,
   EXTRCT_CLI_LOCN_CD, INTERIM_STORGE_LOC, NO_OF_CONES,
   DECODE(CONE_IND,'Y',-1,'N',0,CONE_IND), SAMPLE_ELEVATION, SRV_BLNG_CREATE_TS,
   SAMPLE_LOC_DESC
 FROM REQUEST_ITEM_DOWNLOAD;


-- CONSEP.CNS_T_CNSL01C_TEMP source

CREATE OR REPLACE VIEW CONSEP.CNS_T_CNSL01C_TEMP
(REQUEST_SKEY,ITEM_ID,SEEDLOT_NUMBER,CLIENT_NUMBER,CLIENT_LOCN_CODE,RQST_FROM_RESERVE,RQST_FROM_SURPLUS,RQST_TEST_RESERVE,RQST_TEST_SURPLUS,RQST_TO_RESERVE,RQST_TO_SURPLUS,SEEDLOT_TEST_CODE,GERMINATION_PCT,PV)
AS
SELECT
   t1.REQUEST_SKEY, t1.ITEM_ID, t1.SEEDLOT_NUMBER,
   CLIENT_NUMBER, CLIENT_LOCN_CODE, RQST_FROM_RESERVE,
   RQST_FROM_SURPLUS, RQST_TEST_RESERVE, RQST_TEST_SURPLUS,
   RQST_TO_RESERVE, RQST_TO_SURPLUS, SEEDLOT_TEST_CODE,
   t1.GERMINATION_PCT,t2.PV
 FROM
    REQUEST_SEEDLOT_DOWNLOAD t1
   ,rankagerm t2
 WHERE t1.seedlot_number = t2.seedlot_number (+)
 AND   t1.request_skey = t2.request_skey (+)
 AND   t1.item_id      = t2.item_id (+);


-- CONSEP.CNS_T_CNSL33A_TEMP source

CREATE OR REPLACE VIEW CONSEP.CNS_T_CNSL33A_TEMP
(REQUEST_SKEY,REQUEST_TYPE_ST,SOWING_YR,REQUEST_YR,ORG_UNIT_NO,REQUEST_SEQUENCE,SPR_RQST_STATUS_ST,RQST_CLI_NUMBER,RQST_CLI_LOCN_CD,MTHD_OF_PAYMENT_CD,REQUIRED_BY_DT,PRIORITY_DT,AUTHORIZATION_CD,VEGETATION_ST,SEEDLING_STKTYP_CD,SEEDLING_CONTNR_CD,SEEDLING_STKAGE_CD,PLANTING_YR,PLANTING_DAY,PLANTING_SEASON_ST,QTY_SEEDLINGS_RQST,SPAR_FUND_SRCE_ST,CLIENT_REFERENCE,REQUEST_COMMENT,CROWN_LAND_IND,PROCESSED_IND)
AS
SELECT
   REQUEST_SKEY, REQUEST_TYPE_CODE, SOWING_YEAR,
   REQUEST_YEAR, ORG_UNIT_NO, REQUEST_SEQUENCE,
   SPR_REQUEST_STATUS_CODE, RQST_CLI_NUMBER, RQST_CLI_LOCN_CD,
   METHOD_OF_PAYMENT_CODE, REQUIRED_BY_DATE, PRIORITY_DATE,
   AUTHORIZATION_CODE, VEGETATION_CODE, SEEDLING_STOCK_TYPE_CODE,
   SEEDLING_CONTAINER_CODE, SEEDLING_STOCK_AGE_CODE, PLANTING_YEAR,
   PLANTING_DAY, PLANTING_SEASON_CODE, QTY_SEEDLINGS_RQST,SPAR_FUND_SRCE_CODE,
   CLIENT_REFERENCE, REQUEST_COMMENT, CROWN_LAND_IND, PROCESSED_IND
  FROM
   CNSB33_REQUEST_DOWNLOAD
  WHERE PROCESSED_IND IS NULL OR PROCESSED_IND = 'N';


-- CONSEP.CNS_T_CNSL33A_TEMP_ALL source

CREATE OR REPLACE VIEW CONSEP.CNS_T_CNSL33A_TEMP_ALL
(REQUEST_SKEY,REQUEST_TYPE_ST,SOWING_YR,REQUEST_YR,ORG_UNIT_NO,REQUEST_SEQUENCE,SPR_RQST_STATUS_ST,RQST_CLI_NUMBER,RQST_CLI_LOCN_CD,MTHD_OF_PAYMENT_CD,REQUIRED_BY_DT,PRIORITY_DT,AUTHORIZATION_CD,VEGETATION_ST,SEEDLING_STKTYP_CD,SEEDLING_CONTNR_CD,SEEDLING_STKAGE_CD,PLANTING_YR,PLANTING_DAY,PLANTING_SEASON_ST,QTY_SEEDLINGS_RQST,SPAR_FUND_SRCE_ST,CLIENT_REFERENCE,REQUEST_COMMENT,CROWN_LAND_IND,PROCESSED_IND)
AS
SELECT
   REQUEST_SKEY, REQUEST_TYPE_CODE, SOWING_YEAR,
   REQUEST_YEAR, ORG_UNIT_NO, REQUEST_SEQUENCE,
   SPR_REQUEST_STATUS_CODE, RQST_CLI_NUMBER, RQST_CLI_LOCN_CD,
   METHOD_OF_PAYMENT_CODE, REQUIRED_BY_DATE, PRIORITY_DATE,
   AUTHORIZATION_CODE, VEGETATION_CODE, SEEDLING_STOCK_TYPE_CODE,
   SEEDLING_CONTAINER_CODE, SEEDLING_STOCK_AGE_CODE, PLANTING_YEAR,
   PLANTING_DAY, PLANTING_SEASON_CODE, QTY_SEEDLINGS_RQST,SPAR_FUND_SRCE_CODE,
   CLIENT_REFERENCE, REQUEST_COMMENT, CROWN_LAND_IND, PROCESSED_IND
  FROM
   CNSB33_REQUEST_DOWNLOAD;


-- CONSEP.CNS_T_CNSL33B_TEMP source

CREATE OR REPLACE VIEW CONSEP.CNS_T_CNSL33B_TEMP
(REQUEST_SKEY,ITEM_ID,STD_WRKPLN_SKEY,VEGETATION_ST,SAMPLE_ID,FAMILY_LOT_NUMBER,RQST_SDLNGS_RSRVD,RQST_SDLNGS_SRPLS,NO_OF_CONTAINERS,CONE_VOLUME,SEED_QUANTITY,SHIPTO_CLI_NUMBER,SHIPTO_CLI_LOCN_CD,REQUIRED_BY_DT,LATEST_ACTIONED_DT,RCMNDED_SOWING_DT,SPCFIED_SOWING_DT,NRSRY_OBLIGATN_IND,NRSRY_CLI_NUMBER,NRSRY_CLI_LOCN_CD,EXTRCT_CLI_NUMBER,EXTRCT_CLI_LOCN_CD,INTERIM_STORGE_LOC,NO_OF_CONES,CONE_IND,SAMPLE_ELEVATION,SRV_BLNG_CREATE_TS,SAMPLE_LOC_DESC)
AS
SELECT
   REQUEST_SKEY, ITEM_ID, STANDARD_WORKPLAN_SKEY,
   VEGETATION_CODE, SAMPLE_ID, FAMILY_LOT_NUMBER,
   RQST_SDLNGS_RSRVD, RQST_SDLNGS_SRPLS, NO_OF_CONTAINERS,
   CONE_VOLUME, SEED_QUANTITY, SHIPTO_CLI_NUMBER,
   SHIPTO_CLI_LOCN_CD, REQUIRED_BY_DATE, LATEST_ACTIONED_DATE,
   RCMNDED_SOWING_DATE, SPCFIED_SOWING_DATE, DECODE(NRSRY_OBLIGATN_IND,'Y',-1,'N',0,NRSRY_OBLIGATN_IND),
   NRSRY_CLI_NUMBER, NRSRY_CLI_LOCN_CD, EXTRCT_CLI_NUMBER,
   EXTRCT_CLI_LOCN_CD, INTERIM_STORGE_LOC, NO_OF_CONES,
   DECODE(CONE_IND,'Y',-1,'N',0,CONE_IND), SAMPLE_ELEVATION, SRV_BLNG_CREATE_TS,
   SAMPLE_LOC_DESC
 FROM CNSB33_REQUEST_ITEM_DOWNLOAD;


-- CONSEP.CNS_T_CNSL33C_TEMP source

CREATE OR REPLACE VIEW CONSEP.CNS_T_CNSL33C_TEMP
(REQUEST_SKEY,ITEM_ID,SEEDLOT_NUMBER,CLIENT_NUMBER,CLIENT_LOCN_CODE,RQST_FROM_RESERVE,RQST_FROM_SURPLUS,RQST_TEST_RESERVE,RQST_TEST_SURPLUS,RQST_TO_RESERVE,RQST_TO_SURPLUS,SEEDLOT_TEST_CODE,GERMINATION_PCT,PV)
AS
SELECT
   t1.REQUEST_SKEY, t1.ITEM_ID, t1.SEEDLOT_NUMBER,
   CLIENT_NUMBER, CLIENT_LOCN_CODE, RQST_FROM_RESERVE,
   RQST_FROM_SURPLUS, RQST_TEST_RESERVE, RQST_TEST_SURPLUS,
   RQST_TO_RESERVE, RQST_TO_SURPLUS, SEEDLOT_TEST_CODE,
   t1.GERMINATION_PCT,t2.PV
 FROM
   CNSB33_RQST_SEEDLOT_DOWNLOAD t1
   ,rankagerm t2
 WHERE t1.seedlot_number = t2.seedlot_number (+)
 AND   t1.request_skey = t2.request_skey (+)
 AND   t1.item_id      = t2.item_id (+);


-- CONSEP.CNS_T_CODE_LIST_TABLE source

CREATE OR REPLACE VIEW CONSEP.CNS_T_CODE_LIST_TABLE
(COLUMN_NAME,CODE_ARGUMENT,EXPANDED_RESULT,EFFECTIVE_DATE,EXPIRY_DATE)
AS
SELECT "COLUMN_NAME","CODE_ARGUMENT","EXPANDED_RESULT","EFFECTIVE_DATE","EXPIRY_DATE" from THE.CODE_LIST_TABLE;


-- CONSEP.CNS_T_CODE_SUBSET_TBL source

CREATE OR REPLACE VIEW CONSEP.CNS_T_CODE_SUBSET_TBL
(CODE_SUBSET_NAME,COLUMN_NAME,CODE_ARGUMENT,IN_EFFECT_DATE,EXPIRED_DATE)
AS
SELECT "CODE_SUBSET_NAME","COLUMN_NAME","CODE_ARGUMENT","IN_EFFECT_DATE","EXPIRED_DATE" from THE.CODE_SUBSET_TBL;


-- CONSEP.CNS_T_EXPECTED_RECEIPT_CONTENT source

CREATE OR REPLACE VIEW CONSEP.CNS_T_EXPECTED_RECEIPT_CONTENT
(CLIENT_NUMBER,CLIENT_LOCN_CODE,ARRIVAL_DATE,ARRIVAL_TIME_CODE,CONE_IND,SEQUENCE_NO,NO_OF_CONTAINERS,VOLUME_OF_CONE,QTY_OF_SEED,REVISION_COUNT,REQUEST_SKEY,ITEM_ID,SEEDLOT_NUMBER,VEGETATION_CODE,SAMPLE_ID,FAMILY_LOT_NUMBER)
AS
SELECT "CLIENT_NUMBER","CLIENT_LOCN_CODE","ARRIVAL_DATE","ARRIVAL_TIME_CODE","CONE_IND","SEQUENCE_NO","NO_OF_CONTAINERS","VOLUME_OF_CONE","QTY_OF_SEED","REVISION_COUNT","REQUEST_SKEY","ITEM_ID","SEEDLOT_NUMBER","VEGETATION_CODE","SAMPLE_ID","FAMILY_LOT_NUMBER" from THE.EXPECTED_RECEIPT_CONTENT;


-- CONSEP.CNS_T_GENETIC_WORTH source

CREATE OR REPLACE VIEW CONSEP.CNS_T_GENETIC_WORTH
(LOT_NUMBER,GENETIC_WORTH_CODE,GENETIC_WORTH_RTNG,REVISION_COUNT)
AS
SELECT SEEDLOT_NUMBER                  LOT_NUMBER
       , GENETIC_WORTH_CODE
       , GENETIC_WORTH_RTNG
       , REVISION_COUNT
  FROM THE.SEEDLOT_GENETIC_WORTH;


-- CONSEP.CNS_T_INVOICE_ITEM source

CREATE OR REPLACE VIEW CONSEP.CNS_T_INVOICE_ITEM
(INVOICE_NUMBER,SRVC_BILLING_SKEY)
AS
SELECT INVOICE_NUMBER
      , SERVICE_BILLING_SKEY          SRVC_BILLING_SKEY
 FROM THE.INVOICE_ITEM;


-- CONSEP.CNS_T_LATEST_SOWING_DATE source

CREATE OR REPLACE VIEW CONSEP.CNS_T_LATEST_SOWING_DATE
(LATEST_SOWING_DATE_SKEY,CLIENT_NUMBER,CLIENT_LOCN_CODE,COAST_INTERIOR_CODE,VEGETATION_CODE,PLANTING_SEASON_CODE,SEEDLING_STOCK_TYPE_CODE,SEEDLING_CONTAINER_CODE,SEEDLING_STOCK_AGE_CODE,FACILITY_CODE,LATEST_SOWING_DAY,DEFAULT_FCLTY_IND,REVISION_COUNT)
AS
SELECT "LATEST_SOWING_DATE_SKEY","CLIENT_NUMBER","CLIENT_LOCN_CODE","COAST_INTERIOR_CODE","VEGETATION_CODE","PLANTING_SEASON_CODE","SEEDLING_STOCK_TYPE_CODE","SEEDLING_CONTAINER_CODE","SEEDLING_STOCK_AGE_CODE","FACILITY_CODE","LATEST_SOWING_DAY","DEFAULT_FCLTY_IND","REVISION_COUNT"
  FROM THE.LATEST_SOWING_DATE;


-- CONSEP.CNS_T_NURSERY_LOCATION source

CREATE OR REPLACE VIEW CONSEP.CNS_T_NURSERY_LOCATION
(CLIENT_NUMBER,CLIENT_LOCN_CODE,NURSERY_ACRONYM,COAST_INTERIOR_CODE,REVISION_COUNT)
AS
select "CLIENT_NUMBER","CLIENT_LOCN_CODE","NURSERY_ACRONYM","COAST_INTERIOR_CODE","REVISION_COUNT"
 FROM THE.NURSERY_LOCATION;


-- CONSEP.CNS_T_ORCHARD source

CREATE OR REPLACE VIEW CONSEP.CNS_T_ORCHARD
(ORCHARD_ID,ORCHARD_LOT_TYPE_ST,GENERATION_NUMBER,CLIENT_NUMBER,CLIENT_LOCN_CODE,REVISION_COUNT,ORCHARD_NAME,ORCHARD_STAGE_CODE,LICENSED_IND,LICENSED_DATE,LICENSE_RENEWAL_DATE,VEGETATION_ST,ORCHARD_STAGE_ST,BEC_ZONE,BEC_SUBZONE,VARIANT)
AS
SELECT ORCHARD_ID
       , ORCHARD_LOT_TYPE_CODE                    ORCHARD_LOT_TYPE_ST
       , GENERATION_NUMBER
       , CLIENT_NUMBER
       , CLIENT_LOCN_CODE
       , REVISION_COUNT
       , ORCHARD_NAME
       , ORCHARD_STAGE_CODE
       , DECODE(LICENSED_IND,'Y',-1,'N',0,NULL)   LICENSED_IND
       , LICENSED_DATE
       , LICENSE_RENEWAL_DATE
       , VEGETATION_CODE                          VEGETATION_ST
       , ORCHARD_STAGE_CODE                       ORCHARD_STAGE_ST
       , BEC_ZONE
       , BEC_SUBZONE
       , VARIANT
  FROM THE.ORCHARD;


-- CONSEP.CNS_T_ORG_CLIENT_XREF source

CREATE OR REPLACE VIEW CONSEP.CNS_T_ORG_CLIENT_XREF
(ORG_UNIT_NO,CLIENT_NUMBER,CLIENT_LOCN_CODE,REVISION_COUNT)
AS
SELECT "ORG_UNIT_NO","CLIENT_NUMBER","CLIENT_LOCN_CODE","REVISION_COUNT"
  FROM THE.ORG_CLIENT_XREF;


-- CONSEP.CNS_T_ORG_UNIT source

CREATE OR REPLACE VIEW CONSEP.CNS_T_ORG_UNIT
(ORG_UNIT_NO,ORG_UNIT_CODE,ORG_UNIT_NAME,LOCATION_CODE,AREA_CODE,TELEPHONE_NO,ORG_LEVEL_CODE,OFFICE_NAME_CODE,ROLLUP_REGION_NO,ROLLUP_REGION_CODE,ROLLUP_DIST_NO,ROLLUP_DIST_CODE,EFFECTIVE_DATE,EXPIRY_DATE,UPDATE_TIMESTAMP)
AS
SELECT "ORG_UNIT_NO","ORG_UNIT_CODE","ORG_UNIT_NAME","LOCATION_CODE","AREA_CODE","TELEPHONE_NO","ORG_LEVEL_CODE","OFFICE_NAME_CODE","ROLLUP_REGION_NO","ROLLUP_REGION_CODE","ROLLUP_DIST_NO","ROLLUP_DIST_CODE","EFFECTIVE_DATE","EXPIRY_DATE","UPDATE_TIMESTAMP" from THE.ORG_UNIT;


-- CONSEP.CNS_T_RQST_TST_SRVC source

CREATE OR REPLACE VIEW CONSEP.CNS_T_RQST_TST_SRVC
(REQUEST_SKEY,ITEM_ID,SEEDLOT_TEST_CODE,RETEST_DUE_DATE,RETEST_CANCEL_IND,QTY_RESERVED,QTY_SURPLUS,SEEDLOT_NUMBER,VEGETATION_ST,REQUEST_ID)
AS
SELECT T1.REQUEST_SKEY,
        T1.ITEM_ID,
        T1.SEEDLOT_TEST_CODE,
        RETEST_DUE_DATE,
        DECODE(RETEST_CANCEL_IND,'Y',-1,'N',0,NULL) RETEST_CANCEL_IND,
        QTY_RESERVED,
        QTY_SURPLUS,
        T3.SEEDLOT_NUMBER,
        T3.VEGETATION_CODE VEGETATION_ST,
        T2.REQUEST_TYPE_code || T2.REQUEST_Year||
        LPAD(TO_CHAR(T2.REQUEST_SEQUENCE),'4',0)
 FROM THE.REQUEST_TEST_SERVICE T1,
      THE.SPAR_REQUEST T2,
      THE.SEEDLOT T3,
      THE.REQUEST_SEEDLOT t4
 WHERE T1.REQUEST_SKEY = T2.REQUEST_SKEY
 AND   T4.REQUEST_SKEY = T2.REQUEST_SKEY
 AND   T4.SEEDLOT_NUMBER = T3.SEEDLOT_NUMBER
 AND   T2.SPR_REQUEST_STATUS_CODE = 'PND'
 AND   T2.REQUEST_TYPE_CODE = 'RTS';


-- CONSEP.CNS_T_SEEDLOT_HERITAGE source

CREATE OR REPLACE VIEW CONSEP.CNS_T_SEEDLOT_HERITAGE
(PARENT_SEEDLOT_NO,CHILD_SEEDLOT_NO,REVISION_COUNT,REFERENCE_ID_DESC)
AS
SELECT "PARENT_SEEDLOT_NO","CHILD_SEEDLOT_NO","REVISION_COUNT","REFERENCE_ID_DESC" FROM THE.SEEDLOT_HERITAGE;


-- CONSEP.CNS_T_SEEDLOT_OWN_QTY source

CREATE OR REPLACE VIEW CONSEP.CNS_T_SEEDLOT_OWN_QTY
(SEEDLOT_NUMBER,CLIENT_NUMBER,CLIENT_LOCN_CODE,ORIGINAL_PCT_OWNED,ORIGINAL_PCT_RSRVD,ORIGINAL_PCT_SRPLS,QTY_RESERVED,QTY_RSRVD_CMTD_PLN,QTY_RSRVD_CMTD_APR,QTY_SURPLUS,QTY_SRPLS_CMTD_PLN,QTY_SRPLS_CMTD_APR,SPAR_FUND_SRCE_ST)
AS
SELECT SEEDLOT_NUMBER
       , CLIENT_NUMBER
       , CLIENT_LOCN_CODE
       , ORIGINAL_PCT_OWNED
       , ORIGINAL_PCT_RSRVD
       , ORIGINAL_PCT_SRPLS
       , QTY_RESERVED
       , QTY_RSRVD_CMTD_PLN
       , QTY_RSRVD_CMTD_APR
       , QTY_SURPLUS
       , QTY_SRPLS_CMTD_PLN
       , QTY_SRPLS_CMTD_APR
       , SPAR_FUND_SRCE_CODE             SPAR_FUND_SRCE_ST
  FROM THE.SEEDLOT_OWNER_QUANTITY;


-- CONSEP.CNS_T_SEEDLOT_PLAN_ZN source

CREATE OR REPLACE VIEW CONSEP.CNS_T_SEEDLOT_PLAN_ZN
(SEEDLOT_NUMBER,SEED_PLAN_ZONE_CD,REVISION_COUNT)
AS
SELECT SEEDLOT_NUMBER
      , SEED_PLAN_ZONE_CODE              SEED_PLAN_ZONE_CD
      , REVISION_COUNT
 FROM THE.SEEDLOT_PLAN_ZONE;


-- CONSEP.CNS_T_SEEDLOT_TRNSCTN source

CREATE OR REPLACE VIEW CONSEP.CNS_T_SEEDLOT_TRNSCTN
(SEEDLOT_NUMBER,CLIENT_NUMBER,CLIENT_LOCN_CODE,ENTRY_TIMESTAMP,ENTRY_TIMESTAMP_MS,ENTRY_USERID,SEEDLOT_TRANSACTION_CODE,CHANGE_IN_RESERVE,CHANGE_IN_SURPLUS,USEDBY_CLIENT_NUMBER,USEDBY_CLIENT_LOCN_CODE,REQUEST_SKEY,ITEM_ID,REFERENCE_DESC,TRNSCTN_COMMENT)
AS
SELECT "SEEDLOT_NUMBER","CLIENT_NUMBER","CLIENT_LOCN_CODE","ENTRY_TIMESTAMP","ENTRY_TIMESTAMP_MS","ENTRY_USERID","SEEDLOT_TRANSACTION_CODE","CHANGE_IN_RESERVE","CHANGE_IN_SURPLUS","USEDBY_CLIENT_NUMBER","USEDBY_CLIENT_LOCN_CODE","REQUEST_SKEY","ITEM_ID","REFERENCE_DESC","TRNSCTN_COMMENT" from THE.SEEDLOT_TRANSACTION;


-- CONSEP.CNS_T_SEEDS_BLOCK source

CREATE OR REPLACE VIEW CONSEP.CNS_T_SEEDS_BLOCK
(SEEDLING_CONTNR_CD,SEEDS_PER_CAVITY,SEEDS_PER_BLOCK,REVISION_COUNT)
AS
SELECT SEEDLING_CONTAINER_CODE         SEEDLING_CONTNR_CD
      , SEEDS_PER_CAVITY
      , SEEDS_PER_BLOCK
      , REVISION_COUNT
 FROM THE.SEEDS_BLOCK;


-- CONSEP.CNS_T_SEED_PLAN_UNIT source

CREATE OR REPLACE VIEW CONSEP.CNS_T_SEED_PLAN_UNIT
(SEED_PLAN_UNIT_ID,PRIMARY_IND,SEED_PLAN_ZONE_ID,ELEVATION_BAND,ELEVATION_MAX,ELEVATION_MIN,CREATE_DATE,LATITUDE_BAND,LATITUDE_DEGREES_MIN,LATITUDE_MINUTES_MIN,LATITUDE_DEGREES_MAX,LATITUDE_MINUTES_MAX,PROGRAM_RANK,TOTAL_SEEDLING_REQUIREMENTS,UPDATE_DATE,REVISION_COUNT)
AS
select "SEED_PLAN_UNIT_ID","PRIMARY_IND","SEED_PLAN_ZONE_ID","ELEVATION_BAND","ELEVATION_MAX","ELEVATION_MIN","CREATE_DATE","LATITUDE_BAND","LATITUDE_DEGREES_MIN","LATITUDE_MINUTES_MIN","LATITUDE_DEGREES_MAX","LATITUDE_MINUTES_MAX","PROGRAM_RANK","TOTAL_SEEDLING_REQUIREMENTS","UPDATE_DATE","REVISION_COUNT"
 FROM THE.SEED_PLAN_UNIT;


-- CONSEP.CNS_T_SEED_PLAN_ZONE source

CREATE OR REPLACE VIEW CONSEP.CNS_T_SEED_PLAN_ZONE
(SEED_PLAN_ZONE_ID,GENETIC_CLASS_CODE,SEED_PLAN_ZONE_CODE,VEGETATION_CODE)
AS
select "SEED_PLAN_ZONE_ID","GENETIC_CLASS_CODE","SEED_PLAN_ZONE_CODE","VEGETATION_CODE"
 FROM THE.SEED_PLAN_ZONE;


-- CONSEP.CNS_T_SEED_PRICE source

CREATE OR REPLACE VIEW CONSEP.CNS_T_SEED_PRICE
(SEED_PRICE_SKEY,VEGETATION_ST,GENETIC_CLASS_CODE,GENETIC_WORTH_CODE,GENETIC_WORTH_RTNG,MIN_GRMNTN_PCT,MAX_GRMNTN_PCT,PRICE_PER_KG,REVISION_COUNT)
AS
SELECT SEED_PRICE_SKEY
      , VEGETATION_CODE               VEGETATION_ST
      , GENETIC_CLASS_CODE
      , GENETIC_WORTH_CODE
      , GENETIC_WORTH_RTNG
      , MIN_GRMNTN_PCT
      , MAX_GRMNTN_PCT
      , PRICE_PER_KG
      , REVISION_COUNT
 FROM THE.SEED_PRICE;


-- CONSEP.CNS_T_SEED_TEST_FREQUENCY source

CREATE OR REPLACE VIEW CONSEP.CNS_T_SEED_TEST_FREQUENCY
(MAX_SEED_TEST_FREQ_SKEY,SEEDLOT_TEST_CODE,VEGETATION_CODE,GENETIC_CLASS_CODE,MIN_GERMINATION_PCT,MAX_GERMINATION_PCT,FREQUENCY,SERVICE_TIME_UNIT_CODE,REVISION_COUNT)
AS
SELECT "MAX_SEED_TEST_FREQ_SKEY","SEEDLOT_TEST_CODE","VEGETATION_CODE", "GENETIC_CLASS_CODE", "MIN_GERMINATION_PCT","MAX_GERMINATION_PCT","FREQUENCY","SERVICE_TIME_UNIT_CODE","REVISION_COUNT" from THE.SEED_TEST_FREQUENCY;


-- CONSEP.CNS_T_SERVICE_BILLING source

CREATE OR REPLACE VIEW CONSEP.CNS_T_SERVICE_BILLING
(SRVC_BILLING_SKEY,CLIENT_NUMBER,CLIENT_LOCN_CODE,BILLING_ITEM_ID,COMPLETE_DATE,REQUEST_SKEY,ITEM_ID,REVENUE_CLASS_CD,DEBIT_CREDIT_CODE,BILLING_AMOUNT,ADJUST_DB_CR_CD,ADJUSTMENT_AMOUNT,SRVC_BLNG_STS_CD,NO_OF_UNITS,UNIT_PRICE,FIXED_PRICE_AMOUNT,DISCOUNT_AMOUNT,BLNG_ADJUSTMNT_CMT,BILLING_ITEM_DESC)
AS
SELECT SERVICE_BILLING_SKEY         SRVC_BILLING_SKEY
      , CLIENT_NUMBER
      , CLIENT_LOCN_CODE
      , BILLING_ITEM_ID
      , COMPLETE_DATE
      , REQUEST_SKEY
      , ITEM_ID
      , REVENUE_CLASS_CODE           REVENUE_CLASS_CD
      , DEBIT_CREDIT_CODE
      , BILLING_AMOUNT
      , ADJUST_DB_CR_CODE            ADJUST_DB_CR_CD
      , ADJUSTMENT_AMOUNT
      , SERVICE_BILLING_STATUS_CODE  SRVC_BLNG_STS_CD
      , NO_OF_UNITS
      , UNIT_PRICE
      , FIXED_PRICE_AMOUNT
      , DISCOUNT_AMOUNT
      , BILLING_ADJUSTMENT_CMT       BLNG_ADJUSTMNT_CMT
      , BILLING_ITEM_DESC
 FROM THE.SERVICE_BILLING;


-- CONSEP.CNS_T_SHIPMENT_ITEM_VIEW source

CREATE OR REPLACE VIEW CONSEP.CNS_T_SHIPMENT_ITEM_VIEW
(SHIPMENT_ITEM_SKEY,TSC_WAYBILL_NO,BOX_NUMBER,RIA_SKEY,REQUEST_ID,ITEM_ID,SEEDLOT_NUMBER,BOX_TYPE_CD,BULK_ID,NO_CONTAINERS,CONTAINER_TYPE_CD,TSC_PRODUCT_TYP_CD,SHPMNT_ITM_COMMENT,SPECIES,GRAMS,STRAT_START_DT,STRAT_END_DT,SOW_DT,TOTAL_CONTAINERS,UPDATE_TIMESTAMP)
AS
SELECT "SHIPMENT_ITEM_SKEY","TSC_WAYBILL_NO","BOX_NUMBER","RIA_SKEY","REQUEST_ID","ITEM_ID","SEEDLOT_NUMBER","BOX_TYPE_CD","BULK_ID","NO_CONTAINERS","CONTAINER_TYPE_CD","TSC_PRODUCT_TYP_CD","SHPMNT_ITM_COMMENT","SPECIES","GRAMS","STRAT_START_DT","STRAT_END_DT","SOW_DT","TOTAL_CONTAINERS","UPDATE_TIMESTAMP" FROM CNS_T_SHIPMENT_ITEM;


-- CONSEP.CNS_T_SHIPNG_INSTRCTN source

CREATE OR REPLACE VIEW CONSEP.CNS_T_SHIPNG_INSTRCTN
(REQUEST_SKEY,LINE_ID,SHIPNG_INSTRCTN)
AS
SELECT B.REQUEST_SKEY
      , B.LINE_ID
      , B.SHIPPING_INSTRUCTION  SHIPNG_INSTRCTN
 FROM THE.SPAR_REQUEST A
    , THE.SHIPPING_INSTRUCTION B
 WHERE A.SPR_REQUEST_STATUS_CODE IN ('APP','ACT','CAN','COM')
   AND A.APPROVED_TIMESTAMP IS NOT NULL
   AND B.REQUEST_SKEY = A.REQUEST_SKEY;


-- CONSEP.CNS_T_SPECIES_AVG_GRM source

CREATE OR REPLACE VIEW CONSEP.CNS_T_SPECIES_AVG_GRM
(VEGETATION_ST,GENETIC_CLASS_CODE,GERMINATION_PCT,SEEDS_PER_GRAM,KG_YIELD_HL,GERMINATION_VALUE,PEAK_VALUE_GERM_PCT,PEAK_VALUE_NO_DAYS,BILLING_GRMNTN_PCT)
AS
SELECT VEGETATION_CODE          VEGETATION_ST
      , GENETIC_CLASS_CODE
      , GERMINATION_PCT
      , SEEDS_PER_GRAM
      , KG_YIELD_HL
      , GERMINATION_VALUE
      , PEAK_VALUE_GRM_PCT       PEAK_VALUE_GERM_PCT
      , PEAK_VALUE_NO_DAYS
      , BILLING_GERMINATION_PCT  BILLING_GRMNTN_PCT
 FROM THE.SPECIES_AVERAGE_GERMINATION;


-- CONSEP.CNS_T_SPU_ORCHARD_LINK source

CREATE OR REPLACE VIEW CONSEP.CNS_T_SPU_ORCHARD_LINK
(ORCHARD_ID,SEED_PLAN_UNIT_ID,REVISION_COUNT)
AS
SELECT "ORCHARD_ID","SEED_PLAN_UNIT_ID","REVISION_COUNT"
  FROM THE.SPU_ORCHARD_LINK;


-- CONSEP.CNS_T_SWNG_RULE_FCTR source

CREATE OR REPLACE VIEW CONSEP.CNS_T_SWNG_RULE_FCTR
(SOWING_RULE_FACTOR_SKEY,CLIENT_NUMBER,CLIENT_LOCN_CODE,GENETIC_CLASS_CODE,VEGETATION_CODE,MIN_GRMNTN_PCT,MAX_GRMNTN_PCT,SEEDS_PER_CAVITY,SWNG_CRCTN_FACTOR,REVISION_COUNT)
AS
SELECT "SOWING_RULE_FACTOR_SKEY","CLIENT_NUMBER","CLIENT_LOCN_CODE","GENETIC_CLASS_CODE","VEGETATION_CODE","MIN_GRMNTN_PCT","MAX_GRMNTN_PCT","SEEDS_PER_CAVITY","SWNG_CRCTN_FACTOR","REVISION_COUNT" from THE.SOWING_RULE_FACTOR;


-- CONSEP.CNS_T_TSC_CLIENT_INFO source

CREATE OR REPLACE VIEW CONSEP.CNS_T_TSC_CLIENT_INFO
(CLIENT_NUMBER,CLIENT_LOCN_CODE,ALIAS,BILL_ADDRESS_1,BILL_ADDRESS_2,BILL_ADDRESS_3,BILL_TO_CITY,BILL_PROVINCE,BILL_COUNTRY,BILL_POSTAL_CODE,SHIP_ADDRESS_1,SHIP_ADDRESS_2,SHIP_ADDRESS_3,SHIP_TO_CITY,SHIP_PROVINCE,SHIP_COUNTRY,SHIP_POSTAL_CODE,PRI_CARRIER_NAME,PRI_CARRIER_ACCT,SEC_CARRIER_NAME,SEC_CARRIER_ACCT,PREPAID_IND,UPDATE_TIMESTAMP,TSC_CLIENT_COMMENT)
AS
SELECT CLIENT_NUMBER
      , CLIENT_LOCN_CODE
      , TSC_CLIENT_ALIAS                   ALIAS
      , BILL_ADDRESS_1
      , BILL_ADDRESS_2
      , BILL_ADDRESS_3
      , BILL_TO_CITY
      , BILL_PROVINCE
      , BILL_COUNTRY
      , BILL_POSTAL_CODE
      , SHIP_ADDRESS_1
      , SHIP_ADDRESS_2
      , SHIP_ADDRESS_3
      , SHIP_TO_CITY
      , SHIP_PROVINCE
      , SHIP_COUNTRY
      , SHIP_POSTAL_CODE
      , PRI_CARRIER_NAME
      , PRI_CARRIER_ACCT
      , SEC_CARRIER_NAME
      , SEC_CARRIER_ACCT
      , DECODE(PRI_PREPAID_IND,'Y',-1,0)   PREPAID_IND
	  , UPDATE_TIMESTAMP
      , TSC_CLIENT_COMMENT
 FROM THE.TSC_CLIENT_INFORMATION;


-- CONSEP.CNS_T_TSC_CLI_CNT_TYPE_XREF source

CREATE OR REPLACE VIEW CONSEP.CNS_T_TSC_CLI_CNT_TYPE_XREF
(TSC_CLIENT_CONTACT_SKEY,TSC_CLI_TYPE_CD,PRI_CLIENT_TYPE_IND)
AS
SELECT "TSC_CLIENT_CONTACT_SKEY","TSC_CLIENT_TYPE_CODE","PRI_CLIENT_TYPE_IND" from THE.TSC_CLIENT_CONTACT_TYPE_XREF;


-- CONSEP.CNS_T_TSC_CLI_CONTACT source

CREATE OR REPLACE VIEW CONSEP.CNS_T_TSC_CLI_CONTACT
(TSC_CLIENT_CONTACT_SKEY,CLIENT_NUMBER,CLIENT_LOCN_CODE,CONTACT_NAME,TSC_CLI_TYPE_CD,CLIENT_STATUS_ST,CONTACT_CLI_NUMBER,CONTACT_CLI_LOC_CD,PRI_CONTACT_IND,CONTACT_USERID,PHONE_1,PHONE_2,FAX_NUMBER,MAIL_ADDR_TYPE_CD,EMAIL_ADDRESS,CONTACT_TITLE,CONTACT_COMMENT,UPDATE_TIMESTAMP,PHONE_1_EXT,PHONE_2_EXT)
AS
SELECT CC.TSC_CLIENT_CONTACT_SKEY
      , CLIENT_NUMBER
      , CLIENT_LOCN_CODE
      , CONTACT_NAME
	  , TSC_CLIENT_TYPE_CODE TSC_CLI_TYPE_CD
      , TSC_CLIENT_STATUS_CODE     CLIENT_STATUS_ST
	  , CONTACT_CLI_NUMBER
      , CONTACT_CLI_LOC_CD
      , DECODE(PRI_CONTACT_IND,'Y',-1,0)   PRI_CONTACT_IND
      , CONTACT_USERID
      , PHONE_1
      , PHONE_2
      , FAX_NUMBER
      , MAIL_ADDR_TYPE_CODE     MAIL_ADDR_TYPE_CD
      , EMAIL_ADDRESS
      , CONTACT_TITLE
      , CONTACT_COMMENT
      , UPDATE_TIMESTAMP
      , PHONE_1_EXT
	  , PHONE_2_EXT
 FROM THE.TSC_CLIENT_CONTACT CC,
      THE.TSC_CLIENT_CONTACT_TYPE_XREF
	  WHERE CC.TSC_CLIENT_CONTACT_SKEY = THE.TSC_CLIENT_CONTACT_TYPE_XREF.TSC_CLIENT_CONTACT_SKEY;


-- CONSEP.CNS_T_TSC_INVOICE source

CREATE OR REPLACE VIEW CONSEP.CNS_T_TSC_INVOICE
(INVOICE_NUMBER,CLIENT_NUMBER,CLIENT_LOCN_CODE,INVOICE_AMOUNT,PST_AMOUNT,GST_AMOUNT,HST_AMOUNT,GST_EXEMPT_IND,HST_EXEMPT_IND,INVOICE_DATE,PRINTED_DATE,FIN_SRVC_UPDT_DT,CANCELLED_BY_INVC,INVOICE_RLN_TYP_CD,REPLACED_BY_INVC,RELATED_INVOICE,INVOICE_COMMENT)
AS
SELECT INVOICE_NUMBER
      , CLIENT_NUMBER
      , CLIENT_LOCN_CODE
      , INVOICE_AMOUNT
      , PST_AMOUNT
      , GST_AMOUNT
      , HST_AMOUNT
      , GST_EXEMPT_IND
      , HST_EXEMPT_IND
      , INVOICE_DATE
      , PRINTED_DATE
      , FIN_SRVC_UPDT_DATE              FIN_SRVC_UPDT_DT
      , CANCELLED_BY_INVC
      , INVOICE_RELATION_TYPE_CODE      INVOICE_RLN_TYP_CD
      , REPLACED_BY_INVC
      , RELATED_INVOICE
      , INVOICE_COMMENT
 FROM THE.TSC_INVOICE;


-- CONSEP.CONE_AND_SEED_OWNERS source

CREATE OR REPLACE VIEW CONSEP.CONE_AND_SEED_OWNERS
(SEEDLOT_NUMBER,OWNER_NUMBER,OWNER_LOCN_CODE,ACTUAL_ARRVL_DT_TM,ORIGINAL_PCT_OWNED,CONE_IND,RECEIPT_COMPLT_IND,SHIP_NUMBER,SHIP_LOCN_CODE,EXTRACTORY_NUMBER,EXTRACTORY_LOCN_CODE,SEQUENCE_NO,APP_COMPLETE,ADDEN_REQUIRED,SHIP_CLIENT_NAME,FS721_RECEIVED_IND,NO_CONTAINERS,HL_VOLUME,PRODUCT_TYPE)
AS
SELECT B.SEEDLOT_NUMBER,
 D.CLIENT_NUMBER,
 D.CLIENT_LOCN_CODE,
 A.ACTUAL_ARRVL_DT_TM,
 D.ORIGINAL_PCT_OWNED,
 A.CONE_IND,
 B.RECEIPT_COMPLT_IND,
 A.CLIENT_NUMBER,
 A.CLIENT_LOCN_CODE,
 C.EXTRCT_CLI_NUMBER,
 C.EXTRCT_CLI_LOCN_CD,
 B.SEQUENCE_NO,
 APP_COMPLETE,
ADDEN_REQUIRED,
CLIENT_NAME,
FS721_RECEIVED_IND,
B.NO_CONTAINERS,
(B.VOL_PER_CONTAINER * B.NO_CONTAINERS) HL_VOLUME,
TSC_PRODUCT_TYP_CD
FROM CNS_T_SHIPMENT_RCPT A,
 CNS_T_SHIP_RCPT_ITEM B,
 CNS_T_SEEDLOT C,
 CNS_T_SEEDLOT_OWN_QTY D,
 CNS_T_CLIENT_PUBLIC E
WHERE  A.CLIENT_NUMBER = B.CLIENT_NUMBER AND
 A.CLIENT_LOCN_CODE = B.CLIENT_LOCN_CODE AND
 A.ACTUAL_ARRVL_DT_TM = B.ACTUAL_ARRVL_DT_TM AND
 B.SEEDLOT_NUMBER = C.SEEDLOT_NUMBER AND
 C.SEEDLOT_NUMBER = D.SEEDLOT_NUMBER  AND
 C.LETTER_PRINTED_DT IS NULL AND
 B.LETTER_PRINTED_DT IS NULL AND
 A.CLIENT_NUMBER = E.CLIENT_NUMBER;


-- CONSEP.CONSEP__SUMMARY_COUNT source

CREATE OR REPLACE VIEW CONSEP.CONSEP__SUMMARY_COUNT
(DDATE,DAY_OF_WEEK,STAT_NAME,SRQ_COUNT,SRQ_SOW_YEAR,CSP_COUNT,CSP_REQ_YEAR,SOW_YEAR,FISCAL_YEAR,FYQUARTER)
AS
SELECT DDATE, Day_of_Week,Stat_name, SRQ_COUNT, SRQ_SOW_YEAR, CSP_COUNT, CSP_REQ_YEAR,SOW_YEAR, FISCAL_YEAR, FYQUARTER
	FROM
	(select c.CHANGE_DT CD, count(*) SRQ_COUNT, R.SOWING_YR SRQ_SOW_YEAR
		FROM    CNS_T_RQST_ITM_CHG_LG c,
			CNS_T_SPAR_REQUEST r
		WHERE   c.change_desc = 'New Request'
	--AND     to_char(c.change_dt,'YYYY-MM-DD') > to_char(SYSDATE - 30,'YYYY-MM-DD')
	AND     c.request_skey  = r.request_skey
	AND     r.request_type_st = 'SRQ'
	group by c.change_dt, r.SOWING_YR) SRQ_C,
	(select c.CHANGE_DT CD, count(*) CSP_COUNT, R.REQUEST_YR CSP_REQ_YEAR
		FROM    CNS_T_RQST_ITM_CHG_LG c,
			CNS_T_SPAR_REQUEST r
		WHERE   c.change_desc = 'New Request'
	--AND     to_char(c.change_dt,'YYYY-MM-DD') > to_char(SYSDATE - 30,'YYYY-MM-DD')
	AND     c.request_skey  = r.request_skey
	AND     r.request_type_st = 'CSP'
	group by c.change_dt, r.REQUEST_YR) CSP_C,

	DAYS_OF_YEAR_Summary DS
	where SRQ_C.CD(+) = DS.DDATe
	AND CSP_C.CD(+) = DS.DDATE
	order by 1;


-- CONSEP.CSP_CONES_SEEDLOT_COMPLETE source

CREATE OR REPLACE VIEW CONSEP.CSP_CONES_SEEDLOT_COMPLETE
(REQUEST_SKEY,ITEM_ID,SL_COMPLETE)
AS
SELECT RA.REQUEST_SKEY,
ERI.ITEM_ID,
ERI.RECEIPT_COMPLT_IND
FROM CNS_T_SHIP_RCPT_ITEM ERI,CNS_T_RQST_ITM_ACTVTY RA
WHERE ERI.RECEIPT_COMPLT_IND = -1
AND ERI.RIA_SKEY = RA.RIA_SKEY
group by REQUEST_SKEY,ERI.ITEM_ID,ERI.RECEIPT_COMPLT_IND;


-- CONSEP.CSP_DAILY_SUMMARY source

CREATE OR REPLACE VIEW CONSEP.CSP_DAILY_SUMMARY
(DDATE,DAY_OF_WEEK,SHIPMENT_SEEDLOT_COUNT,SHIPMENT_SACK_COUNT,SHIPMENT_MEGABAG_COUNT,VOLUME_RECEIVED,EXTRACT_VOLUME,FIRST_CLEANING_VOLUME,DEWING_VOLUME,SECOND_CLEANING_VOLUME,SEED_SEPARATION_VOLUME,BLEND_COUNT,FIRST_DAY_OF_WEEK,EXTRACT_SACKS)
AS
SELECT ddate, day_of_week,
            NVL (sacks.shipment_seedlot_count, 0)
          + NVL (mega.shipment_seedlot_count, 0) shipment_seedlot_count,
          shipment_sack_count, shipment_megabag_count,
            NVL (sack_volume_received, 0)
          + NVL (megabag_volume_received, 0) volume_received,
            NVL (extract_volume, 0)
          + NVL (abies_extraction_volume, 0) extract_volume,
          first_cleaning_volume, dewing_volume, second_cleaning_volume,
          seed_separation_volume, blend_count, first_day_of_week, extract_sacks
     FROM days_of_year_2000_forward days,
          csp_ship_receipt_sacks_date sacks,
          csp_ship_receipt_megabag_date mega,
          csp_out_extract_volume_date,
          csp_out_abies_ext_volume_date,
          csp_out_fc_ext_volume_date,
          csp_out_dewing_volume_date,
          csp_out_sc_ext_volume_date,
          csp_out_ssep_ext_volume_date,
          csp_out_blend_count_date,
          csp_input_extract_volume_date

    WHERE days.ddate = sacks.shipment_receipt_date(+)
      AND days.ddate = mega.shipment_receipt_date(+)
      AND days.ddate = extract_date(+)
      AND days.ddate = abies_extraction_volume_date(+)
      AND days.ddate = first_cleaning_date(+)
      AND days.ddate = dewing_volume_date(+)
      AND days.ddate = second_cleaning_volume_date(+)
      AND days.ddate = seed_separation_volume_date(+)
      AND days.ddate = blend_count_date(+)
      and days.ddate = extract_input_date(+);


-- CONSEP.CSP_FL_SACK_COUNT_KLN_LOAD source

CREATE OR REPLACE VIEW CONSEP.CSP_FL_SACK_COUNT_KLN_LOAD
(REQUEST_SKEY,ITEM_ID,SACK_COUNT)
AS
SELECT RA.REQUEST_SKEY,
RA.ITEM_ID,
SUM(PI.NO_CONTAINERS)
FROM CNS_T_PROCESS_INPUT PI, CNS_T_RQST_ITM_ACTVTY RA
WHERE RA.RIA_SKEY = PI.RIA_SKEY
AND RA.ACTIVITY_TYPE_CD = 'KLD'
AND RA.STNDRD_ACTIVITY_ID = 'KLL'
GROUP BY RA.REQUEST_SKEY, RA.ITEM_ID;


-- CONSEP.CSP_INPUT_EXTRACT_VOLUME_DATE source

CREATE OR REPLACE VIEW CONSEP.CSP_INPUT_EXTRACT_VOLUME_DATE
(EXTRACT_INPUT_DATE,EXTRACT_SACKS)
AS
SELECT   TRUNC (ria1.actual_begin_dt_tm),
            SUM (NVL (proc_in.no_containers, 0)) extract_sacks
       FROM cns_t_process_input proc_in, cns_t_rqst_itm_actvty ria1
      WHERE ria1.ria_skey = proc_in.ria_skey(+)
            AND (ria1.activity_type_cd IN ('KLD','AEX' ))
   GROUP BY TRUNC (ria1.actual_begin_dt_tm);


-- CONSEP.CSP_OUTPUT_VOLUMES source

CREATE OR REPLACE VIEW CONSEP.CSP_OUTPUT_VOLUMES
(REQUEST_SKEY,ITEM_ID,EXTRACT_VOLUME,FIRST_CLEANING_VOLUME,DEWING_VOLUME,SECOND_CLEANING_VOLUME,SEED_SEPARATION_VOLUME,ABIES_EXTRACTION_VOLUME,RETREAT_VOLUME)
AS
SELECT sr.request_skey, ri.item_id, extract_volume, first_cleaning_volume,
          dewing_volume, second_cleaning_volume, seed_separation_volume,
          abies_extraction_volume, retreat_volume
     FROM cns_t_spar_request sr,
          cns_t_request_item ri,
          csp_out_extract_volume t1,
          csp_out_first_clean_ext_volume t3,
          csp_out_dewing_volume t5,
          csp_out_secon_clean_ext_volume t7,
          csp_out_seed_sep_ext_volume t9,
          csp_out_abies_ext_volume t11,
          csp_out_retreat_volume t13
    WHERE sr.request_skey = ri.request_skey
      AND sr.request_type_st IN ('CSP', 'USP')
      AND ri.request_skey = t1.request_skey(+)
      AND ri.item_id = t1.item_id(+)
      AND ri.request_skey = t3.request_skey(+)
      AND ri.item_id = t3.item_id(+)
      AND ri.request_skey = t5.request_skey(+)
      AND ri.item_id = t5.item_id(+)
      AND ri.request_skey = t7.request_skey(+)
      AND ri.item_id = t7.item_id(+)
      AND ri.request_skey = t9.request_skey(+)
      AND ri.item_id = t9.item_id(+)
      AND ri.request_skey = t11.request_skey(+)
      AND ri.item_id = t11.item_id(+)
      AND ri.request_skey = t13.request_skey(+)
      AND ri.item_id = t13.item_id(+);


-- CONSEP.CSP_OUT_ABIES_EXT_VOLUME source

CREATE OR REPLACE VIEW CONSEP.CSP_OUT_ABIES_EXT_VOLUME
(REQUEST_SKEY,ITEM_ID,ABIES_EXTRACTION_VOLUME)
AS
SELECT   ria.request_skey, ria.item_id,
            DECODE
                 (cns_fn_is_abies (ria.vegetation_st),
                  -1, SUM (NVL (proc_out.qty_litres, 0))
                 ) abies_extraction_volume
       FROM cns_t_rqst_itm_actvty ria, cns_t_process_output proc_out
      WHERE ria.ria_skey = proc_out.ria_skey(+)
            AND ria.activity_type_cd = 'SCR'

   GROUP BY ria.request_skey, ria.item_id,
            cns_fn_is_abies (ria.vegetation_st);


-- CONSEP.CSP_OUT_ABIES_EXT_VOLUME_DATE source

CREATE OR REPLACE VIEW CONSEP.CSP_OUT_ABIES_EXT_VOLUME_DATE
(ABIES_EXTRACTION_VOLUME_DATE,ABIES_EXTRACTION_VOLUME)
AS
SELECT   TRUNC (ria.actual_begin_dt_tm),
            DECODE
                 (cns_fn_is_abies (ria.vegetation_st),
                  -1, SUM (NVL (proc_out.qty_litres, 0))
                 ) abies_extraction_volume
       FROM cns_t_rqst_itm_actvty ria, cns_t_process_output proc_out
      WHERE ria.ria_skey = proc_out.ria_skey(+)
            AND ria.activity_type_cd = 'SCR'
            and cns_fn_is_abies (ria.vegetation_st) = -1
   GROUP BY TRUNC (ria.actual_begin_dt_tm),
            cns_fn_is_abies (ria.vegetation_st);


-- CONSEP.CSP_OUT_BLEND_COUNT_DATE source

CREATE OR REPLACE VIEW CONSEP.CSP_OUT_BLEND_COUNT_DATE
(BLEND_COUNT_DATE,BLEND_COUNT)
AS
SELECT   TRUNC (ria.actual_begin_dt_tm),
            count(RIA.RIA_SKEY)  blend_count
       FROM cns_t_rqst_itm_actvty ria
      WHERE RIA.ACTUAL_END_DT_TM is not null  AND stndrd_activity_id = 'BLN'
      AND substr(RIA.REQUEST_ID,1,3) = 'CSP'
   GROUP BY TRUNC (ria.actual_begin_dt_tm);


-- CONSEP.CSP_OUT_DEWING_VOLUME source

CREATE OR REPLACE VIEW CONSEP.CSP_OUT_DEWING_VOLUME
(REQUEST_SKEY,ITEM_ID,DEWING_VOLUME)
AS
SELECT   ria.request_skey, ria.item_id,
            SUM (nvl(proc_out.qty_litres,0)) dewing_volume
       FROM cns_t_rqst_itm_actvty ria, cns_t_process_output proc_out
      WHERE ria.ria_skey = proc_out.ria_skey(+) AND stndrd_activity_id = 'DWG'
   GROUP BY ria.request_skey, ria.item_id;


-- CONSEP.CSP_OUT_DEWING_VOLUME_DATE source

CREATE OR REPLACE VIEW CONSEP.CSP_OUT_DEWING_VOLUME_DATE
(DEWING_VOLUME_DATE,DEWING_VOLUME)
AS
SELECT   trunc(RIA.ACTUAL_BEGIN_DT_TM),
            SUM (nvl(proc_out.qty_litres,0)) dewing_volume
       FROM cns_t_rqst_itm_actvty ria, cns_t_process_output proc_out
      WHERE ria.ria_skey = proc_out.ria_skey(+) AND stndrd_activity_id = 'DWG'
   GROUP BY trunc(RIA.ACTUAL_BEGIN_DT_TM);


-- CONSEP.CSP_OUT_EXTRACT_VOLUME source

CREATE OR REPLACE VIEW CONSEP.CSP_OUT_EXTRACT_VOLUME
(REQUEST_SKEY,ITEM_ID,EXTRACT_VOLUME)
AS
SELECT   ria.request_skey, ria.item_id,
            SUM (NVL (proc_out.qty_litres, 0)) extract_volume
       FROM cns_t_rqst_itm_actvty ria, cns_t_process_output proc_out
      WHERE ria.ria_skey = proc_out.ria_skey(+)
            AND (stndrd_activity_id IN ('TUM', 'KLL'))
   GROUP BY ria.request_skey, ria.item_id;


-- CONSEP.CSP_OUT_EXTRACT_VOLUME_DATE source

CREATE OR REPLACE VIEW CONSEP.CSP_OUT_EXTRACT_VOLUME_DATE
(EXTRACT_DATE,EXTRACT_VOLUME)
AS
SELECT   trunc(ria.actual_begin_dt_tm),
            SUM (NVL (proc_out.qty_litres, 0)) extract_volume
       FROM cns_t_rqst_itm_actvty ria, cns_t_process_output proc_out
      WHERE ria.ria_skey = proc_out.ria_skey(+)
            AND (activity_type_cd IN ('TUM', 'KLD'))
   GROUP BY trunc(ria.actual_begin_dt_tm);


-- CONSEP.CSP_OUT_FC_EXT_VOLUME_DATE source

CREATE OR REPLACE VIEW CONSEP.CSP_OUT_FC_EXT_VOLUME_DATE
(FIRST_CLEANING_DATE,FIRST_CLEANING_VOLUME)
AS
SELECT   TRUNC (ria.actual_begin_dt_tm),
            SUM (nvl(proc_out.qty_litres,0)) first_cleaning_volume
       FROM cns_t_rqst_itm_actvty ria, cns_t_process_output proc_out
      WHERE ria.ria_skey = proc_out.ria_skey(+) AND stndrd_activity_id = 'SC1'
   GROUP BY TRUNC (ria.actual_begin_dt_tm);


-- CONSEP.CSP_OUT_FIRST_CLEAN_EXT_VOLUME source

CREATE OR REPLACE VIEW CONSEP.CSP_OUT_FIRST_CLEAN_EXT_VOLUME
(REQUEST_SKEY,ITEM_ID,FIRST_CLEANING_VOLUME)
AS
SELECT   ria.request_skey, ria.item_id,
            SUM (nvl(proc_out.qty_litres,0)) first_cleaning_volume
       FROM cns_t_rqst_itm_actvty ria, cns_t_process_output proc_out
      WHERE ria.ria_skey = proc_out.ria_skey(+) AND stndrd_activity_id = 'SC1'
   GROUP BY ria.request_skey, ria.item_id;


-- CONSEP.CSP_OUT_RETREAT_VOLUME source

CREATE OR REPLACE VIEW CONSEP.CSP_OUT_RETREAT_VOLUME
(REQUEST_SKEY,ITEM_ID,RETREAT_VOLUME)
AS
SELECT   ria.request_skey, ria.item_id,
            SUM (NVL (proc_out.qty_litres, 0)) extract_volume
       FROM cns_t_rqst_itm_actvty ria, cns_t_process_output proc_out
      WHERE ria.ria_skey = proc_out.ria_skey(+)
            AND (stndrd_activity_id IN ('RTE', 'RKL'))
   GROUP BY ria.request_skey, ria.item_id;


-- CONSEP.CSP_OUT_SC_EXT_VOLUME_DATE source

CREATE OR REPLACE VIEW CONSEP.CSP_OUT_SC_EXT_VOLUME_DATE
(SECOND_CLEANING_VOLUME_DATE,SECOND_CLEANING_VOLUME)
AS
SELECT   trunc(RIA.ACTUAL_BEGIN_DT_TM),
            SUM (nvl(proc_out.qty_litres,0)) second_cleaning_volume
       FROM cns_t_rqst_itm_actvty ria, cns_t_process_output proc_out
      WHERE ria.ria_skey = proc_out.ria_skey(+) AND stndrd_activity_id = 'SC2'
   GROUP BY trunc(RIA.ACTUAL_BEGIN_DT_TM);


-- CONSEP.CSP_OUT_SECON_CLEAN_EXT_VOLUME source

CREATE OR REPLACE VIEW CONSEP.CSP_OUT_SECON_CLEAN_EXT_VOLUME
(REQUEST_SKEY,ITEM_ID,SECOND_CLEANING_VOLUME)
AS
SELECT   ria.request_skey, ria.item_id,
            SUM (nvl(proc_out.qty_litres,0)) second_cleaning_volume
       FROM cns_t_rqst_itm_actvty ria, cns_t_process_output proc_out
      WHERE ria.ria_skey = proc_out.ria_skey(+) AND stndrd_activity_id = 'SC2'
   GROUP BY ria.request_skey, ria.item_id;


-- CONSEP.CSP_OUT_SEED_SEP_EXT_VOLUME source

CREATE OR REPLACE VIEW CONSEP.CSP_OUT_SEED_SEP_EXT_VOLUME
(REQUEST_SKEY,ITEM_ID,SEED_SEPARATION_VOLUME)
AS
SELECT   ria.request_skey, ria.item_id,
            SUM (nvl(proc_out.qty_litres,0)) seed_separation_volume
       FROM cns_t_rqst_itm_actvty ria, cns_t_process_output proc_out
      WHERE ria.ria_skey = proc_out.ria_skey(+) AND stndrd_activity_id = 'SSP'
   GROUP BY ria.request_skey, ria.item_id;


-- CONSEP.CSP_OUT_SSEP_EXT_VOLUME_DATE source

CREATE OR REPLACE VIEW CONSEP.CSP_OUT_SSEP_EXT_VOLUME_DATE
(SEED_SEPARATION_VOLUME_DATE,SEED_SEPARATION_VOLUME)
AS
SELECT   trunc(RIA.ACTUAL_BEGIN_DT_TM),
            SUM (nvl(proc_out.qty_litres,0)) seed_separation_volume
       FROM cns_t_rqst_itm_actvty ria, cns_t_process_output proc_out
      WHERE ria.ria_skey = proc_out.ria_skey(+) AND stndrd_activity_id = 'SSP'
   GROUP BY trunc(RIA.ACTUAL_BEGIN_DT_TM);


-- CONSEP.CSP_SHIPMENT_RECEIPT_DATE source

CREATE OR REPLACE VIEW CONSEP.CSP_SHIPMENT_RECEIPT_DATE
(LATEST_SHIPMENT_RECEIPT_DATE,SHIPMENT_SEEDLOT_COUNT)
AS
SELECT   trunc(actual_arrvl_dt_tm), count(sr.seedlot_number)

       FROM  cns_t_ship_rcpt_item sr
      --WHERE
   GROUP BY trunc(actual_arrvl_dt_tm);


-- CONSEP.CSP_SHIP_RECEIPT_MEGABAG_DATE source

CREATE OR REPLACE VIEW CONSEP.CSP_SHIP_RECEIPT_MEGABAG_DATE
(SHIPMENT_RECEIPT_DATE,SHIPMENT_SEEDLOT_COUNT,SHIPMENT_MEGABAG_COUNT,MEGABAG_VOLUME_RECEIVED)
AS
SELECT   TRUNC (actual_arrvl_dt_tm),
              COUNT (sr.seedlot_number)
            + COUNT (family_lot_number),
            SUM (NVL (no_containers, 0)),
            SUM (NVL (vol_per_container, 0) * (NVL (no_containers, 0)))
       FROM cns_t_ship_rcpt_item sr
      WHERE container_type_cd IN ('MEG')
   GROUP BY TRUNC (actual_arrvl_dt_tm);


-- CONSEP.CSP_SHIP_RECEIPT_SACKS_DATE source

CREATE OR REPLACE VIEW CONSEP.CSP_SHIP_RECEIPT_SACKS_DATE
(SHIPMENT_RECEIPT_DATE,SHIPMENT_SEEDLOT_COUNT,SHIPMENT_SACK_COUNT,SACK_VOLUME_RECEIVED)
AS
SELECT   TRUNC (actual_arrvl_dt_tm),
              COUNT(sr.seedlot_number) + COUNT(family_lot_number),
            SUM (NVL (no_containers, 0)),
            SUM (NVL (vol_per_container, 0) * (NVL (no_containers, 0)))
       FROM cns_t_ship_rcpt_item sr
      WHERE container_type_cd IN ('4BS', '4SO')
   GROUP BY TRUNC (actual_arrvl_dt_tm);


-- CONSEP.CSP_SL_SACK_COUNT_KLN_LOAD source

CREATE OR REPLACE VIEW CONSEP.CSP_SL_SACK_COUNT_KLN_LOAD
(REQUEST_SKEY,ITEM_ID,SACK_COUNT)
AS
SELECT RA.REQUEST_SKEY,
RA.ITEM_ID,
SUM(PI.NO_CONTAINERS)
FROM CNS_T_PROCESS_INPUT PI, CNS_T_RQST_ITM_ACTVTY RA
WHERE RA.RIA_SKEY = PI.RIA_SKEY
AND RA.ACTIVITY_TYPE_CD = 'KLD'
AND RA.STNDRD_ACTIVITY_ID = 'KLL'
GROUP BY RA.REQUEST_SKEY, RA.ITEM_ID;


-- CONSEP.CSP_SSP_BILLINGS source

CREATE OR REPLACE VIEW CONSEP.CSP_SSP_BILLINGS
(REQUEST_SKEY,ITEM_ID,REQ_ID,SEEDLOT_NUMBER,CLI_ACRONYM,CLI_NUMBER,CLI_LOCN_CODE,VEGETATION_ST,PROCESSING_FEE,BASE_FEE,PRIORITY_FEE,SPLIT_LOT_FEE,OWN_PCT,OWN_COUNT)
AS
SELECT sr.request_skey, rs.item_id,
             sr.request_type_st
          || sr.request_yr
          || LPAD (TO_CHAR (sr.request_sequence), 4, '0'),
          sl.seedlot_number, ca.client_acronym, soq.client_number,
          soq.client_locn_code, sl.vegetation_st,
          ROUND (DECODE (sr.request_type_st,
                         'CSP', DECODE (clctn_volume,
                                        0.01, 0,
                                          original_pct_owned
                                        / 100
                                        * sl.clctn_volume
                                        * bp1.unit_price
                                       ),
                         0
                        ),
                 2
                ),
          ROUND (decode(ra2.request_skey, null, DECODE (sr.request_type_st,
                         'CSP', bp1.base_price / own_count,
                         bp2.base_price / own_count
                        ),0),
                 2
                ),
          ROUND (DECODE (ra1.request_skey,
                         NULL, 0,
                         bp3.base_price / own_count
                        ) + DECODE (ra3.request_skey,
                         NULL, 0,
                         bp5.base_price / own_count) ,
                 2
                ),
          ROUND (DECODE (ra2.request_skey,
                         NULL, 0,
                         bp4.base_price / own_count
                        ),
                 2
                ),
          original_pct_owned, own_count
     FROM cns_t_spar_request sr,
          cns_t_request_seedlot rs,
          cns_t_seedlot sl,
          (SELECT request_skey, item_id, stndrd_activity_id, ria_skey
             FROM cns_t_rqst_itm_actvty
            WHERE stndrd_activity_id = 'PRI'
              AND actual_begin_dt_tm IS NOT NULL
              AND actual_end_dt_tm IS NOT NULL) ra1,
          (SELECT request_skey, item_id, stndrd_activity_id
             FROM cns_t_rqst_itm_actvty
            WHERE stndrd_activity_id = 'SPI'
              AND actual_begin_dt_tm IS NOT NULL
              AND actual_end_dt_tm IS NOT NULL) ra2,
 	  (SELECT request_skey, item_id, stndrd_activity_id, ria_skey
             FROM cns_t_rqst_itm_actvty
            WHERE stndrd_activity_id = 'PRH'
              AND actual_begin_dt_tm IS NOT NULL
              AND actual_end_dt_tm IS NOT NULL) ra3,
          cns_t_blng_itm_price bp1,
          cns_t_blng_itm_price bp2,
          cns_t_blng_itm_price bp3,
          cns_t_blng_itm_price bp4,
	  cns_t_blng_itm_price bp5,
          (SELECT   seedlot_number, COUNT (*) AS own_count
               FROM cns_t_seedlot_own_qty
              WHERE original_pct_owned > 0
           GROUP BY seedlot_number) slo,
          cns_t_client_acronym ca,
          cns_t_seedlot_own_qty soq
    WHERE sr.request_skey = rs.request_skey
      AND rs.seedlot_number = sl.seedlot_number
      AND sr.request_type_st IN ('CSP', 'SSP')
      AND rs.request_skey = ra1.request_skey(+)
      AND rs.item_id = ra1.item_id(+)
      AND rs.request_skey = ra3.request_skey(+)
      AND rs.item_id = ra3.item_id(+)
      AND rs.request_skey = ra2.request_skey(+)
      AND rs.item_id = ra2.item_id(+)
      AND bp1.billing_item_id = 'CSP'
      AND bp1.vegetation_code = sl.vegetation_st
      AND bp2.billing_item_id = 'SSP'
      AND bp3.billing_item_id = 'PRI'
      AND bp5.billing_item_id = 'PRH'
      AND bp4.billing_item_id = 'SPL'
      AND rs.seedlot_number = slo.seedlot_number
      AND ca.client_number = soq.client_number
      AND rs.seedlot_number = soq.seedlot_number
      AND soq.original_pct_owned > 0;


-- CONSEP.CURRENT_TEST_RESULTS source

CREATE OR REPLACE VIEW CONSEP.CURRENT_TEST_RESULTS
(SEEDLOT_NUMBER,ACTIVITY_TYPE_CD,GERMINATION_PCT,GV,PV,MOISTURE_PCT,PURITY_PCT,SEEDS_PER_GRAM,WEIGHT_PER_100,FUNGAL_STRING,CURRENT_A_RANK_DATE,FUNGAL_RESULTS,PEAK_VALUE_GRM_PCT,PEAK_VALUE_NO_DAYS,SPG_REP_COUNT,CURR_A_RANK_RIA_SKEY,CURR_SPG_DATE,SL_LAB_CRIT_COMMENT)
AS
SELECT s.seedlot_number, g.activity_type_cd, g.germination_pct, g.gv, g.pv,
          cns_fn_get_current_mc (s.seedlot_number),
          cns_fn_get_current_pur (s.seedlot_number),
          cns_fn_get_current_spg (s.seedlot_number),
          cns_fn_get_current_wtper100 (s.seedlot_number),
          cns_fn_fungal_string (s.seedlot_number), g.actual_end_dt_tm,
          cns_fn_fungal_str_results (s.seedlot_number), peak_value_grm_pct,
          peak_value_no_days, cns_fn_get_cur_spg_rep_count (s.seedlot_number),
          g.ria_skey, TRUNC (cns_fn_get_current_spg_date (s.seedlot_number)), cns_fn_lab_critical_comm (s.seedlot_number)
     FROM cns_t_seedlot s, rankagerm g
    WHERE g.seedlot_number(+) = s.seedlot_number;


-- CONSEP.DAYS_OF_YEAR source

CREATE OR REPLACE VIEW CONSEP.DAYS_OF_YEAR
(DDATE,DAY_OF_WEEK,DAY_OF_YEAR,MMONTH,YYEAR,SOW_YEAR,FISCAL_YEAR,FYQUARTER,PYQUARTER,PREV_FY_QUARTER)
AS
SELECT TRUNC (SYSDATE, 'Y') + ROWNUM - 1 ddate,
          TO_CHAR (TRUNC (SYSDATE, 'Y') + ROWNUM - 1, 'DAY') day_of_week, ROWNUM day_of_year,
          TO_CHAR (TRUNC (SYSDATE, 'Y') + ROWNUM - 1, 'MM') mmonth ,
          TO_CHAR (TRUNC (SYSDATE, 'Y') + ROWNUM - 1, 'YYYY') yyear,
          DECODE (TRUNC (  TO_NUMBER (TO_CHAR (TRUNC (SYSDATE, 'Y') + ROWNUM
                                               - 1,
                                               'MM'
                                              )
                                     )
                         / 7
                        ),
                  0, TO_CHAR (TRUNC (SYSDATE, 'Y') + ROWNUM - 1, 'YYYY'),
                  TO_CHAR (TRUNC (SYSDATE, 'Y') + ROWNUM - 1, 'YYYY') + 1
                 ) sow_year,
             'FY'
          || DECODE (TRUNC (  TO_NUMBER (TO_CHAR (  TRUNC (SYSDATE, 'Y')
                                                  + ROWNUM
                                                  - 1,
                                                  'MM'
                                                 )
                                        )
                            / 4
                           ),
                     0, TO_CHAR (TRUNC (SYSDATE, 'Y') + ROWNUM - 1, 'YYYY'),
                     TO_CHAR (TRUNC (SYSDATE + 365, 'Y') , 'YYYY')
                    ) fiscal_year,
             'FY'
          || DECODE (TRUNC (  TO_NUMBER (TO_CHAR (  TRUNC (SYSDATE, 'Y')
                                                  + ROWNUM
                                                  - 1,
                                                  'MM'
                                                 )
                                        )
                            / 4
                           ),
                     0, TO_CHAR (TRUNC (SYSDATE, 'Y') + ROWNUM - 1, 'YYYY'),
                     TO_CHAR (TRUNC (SYSDATE + 365, 'Y') ,'YYYY')
                    )
          || 'Q'
          || DECODE (TRUNC (  TO_NUMBER (  TO_CHAR (  TRUNC (SYSDATE, 'Y')
                                                    + ROWNUM
                                                    - 1,
                                                    'MM'
                                                   )
                                         + 2
                                        )
                            / 3
                           ),
                     1, 4,
                     2, 1,
                     3, 2,
                     4, 3
                    ),
             'PYQ'
          || DECODE (TRUNC (TO_NUMBER (TO_CHAR (  TRUNC (SYSDATE, 'Y')
                                                + ROWNUM
                                                - 1,
                                                'MM'
                                               )
                                      )
                           ),
                     1, 2,
                     2, 3,
                     3, 3,
                     4, 3,
                     5, 4,
                     6, 4,
                     7, 4,
                     8, 1,
                     9, 1,
                     10, 1,
                     11, 2,
                     12, 2
                    ),
          DECODE (TRUNC (  TO_NUMBER (  TO_CHAR (  TRUNC (SYSDATE, 'Y')
                                                 + ROWNUM
                                                 - 1,
                                                 'MM'
                                                )
                                      + 2
                                     )
                         / 3
                        ),
                  1,  'FY'
                   || TO_CHAR (TRUNC (SYSDATE, 'Y') + ROWNUM - 1, 'YYYY')
                   || 'Q3',
                  2,  'FY'
                   || TO_CHAR (TRUNC (SYSDATE, 'Y') + ROWNUM - 1, 'YYYY')
                   || 'Q4',
                  3,  'FY'
                   || TO_CHAR (TRUNC (SYSDATE + 365, 'Y') ,
                               'YYYY')
                   || 'Q1',
                  4,  'FY'
                   || TO_CHAR (TRUNC (SYSDATE + 365, 'Y') ,
                               'YYYY')
                   || 'Q2'
                 )
     FROM all_objects
    WHERE TO_CHAR (TRUNC (SYSDATE, 'Y') + ROWNUM - 1, 'YYYY') =
                                        TO_CHAR (TRUNC (SYSDATE, 'Y'), 'YYYY');


-- CONSEP.DAYS_OF_YEAR_2000_FORWARD source

CREATE OR REPLACE VIEW CONSEP.DAYS_OF_YEAR_2000_FORWARD
(DDATE,DAY_OF_WEEK,DAY_OF_YEAR,MMONTH,YYEAR,SOW_YEAR,FISCAL_YEAR,FYQUARTER,PYQUARTER,PREV_FY_QUARTER,FIRST_DAY_OF_WEEK)
AS
SELECT TRUNC (cns_fn_earliest_consep_date, 'Y') + ROWNUM - 1,
          TO_CHAR (TRUNC (cns_fn_earliest_consep_date, 'Y') + ROWNUM - 1,
                   'DAY'),
          ROWNUM,
          TO_CHAR (TRUNC (cns_fn_earliest_consep_date, 'Y') + ROWNUM - 1,
                   'MM'),
          TO_CHAR (TRUNC (cns_fn_earliest_consep_date, 'Y') + ROWNUM - 1,
                   'YYYY'
                  ),
          DECODE
             (TRUNC
                   (  TO_NUMBER
                               (TO_CHAR (  TRUNC (cns_fn_earliest_consep_date,
                                                  'Y'
                                                 )
                                         + ROWNUM
                                         - 1,
                                         'MM'
                                        )
                               )
                    / 7
                   ),
              0, TO_CHAR (TRUNC (cns_fn_earliest_consep_date, 'Y') + ROWNUM
                          - 1,
                          'YYYY'
                         ),
                TO_CHAR (TRUNC (cns_fn_earliest_consep_date, 'Y') + ROWNUM - 1,
                         'YYYY'
                        )
              + 1
             ),
             'FY'
          || DECODE
                (TRUNC
                    (  TO_NUMBER
                               (TO_CHAR (  TRUNC (cns_fn_earliest_consep_date,
                                                  'Y'
                                                 )
                                         + ROWNUM
                                         - 1,
                                         'MM'
                                        )
                               )
                     / 4
                    ),
                 0, TO_CHAR (  TRUNC (cns_fn_earliest_consep_date, 'Y')
                             + ROWNUM
                             - 1,
                             'YYYY'
                            ),
                 TO_CHAR (  TRUNC (cns_fn_earliest_consep_date + 366, 'Y')
                          + ROWNUM
                          - 1,
                          'YYYY'
                         )
                ),
             'FY'
          || DECODE
                (TRUNC
                    (  TO_NUMBER
                               (TO_CHAR (  TRUNC (cns_fn_earliest_consep_date,
                                                  'Y'
                                                 )
                                         + ROWNUM
                                         - 1,
                                         'MM'
                                        )
                               )
                     / 4
                    ),
                 0, TO_CHAR (  TRUNC (cns_fn_earliest_consep_date, 'Y')
                             + ROWNUM
                             - 1,
                             'YYYY'
                            ),
                 TO_CHAR (  TRUNC (cns_fn_earliest_consep_date + 366, 'Y')
                          + ROWNUM
                          - 1,
                          'YYYY'
                         )
                )
          || 'Q'
          || DECODE
                (TRUNC
                    (  TO_NUMBER
                              (  TO_CHAR
                                        (  TRUNC (cns_fn_earliest_consep_date,
                                                  'Y'
                                                 )
                                         + ROWNUM
                                         - 1,
                                         'MM'
                                        )
                               + 2
                              )
                     / 3
                    ),
                 1, 4,
                 2, 1,
                 3, 2,
                 4, 3
                ),
             'PYQ'
          || DECODE
                (TRUNC
                    (TO_NUMBER (TO_CHAR (  TRUNC (cns_fn_earliest_consep_date,
                                                  'Y'
                                                 )
                                         + ROWNUM
                                         - 1,
                                         'MM'
                                        )
                               )
                    ),
                 1, 2,
                 2, 3,
                 3, 3,
                 4, 3,
                 5, 4,
                 6, 4,
                 7, 4,
                 8, 1,
                 9, 1,
                 10, 1,
                 11, 2,
                 12, 2
                ),
          DECODE
             (TRUNC
                  (  TO_NUMBER
                              (  TO_CHAR
                                        (  TRUNC (cns_fn_earliest_consep_date,
                                                  'Y'
                                                 )
                                         + ROWNUM
                                         - 1,
                                         'MM'
                                        )
                               + 2
                              )
                   / 3
                  ),
              1,  'FY'
               || TO_CHAR (TRUNC (cns_fn_earliest_consep_date, 'Y') + ROWNUM
                           - 1,
                           'YYYY'
                          )
               || 'Q3',
              2,  'FY'
               || TO_CHAR (TRUNC (cns_fn_earliest_consep_date, 'Y') + ROWNUM
                           - 1,
                           'YYYY'
                          )
               || 'Q4',
              3,  'FY'
               || TO_CHAR (  TRUNC (cns_fn_earliest_consep_date + 366, 'Y')
                           + ROWNUM
                           - 1,
                           'YYYY'
                          )
               || 'Q1',
              4,  'FY'
               || TO_CHAR (  TRUNC (cns_fn_earliest_consep_date + 366, 'Y')
                           + ROWNUM
                           - 1,
                           'YYYY'
                          )
               || 'Q2'
             ),
          TRUNC (TRUNC (cns_fn_earliest_consep_date, 'Y') + ROWNUM - 1, 'DAY')
     FROM all_objects;


-- CONSEP.DAYS_OF_YEAR_LY source

CREATE OR REPLACE VIEW CONSEP.DAYS_OF_YEAR_LY
(DDATE,DAY_OF_WEEK,DAY_OF_YEAR,MMONTH,YYEAR,SOW_YEAR,FISCAL_YEAR,FYQUARTER,PYQUARTER)
AS
select  TRUNC(SYSDATE,'Y')+rownum-1,
To_CHAR(TRUNC(SYSDATE,'Y')+rownum-1,'DAY'),
rownum,
To_CHAR(TRUNC(SYSDATE,'Y')+rownum-1,'MM'),
To_CHAR(TRUNC(SYSDATE,'Y')+rownum-1,'YYYY'),
DECODE(TRUNC(TO_NUMBER(TO_CHAR(TRUNC(SYSDATE,'Y')+rownum-1,'MM'))/7),0,To_CHAR(TRUNC(SYSDATE,'Y')+rownum-1,'YYYY'),
To_CHAR(TRUNC(SYSDATE,'Y')+rownum-1,'YYYY')+1),
'FY' || DECODE(TRUNC(TO_NUMBER(TO_CHAR(TRUNC(SYSDATE,'Y')+rownum-1,'MM'))/4),0,To_CHAR(TRUNC(SYSDATE,'Y')+rownum-1,'YY'),
To_CHAR(TRUNC(SYSDATE+365,'Y')+rownum-1,'YY')),
'FY' || DECODE(TRUNC(TO_NUMBER(TO_CHAR(TRUNC(SYSDATE,'Y')+rownum-1,'MM'))/4),0,To_CHAR(TRUNC(SYSDATE,'Y')+rownum-1,'YY'),
To_CHAR(TRUNC(SYSDATE+365,'Y')+rownum-1,'YY'))
|| 'Q'
|| DECODE(TRUNC(TO_NUMBER(TO_CHAR(TRUNC(SYSDATE,'Y')+rownum-1,'MM')+2)/3),1,4,2,1,3,2,4,3),
'PYQ' || DECODE(TRUNC(TO_NUMBER(TO_CHAR(TRUNC(SYSDATE,'Y')+rownum-1,'MM'))),1,2,2,3,3,3,4,3,5,4,6,4,7,4,8,1,9,1,10,1,11,2,12,2)
 from all_objects
 --where To_CHAR(TRUNC(SYSDATE,'Y')+rownum-1,'YYYY') = To_CHAR(TRUNC(SYSDATE,'Y') - 1,'YYYY');


-- CONSEP.DAYS_OF_YEAR_ORIG source

CREATE OR REPLACE VIEW CONSEP.DAYS_OF_YEAR_ORIG
(DDATE,DAY_OF_WEEK,DAY_OF_YEAR,MMONTH,YYEAR,SOW_YEAR,FISCAL_YEAR,FYQUARTER,PYQUARTER,PREV_FY_QUARTER)
AS
SELECT TRUNC (SYSDATE, 'Y') + ROWNUM - 1 ddate,
          TO_CHAR (TRUNC (SYSDATE, 'Y') + ROWNUM - 1, 'DAY') day_of_week, ROWNUM day_of_year,
          TO_CHAR (TRUNC (SYSDATE, 'Y') + ROWNUM - 1, 'MM') mmonth ,
          TO_CHAR (TRUNC (SYSDATE, 'Y') + ROWNUM - 1, 'YYYY') yyear,
          DECODE (TRUNC (  TO_NUMBER (TO_CHAR (TRUNC (SYSDATE, 'Y') + ROWNUM
                                               - 1,
                                               'MM'
                                              )
                                     )
                         / 7
                        ),
                  0, TO_CHAR (TRUNC (SYSDATE, 'Y') + ROWNUM - 1, 'YYYY'),
                  TO_CHAR (TRUNC (SYSDATE, 'Y') + ROWNUM - 1, 'YYYY') + 1
                 ) sow_year,
             'FY'
          || DECODE (TRUNC (  TO_NUMBER (TO_CHAR (  TRUNC (SYSDATE, 'Y')
                                                  + ROWNUM
                                                  - 1,
                                                  'MM'
                                                 )
                                        )
                            / 4
                           ),
                     0, TO_CHAR (TRUNC (SYSDATE, 'Y') + ROWNUM - 1, 'YYYY'),
                     TO_CHAR (TRUNC (SYSDATE + 364, 'Y') + ROWNUM - 1, 'YYYY')
                    ) fiscal_year,
             'FY'
          || DECODE (TRUNC (  TO_NUMBER (TO_CHAR (  TRUNC (SYSDATE, 'Y')
                                                  + ROWNUM
                                                  - 1,
                                                  'MM'
                                                 )
                                        )
                            / 4
                           ),
                     0, TO_CHAR (TRUNC (SYSDATE, 'Y') + ROWNUM - 1, 'YYYY'),
                     TO_CHAR (TRUNC (SYSDATE + 364, 'Y') + ROWNUM - 1, 'YYYY')
                    )
          || 'Q'
          || DECODE (TRUNC (  TO_NUMBER (  TO_CHAR (  TRUNC (SYSDATE, 'Y')
                                                    + ROWNUM
                                                    - 1,
                                                    'MM'
                                                   )
                                         + 2
                                        )
                            / 3
                           ),
                     1, 4,
                     2, 1,
                     3, 2,
                     4, 3
                    ),
             'PYQ'
          || DECODE (TRUNC (TO_NUMBER (TO_CHAR (  TRUNC (SYSDATE, 'Y')
                                                + ROWNUM
                                                - 1,
                                                'MM'
                                               )
                                      )
                           ),
                     1, 2,
                     2, 3,
                     3, 3,
                     4, 3,
                     5, 4,
                     6, 4,
                     7, 4,
                     8, 1,
                     9, 1,
                     10, 1,
                     11, 2,
                     12, 2
                    ),
          DECODE (TRUNC (  TO_NUMBER (  TO_CHAR (  TRUNC (SYSDATE, 'Y')
                                                 + ROWNUM
                                                 - 1,
                                                 'MM'
                                                )
                                      + 2
                                     )
                         / 3
                        ),
                  1,  'FY'
                   || TO_CHAR (TRUNC (SYSDATE, 'Y') + ROWNUM - 1, 'YYYY')
                   || 'Q3',
                  2,  'FY'
                   || TO_CHAR (TRUNC (SYSDATE, 'Y') + ROWNUM - 1, 'YYYY')
                   || 'Q4',
                  3,  'FY'
                   || TO_CHAR (TRUNC (SYSDATE + 364, 'Y') + ROWNUM - 1,
                               'YYYY')
                   || 'Q1',
                  4,  'FY'
                   || TO_CHAR (TRUNC (SYSDATE + 364, 'Y') + ROWNUM - 1,
                               'YYYY')
                   || 'Q2'
                 )
     FROM all_objects
    WHERE TO_CHAR (TRUNC (SYSDATE, 'Y') + ROWNUM - 1, 'YYYY') =
                                        TO_CHAR (TRUNC (SYSDATE, 'Y'), 'YYYY');


-- CONSEP.DAYS_OF_YEAR_SUMMARY source

CREATE OR REPLACE VIEW CONSEP.DAYS_OF_YEAR_SUMMARY
(DDATE,DAY_OF_WEEK,DAY_OF_YEAR,MMONTH,YYEAR,STAT_NAME,SOW_YEAR,FISCAL_YEAR,FYQUARTER,PYQUARTER)
AS
Select
DDATE,
Day_of_week,
Day_of_year,
MMonth,
YYear,
B.S_NAME,
SOW_YEAR,
FISCAL_YEAR,
FYQUARTER,
PYQUARTER
 from DAYS_OF_YEAR A, CNS_T_STAT_HOLIDAYS B
 where A.DDATE=B.S_DAY(+);


-- CONSEP.DO_NOT_START_LENGTH source

CREATE OR REPLACE VIEW CONSEP.DO_NOT_START_LENGTH
(DNS_LENGTH,DNS_STRING)
AS
Select NVL(a.GT_LENGTH, nvl(b.INTO_GERM_LENGTH,C.INTO_COLD_STRAT_LENGTH)),
A.GTL_STRING || B.INTO_GERM_STRING ||  C.INTO_COLD_STRAT_STRING
FROM GERM_TEST_LENGTH_ALL A FULL OUTER JOIN INTO_GERMINATOR_LENGTH_ALL B
ON (a.GT_LENGTH=b.INTO_GERM_LENGTH)
FULL OUTER JOIN INTO_COLD_STRAT_DRYBACK C
ON (B.INTO_GERM_LENGTH = C.INTO_COLD_STRAT_LENGTH)
Order by 1;


-- CONSEP.DWD_COMMIT_GRAMS source

CREATE OR REPLACE VIEW CONSEP.DWD_COMMIT_GRAMS
(SEEDLOT_NUMBER,CLIENT_NUMBER,CLIENT_LOCN_CODE,DWD_COM_GRAMS)
AS
SELECT
RS.SEEDLOT_NUMBER,
RS.CLIENT_NUMBER,
RS.CLIENT_LOCN_CODE,
SUM(RQST_FROM_RESERVE+RQST_FROM_SURPLUS)
FROM    CNS_T_REQUEST_SEEDLOT RS, CNS_T_SPAR_REQUEST SR
WHERE SR.REQUEST_SKEY = RS.REQUEST_SKEY
AND SR.REQUEST_TYPE_ST = 'DWD'
AND SR.SPR_RQST_STATUS_ST IN ('APP', 'ACT')
GROUP BY RS.SEEDLOT_NUMBER, RS.CLIENT_NUMBER, RS.CLIENT_LOCN_CODE;


-- CONSEP.EARLIESTGERMDATENOGSAMULT source

CREATE OR REPLACE VIEW CONSEP.EARLIESTGERMDATENOGSAMULT
(SEEDLOT_NUMBER,ACTUAL_END_DT_TM)
AS
SELECT   ria.seedlot_number, MIN (ria.actual_end_dt_tm)
       FROM cns_t_rqst_itm_actvty ria,
            cns_t_tsc_test_result tst,
            cns_t_test_regime tr,
            rankagerm rag
      WHERE tst.ria_skey = ria.ria_skey
        --AND tst.ORIGINAL_TEST_IND  = -1
        --AND tst.test_rank IN ('A', 'P')
        AND tst.standard_test_ind = -1
        AND tst.accept_result_ind = -1
        AND ria.activity_type_cd NOT IN ('GSA', 'GSE')
        AND ria.activity_type_cd = tr.seedlot_test_code
        AND ria.seedlot_number = rag.seedlot_number
        AND ria.activity_type_cd = rag.activity_type_cd
   GROUP BY ria.seedlot_number;


-- CONSEP.EARLIESTRANKAGERMDATENOGSAMULT source

CREATE OR REPLACE VIEW CONSEP.EARLIESTRANKAGERMDATENOGSAMULT
(SEEDLOT_NUMBER,ACTUAL_END_DT_TM)
AS
SELECT   ria.seedlot_number, MIN (ria.actual_end_dt_tm)
       FROM cns_t_rqst_itm_actvty ria, cns_t_tsc_test_result tst
      WHERE tst.ria_skey = ria.ria_skey
        AND tst.original_test_ind = -1
        AND tst.test_rank IN ('A', 'P')
        AND tst.standard_test_ind = -1
        AND tst.accept_result_ind = -1
        AND ria.activity_type_cd NOT IN ('GSA', 'GSE')
   GROUP BY seedlot_number
   UNION
   SELECT   ria.seedlot_number, MIN (ria.actual_end_dt_tm)
       FROM cns_t_rqst_itm_actvty ria, cns_t_tsc_test_result tst
      WHERE tst.ria_skey = ria.ria_skey
--AND tst.ORIGINAL_TEST_IND  = -1
        AND tst.test_rank IN ('A', 'P')
        AND tst.standard_test_ind = -1
        AND tst.accept_result_ind = -1
        AND ria.activity_type_cd NOT IN ('GSA', 'GSE')
   GROUP BY seedlot_number;


-- CONSEP.EARLIEST_GERM_INFO source

CREATE OR REPLACE VIEW CONSEP.EARLIEST_GERM_INFO
(RIA_SKEY,SEEDLOT_NUMBER,REQUEST_SKEY,REQUEST_ID,ITEM_ID,REQUEST_ITEM,ACTIVITY_TYPE_CD,STNDRD_ACTIVITY_ID,TEST_RANK,GERMINATION_PCT,GV,PVPD,PV,PD,TEST_END_DATE)
AS
SELECT
--modified July 2003 by Mdellavi, suppress item_id for SRQ/CSP type requests
          ria.ria_skey, ria.seedlot_number, ria.request_skey, ria.request_id,
          SUBSTR (cns_fn_strip_item_id ('', ria.request_skey, ria.item_id),
                  1,
                  1
                 ) item_id,
             ria.request_id
          || SUBSTR (cns_fn_strip_item_id ('', ria.request_skey, ria.item_id),
                     1,
                     1
                    ),
          ria.activity_type_cd, ria.stndrd_activity_id, tst.test_rank,
          tst.germination_pct, tst.germination_value,
          tst.peak_value_grm_pct || '/' || tst.peak_value_no_days,
          tst.peak_value_grm_pct, tst.peak_value_no_days,
          TRUNC (ria.actual_end_dt_tm)
     FROM cns_t_rqst_itm_actvty ria,
          cns_t_tsc_test_result tst,
          earliest_germ_no_gsa erd
    WHERE tst.ria_skey = ria.ria_skey
      AND erd.seedlot_number = ria.seedlot_number
--AND erd.ACTUAL_END_DT_TM = ria.ACTUAL_END_DT_TM
      AND erd.ria_skey = ria.ria_skey
--AND tst.ORIGINAL_TEST_IND = -1
--AND tst.TEST_RANK         IN ('A','P')
--AND tst.STANDARD_TEST_IND = -1
--AND tst.ACCEPT_RESULT_IND = -1
-- May 25 2009 exclude GSA and GSE
--AND ria.ACTIVITY_TYPE_CD not in ('GSA','GSE');


-- CONSEP.EARLIEST_GERM_NO_GSA source

CREATE OR REPLACE VIEW CONSEP.EARLIEST_GERM_NO_GSA
(SEEDLOT_NUMBER,ACTUAL_END_DT_TM,RIA_SKEY)
AS
SELECT   ria.seedlot_number, ria.actual_end_dt_tm, MIN (ria.ria_skey)
       FROM cns_t_rqst_itm_actvty ria,
            cns_t_tsc_test_result tst,
            earliestgermdatenogsamult erd,
            cns_t_test_regime tr,
            rankagerm rag
      WHERE tst.ria_skey = ria.ria_skey
--AND tst.ORIGINAL_TEST_IND  = -1
        --AND tst.test_rank IN ('A', 'P')
        AND tst.standard_test_ind = -1
        AND tst.accept_result_ind = -1
        AND erd.seedlot_number = ria.seedlot_number
        AND erd.actual_end_dt_tm = ria.actual_end_dt_tm
        AND ria.activity_type_cd NOT IN ('GSA', 'GSE')
        AND ria.activity_type_cd = tr.seedlot_test_code
        AND ria.activity_type_cd = rag.activity_type_cd
        and erd.seedlot_number = RAG.SEEDLOT_NUMBER
   --AND ROWNUM < 2
   GROUP BY ria.seedlot_number, ria.actual_end_dt_tm
   ORDER BY ria.actual_end_dt_tm;


-- CONSEP.EARLIEST_RANKAGERM source

CREATE OR REPLACE VIEW CONSEP.EARLIEST_RANKAGERM
(SEEDLOT_NUMBER,ACTUAL_END_DT_TM,RIA_SKEY)
AS
SELECT
	ria.SEEDLOT_NUMBER,
	ria.ACTUAL_END_DT_TM,
	min(ria.RIA_SKEY)
FROM    CNS_T_RQST_ITM_ACTVTY ria,
        CNS_T_TSC_TEST_RESULT tst,
	EARLIEST_RANKAGERM_DATE erd
WHERE
    tst.RIA_SKEY          = ria.RIA_SKEY
AND tst.ORIGINAL_TEST_IND  = -1
AND tst.TEST_RANK         IN ('A','P')
AND tst.STANDARD_TEST_IND = -1
AND tst.ACCEPT_RESULT_IND = -1
AND erd.SEEDLOT_NUMBER = ria.SEEDLOT_NUMBER
AND erd.ACTUAL_END_DT_TM = ria.ACTUAL_END_DT_TM
GROUP BY RIA.SEEDLOT_NUMBER, RIA.ACTUAL_END_DT_TM;


-- CONSEP.EARLIEST_RANKAGERM_DATE source

CREATE OR REPLACE VIEW CONSEP.EARLIEST_RANKAGERM_DATE
(SEEDLOT_NUMBER,ACTUAL_END_DT_TM)
AS
SELECT
	ria.SEEDLOT_NUMBER,
	min(ria.ACTUAL_END_DT_TM)
FROM    CNS_T_RQST_ITM_ACTVTY ria,
        CNS_T_TSC_TEST_RESULT tst
WHERE
    tst.RIA_SKEY          = ria.RIA_SKEY
AND tst.ORIGINAL_TEST_IND  = -1
AND tst.TEST_RANK         IN ('A','P')
AND tst.STANDARD_TEST_IND = -1
AND tst.ACCEPT_RESULT_IND = -1
GROUP BY SEEDLOT_NUMBER;


-- CONSEP.EARLIEST_RANKAGERM_DATE_NO_GSA source

CREATE OR REPLACE VIEW CONSEP.EARLIEST_RANKAGERM_DATE_NO_GSA
(SEEDLOT_NUMBER,ACTUAL_END_DT_TM)
AS
SELECT
     seedlot_number, min(actual_end_dt_tm) from EARLIESTRANKAGERMDATENOGSAMULT
   GROUP BY seedlot_number;


-- CONSEP.EARLIEST_RANKAGERM_NO_GSA source

CREATE OR REPLACE VIEW CONSEP.EARLIEST_RANKAGERM_NO_GSA
(SEEDLOT_NUMBER,ACTUAL_END_DT_TM,RIA_SKEY)
AS
SELECT   ria.seedlot_number, ria.actual_end_dt_tm, MIN (ria.ria_skey)
       FROM cns_t_rqst_itm_actvty ria,
            cns_t_tsc_test_result tst,
            earliest_rankagerm_date_no_gsa erd
      WHERE tst.ria_skey = ria.ria_skey
--AND tst.ORIGINAL_TEST_IND  = -1
        AND tst.test_rank IN ('A', 'P')
        AND tst.standard_test_ind = -1
        AND tst.accept_result_ind = -1
        AND erd.seedlot_number = ria.seedlot_number
        AND erd.actual_end_dt_tm = ria.actual_end_dt_tm
        AND ria.activity_type_cd NOT IN ('GSA', 'GSE')
   --AND ROWNUM < 2
   GROUP BY ria.seedlot_number, ria.actual_end_dt_tm
   ORDER BY ria.actual_end_dt_tm;


-- CONSEP.FAMILYLOT_CURR_BALANCE source

CREATE OR REPLACE VIEW CONSEP.FAMILYLOT_CURR_BALANCE
(FAMILY_LOT_NUMBER,CURRENT_BALANCE)
AS
SELECT fam.family_lot_number, NVL (orig_balance, 0) + NVL (trans_total, 0)
     FROM cns_t_family_lot fam,
          familylot_orig_balance ob,
          familylot_trans_summary ft
    WHERE fam.family_lot_number = ob.family_lot_number(+)
          AND fam.family_lot_number = ft.family_lot_number(+);


-- CONSEP.FAMILYLOT_EXTRACTION source

CREATE OR REPLACE VIEW CONSEP.FAMILYLOT_EXTRACTION
(FAMILY_LOT_NUMBER,EXTRACTION_ST_DT)
AS
SELECT FAMILY_LOT_NUMBER,  MIN(ACTUAL_BEGIN_DT_TM)
 FROM    cns_t_rqst_itm_actvty a
 WHERE
      	a.ACTIVITY_TYPE_CD = 'TUM'
 AND	a.FAMILY_LOT_NUMBER is not null
 GROUP BY FAMILY_LOT_NUMBER;


-- CONSEP.FAMILYLOT_GERM source

CREATE OR REPLACE VIEW CONSEP.FAMILYLOT_GERM
(FAMILY_LOT_NUMBER,RIA_SKEY,REQUEST_SKEY,REQUEST_ID,ITEM_ID,REQUEST_ITEM,ACTIVITY_TYPE_CD,STNDRD_ACTIVITY_ID,ACTUAL_END_DT_TM,GERMINATION_PCT,TEST_RANK,GV,PVPD)
AS
SELECT
--modified July 2003 by Mdellavi, suppress item_id for SRQ/CSP type requests
ria.FAMILY_LOT_NUMBER,
ria.RIA_SKEY,
ria.REQUEST_SKEY,
ria.REQUEST_ID,
SUBSTR(Cns_Fn_Strip_Item_Id('',ria.request_skey,ria.ITEM_ID),1,1) ITEM_ID,
ria.REQUEST_ID || SUBSTR(Cns_Fn_Strip_Item_Id('',ria.request_skey,ria.ITEM_ID),1,1),
ria.ACTIVITY_TYPE_CD,
ria.STNDRD_ACTIVITY_ID,
ria.ACTUAL_END_DT_TM,
tst.GERMINATION_PCT,
tst.TEST_RANK,
tst.GERMINATION_VALUE,
tst.PEAK_VALUE_GRM_PCT || '/' || tst.PEAK_VALUE_NO_DAYS
FROM
CNS_T_RQST_ITM_ACTVTY ria,
CNS_T_TSC_TEST_RESULT tst,
CNS_T_TEST_REGIME regime
WHERE
tst.RIA_SKEY          = ria.RIA_SKEY
AND tst.CURRENT_TEST_IND  = -1
AND tst.STANDARD_TEST_IND = -1
AND tst.ACCEPT_RESULT_IND = -1
AND ria.FAMILY_LOT_NUMBER IS NOT NULL
AND ria.stndrd_ACTIVITY_ID = regime.SEEDLOT_TEST_CODE
Order By FAMILY_LOT_NUMBER ASC ,ACTUAL_END_DT_TM Desc;


-- CONSEP.FAMILYLOT_GERM_LATEST source

CREATE OR REPLACE VIEW CONSEP.FAMILYLOT_GERM_LATEST
(FAMILY_LOT_NUMBER,RIA_SKEY,REQUEST_SKEY,REQUEST_ID,ITEM_ID,REQUEST_ITEM,ACTIVITY_TYPE_CD,STNDRD_ACTIVITY_ID,ACTUAL_END_DT_TM,GERMINATION_PCT,TEST_RANK,GV,PVPD)
AS
SELECT
--modified July 2003 by Mdellavi, suppress item_id for SRQ/CSP type requests
flt.FAMILY_LOT_NUMBER,
flt.RIA_SKEY,
flt.REQUEST_SKEY,
flt.REQUEST_ID,
flt.ITEM_ID,
flt.REQUEST_ITEM,
flt.ACTIVITY_TYPE_CD,
flt.STNDRD_ACTIVITY_ID,
flt.ACTUAL_END_DT_TM,
flt.GERMINATION_PCT,
flt.TEST_RANK,
flt.GV,
flt.PVPD
FROM FAMILYLOT_GERM FLT
where
flt.actual_end_dt_tm = (select max(actual_end_dt_tm) from FAMILYLOT_GERM FLT2
where FLT2.FAMILY_LOT_NUMBER = FLT.FAMILY_LOT_NUMBER);


-- CONSEP.FAMILYLOT_GERM_LATEST_NON_STD source

CREATE OR REPLACE VIEW CONSEP.FAMILYLOT_GERM_LATEST_NON_STD
(FAMILY_LOT_NUMBER,RIA_SKEY,REQUEST_SKEY,REQUEST_ID,ITEM_ID,REQUEST_ITEM,ACTIVITY_TYPE_CD,STNDRD_ACTIVITY_ID,ACTUAL_END_DT_TM,GERMINATION_PCT,TEST_RANK,GV,PVPD)
AS
SELECT
--modified July 2003 by Mdellavi, suppress item_id for SRQ/CSP type requests
flt.FAMILY_LOT_NUMBER,
flt.RIA_SKEY,
flt.REQUEST_SKEY,
flt.REQUEST_ID,
flt.ITEM_ID,
flt.REQUEST_ITEM,
flt.ACTIVITY_TYPE_CD,
flt.STNDRD_ACTIVITY_ID,
flt.ACTUAL_END_DT_TM,
flt.GERMINATION_PCT,
flt.TEST_RANK,
flt.GV,
flt.PVPD
FROM FAMILYLOT_GERM_NON_STD FLT
where
flt.actual_end_dt_tm = (select max(actual_end_dt_tm) from FAMILYLOT_GERM_NON_STD FLT2
where FLT2.FAMILY_LOT_NUMBER = FLT.FAMILY_LOT_NUMBER);


-- CONSEP.FAMILYLOT_GERM_NON_STD source

CREATE OR REPLACE VIEW CONSEP.FAMILYLOT_GERM_NON_STD
(FAMILY_LOT_NUMBER,RIA_SKEY,REQUEST_SKEY,REQUEST_ID,ITEM_ID,REQUEST_ITEM,ACTIVITY_TYPE_CD,STNDRD_ACTIVITY_ID,ACTUAL_END_DT_TM,GERMINATION_PCT,TEST_RANK,GV,PVPD)
AS
SELECT
--modified July 2003 by Mdellavi, suppress item_id for SRQ/CSP type requests
ria.FAMILY_LOT_NUMBER,
ria.RIA_SKEY,
ria.REQUEST_SKEY,
ria.REQUEST_ID,
SUBSTR(Cns_Fn_Strip_Item_Id('',ria.request_skey,ria.ITEM_ID),1,1) ITEM_ID,
ria.REQUEST_ID || SUBSTR(Cns_Fn_Strip_Item_Id('',ria.request_skey,ria.ITEM_ID),1,1),
ria.ACTIVITY_TYPE_CD,
ria.STNDRD_ACTIVITY_ID,
ria.ACTUAL_END_DT_TM,
tst.GERMINATION_PCT,
tst.TEST_RANK,
tst.GERMINATION_VALUE,
tst.PEAK_VALUE_GRM_PCT || '/' || tst.PEAK_VALUE_NO_DAYS
FROM
CNS_T_RQST_ITM_ACTVTY ria,
CNS_T_TSC_TEST_RESULT tst,
CNS_T_TEST_REGIME regime
WHERE
tst.RIA_SKEY          = ria.RIA_SKEY
AND tst.CURRENT_TEST_IND  = -1
AND tst.STANDARD_TEST_IND = 0
AND tst.ACCEPT_RESULT_IND = -1
AND ria.FAMILY_LOT_NUMBER IS NOT NULL
AND ria.stndrd_ACTIVITY_ID = regime.SEEDLOT_TEST_CODE
Order By FAMILY_LOT_NUMBER ASC ,ACTUAL_END_DT_TM Desc;


-- CONSEP.FAMILYLOT_GERM_RESULTS source

CREATE OR REPLACE VIEW CONSEP.FAMILYLOT_GERM_RESULTS
(FAMILY_LOT_NUMBER,RIA_SKEY,ACTIVITY_TYPE_CD,TEST_RANK,GERMINATION_PCT,GV,PV,MOISTURE_PCT,PURITY_PCT,SEEDS_PER_GRAM,WEIGHT_PER_100,FUNGAL_STRING,GERM_TEST_END_DATE)
AS
SELECT
s.FAMILY_LOT_NUMBER,
g.RIA_SKEY,
g.ACTIVITY_TYPE_CD,
g.TEST_RANK,
g.GERMINATION_PCT,
g.GV,
g.PVPD,
mc.MOISTURE_PCT,
pur.PURITY_PCT,
spg.SEEDS_PER_GRAM,
spg.WEIGHT_PER_100,
cns_fn_fl_fungal_string(s.FAMILY_LOT_NUMBER),
g.ACTUAL_END_DT_TM
FROM
	CNS_T_FAMILY_LOT s,
	FAMILYLOT_GERM g,
	(SELECT r.FAMILY_LOT_NUMBER, MOISTURE_PCT
	FROM    cns_t_rqst_itm_actvty r,
			cns_t_tsc_test_result t
	WHERE   r.FAMILY_LOT_NUMBER is not null
	AND     r.ACTIVITY_TYPE_CD  = 'MC'
	AND		t.RIA_SKEY  = r.RIA_SKEY
	AND		t.STANDARD_TEST_IND = -1
	AND		t.ACCEPT_RESULT_IND = -1
	AND		t.TEST_COMPLETE_IND = -1
	AND		t.CURRENT_TEST_IND  = -1 ) mc,
	(SELECT r.FAMILY_LOT_NUMBER, PURITY_PCT
	FROM    cns_t_rqst_itm_actvty r,
			cns_t_tsc_test_result t
	WHERE   r.FAMILY_LOT_NUMBER is not null
	AND     r.ACTIVITY_TYPE_CD  = 'PUR'
	AND		t.RIA_SKEY  = r.RIA_SKEY
	AND		t.STANDARD_TEST_IND = -1
	AND		t.ACCEPT_RESULT_IND = -1
	AND		t.TEST_COMPLETE_IND = -1
	AND		t.CURRENT_TEST_IND  = -1 ) pur,
	(SELECT R.FAMILY_LOT_NUMBER, SEEDS_PER_GRAM, WEIGHT_PER_100
	FROM    cns_t_rqst_itm_actvty r,
			cns_t_tsc_test_result t
	WHERE   R.FAMILY_LOT_NUMBER is not null
	AND     r.ACTIVITY_TYPE_CD  = 'SPG'
	AND		t.RIA_SKEY  = r.RIA_SKEY
	AND		t.STANDARD_TEST_IND = -1
	AND		t.ACCEPT_RESULT_IND = -1
	AND		t.TEST_COMPLETE_IND = -1
	AND		t.CURRENT_TEST_IND  = -1 ) spg
WHERE
	g.FAMILY_LOT_NUMBER (+) = s.FAMILY_LOT_NUMBER
AND	mc.FAMILY_LOT_NUMBER (+) = s.FAMILY_LOT_NUMBER
AND	pur.FAMILY_LOT_NUMBER (+) = s.FAMILY_LOT_NUMBER
AND	spg.FAMILY_LOT_NUMBER (+) = s.FAMILY_LOT_NUMBER;


-- CONSEP.FAMILYLOT_LAST_WITHDRAWAL_DATE source

CREATE OR REPLACE VIEW CONSEP.FAMILYLOT_LAST_WITHDRAWAL_DATE
(FAMILY_LOT_NUMBER,REQUEST_TYPE_ST,WITHDRAWAL_DATE)
AS
SELECT
sl.FAMILY_LOT_NUMBER,
ria.REQUEST_TYPE_ST,
ria.ACTUAL_END_DT_TM
FROM
    (SELECT FAMILY_LOT_NUMBER, REQUEST_TYPE_ST, ACTUAL_END_DT_TM
     FROM   CNS_T_RQST_ITM_ACTVTY t1
     ,      CNS_T_SPAR_REQUEST t2
     WHERE  (FAMILY_LOT_NUMBER,ACTUAL_END_DT_TM)  IN (SELECT FAMILY_LOT_NUMBER,MAX(ACTUAL_END_DT_TM)
                                                  FROM CNS_T_RQST_ITM_ACTVTY
                                                  WHERE STNDRD_ACTIVITY_ID = 'WDS'
                                                  GROUP BY FAMILY_LOT_NUMBER)
     AND T1.REQUEST_SKEY = T2.REQUEST_SKEY
     AND STNDRD_ACTIVITY_ID = 'WDS') ria,
    CNS_T_FAMILY_LOT sl
WHERE   sl.FAMILY_LOT_NUMBER = ria.FAMILY_LOT_NUMBER (+);


-- CONSEP.FAMILYLOT_ORIG_BALANCE source

CREATE OR REPLACE VIEW CONSEP.FAMILYLOT_ORIG_BALANCE
(FAMILY_LOT_NUMBER,ORIG_BALANCE,FAM_ORIG_POT_TREES)
AS
Select FAMILY_LOT_NUMBER, QUANTITY_OF_SEED,
cns_fn_get_fam_tpg(FAMILY_LOT_NUMBER, QUANTITY_OF_SEED)
FROM CNS_T_FAMILYLOT_PHYSBAL
where OPENING_BAL_IND = -1
ORDER by FAMILY_LOT_NUMBER;


-- CONSEP.FAMILYLOT_RECEIPT source

CREATE OR REPLACE VIEW CONSEP.FAMILYLOT_RECEIPT
(FAMILY_LOT_NUMBER,SEEDLOT_RCVD_DT,CLCTN_VOLUME,NO_CONTAINERS,VOL_PER_CONTAINER)
AS
SELECT   a.family_lot_number, MIN (actual_arrvl_dt_tm) AS seedlot_rcvd_dt,
            ROUND (SUM (NVL (a.no_containers, 0) * NVL (vol_per_container, 0)),
                   4
                  ) AS clctn_volume,
            SUM (NVL (a.no_containers, 0)) AS no_containers,
            MAX (vol_per_container)
       FROM cns_t_ship_rcpt_item a, cns_t_family_lot b
      WHERE a.family_lot_number(+) = b.family_lot_number
            AND a.family_lot_number IS NOT NULL
   GROUP BY a.family_lot_number;


-- CONSEP.FAMILYLOT_STATUS source

CREATE OR REPLACE VIEW CONSEP.FAMILYLOT_STATUS
(FAMILY_LOT_NUMBER,STATUS)
AS
SELECT FAM.FAMILY_LOT_NUMBER, DECODE(BAL.CURRENT_BALANCE,0,'E','A')
FROM CNS_T_FAMILY_LOT FAM, FAMILYLOT_CURR_BALANCE BAL
where FAM.FAMILY_LOT_NUMBER = BAL.FAMILY_LOT_NUMBER;


-- CONSEP.FAMILYLOT_TESTING_CMPLT_DATE source

CREATE OR REPLACE VIEW CONSEP.FAMILYLOT_TESTING_CMPLT_DATE
(FAMILY_LOT_NUMBER,TESTING_CMPLT_DT)
AS
SELECT
	  ria.FAMILY_LOT_NUMBER,
	  MAX(ria.ACTUAL_END_DT_TM)
FROM    CNS_T_RQST_ITM_ACTVTY ria,
		CNS_T_TSC_TEST_RESULT tst
WHERE
		tst.RIA_SKEY          = ria.RIA_SKEY
AND 	tst.CURRENT_TEST_IND  = -1
AND 	tst.STANDARD_TEST_IND = -1
AND 	tst.ACCEPT_RESULT_IND = -1
AND		ria.FAMILY_LOT_NUMBER is not null
GROUP BY ria.FAMILY_LOT_NUMBER;


-- CONSEP.FAMILYLOT_TEST_RESULTS source

CREATE OR REPLACE VIEW CONSEP.FAMILYLOT_TEST_RESULTS
(FAMILY_LOT_NUMBER,RIA_SKEY,ACTIVITY_TYPE_CD,TEST_RANK,GERMINATION_PCT,GV,PV,MOISTURE_PCT,PURITY_PCT,SEEDS_PER_GRAM,FUNGAL_STRING,CAE_MC)
AS
SELECT ria.family_lot_number, ria.ria_skey, ria.activity_type_cd, tst.test_rank,
          tst.germination_pct,  tst.germination_value,
          tst.peak_value_grm_pct || '/' || tst.peak_value_no_days,
          cns_fn_get_fl_current_mc (ria.family_lot_number),
          cns_fn_get_fl_current_pur (ria.family_lot_number),
          cns_fn_get_fl_current_spg (ria.family_lot_number),
          cns_fn_fl_fungal_string (ria.family_lot_number),
          cns_fn_get_fl_current_cae_mc (ria.family_lot_number)
     FROM cns_t_rqst_itm_actvty ria,
          cns_t_tsc_test_result tst,
          cns_t_test_regime tr
    WHERE tst.ria_skey = ria.ria_skey
      AND tst.current_test_ind = -1
      AND tst.standard_test_ind = -1
      AND tst.accept_result_ind = -1
      AND ria.stndrd_activity_id = tr.seedlot_test_code
      AND SUBSTR (stndrd_activity_id, 1, 1) = 'G';


-- CONSEP.FAMILYLOT_TRANS_SUMMARY source

CREATE OR REPLACE VIEW CONSEP.FAMILYLOT_TRANS_SUMMARY
(FAMILY_LOT_NUMBER,TRANS_TOTAL)
AS
Select FAMILY_LOT_NUMBER, SUM(TRANSACTION_AMOUNT)
FROM CNS_T_FAMILYLOT_TRNSCTN
GROUP by FAMILY_LOT_NUMBER
ORDER by FAMILY_LOT_NUMBER;


-- CONSEP.FAMILY_FUNGAL_RESULTS_CURRENT source

CREATE OR REPLACE VIEW CONSEP.FAMILY_FUNGAL_RESULTS_CURRENT
(FAMILY_LOT_NUMBER,CAL,FUS,SIR)
AS
SELECT fl.family_lot_number,
          cns_fn_get_flcurrent_cal (fl.family_lot_number),
          cns_fn_get_flcurrent_fus (fl.family_lot_number),
          cns_fn_get_flcurrent_sir (fl.family_lot_number)
     FROM cns_t_family_lot fl;


-- CONSEP.FAMILY_SHIPMENT_RECEIPT_COUNT source

CREATE OR REPLACE VIEW CONSEP.FAMILY_SHIPMENT_RECEIPT_COUNT
(FAMILY_LOT_NUMBER,SHIPMENT_RECEIPT_COUNT,LATEST_SHIPMENT_RECEIPT,EXPECTED_SHIPMENT_RECEIPT,TOTAL_EXPECTED_SACKS,SHIPMENT_SACK_COUNT)
AS
SELECT   sl.family_lot_number, COUNT (sr.actual_arrvl_dt_tm),
            MAX (sr.actual_arrvl_dt_tm), MAX (esr.arrival_date),
            DECODE ((  MAX (esr.arrival_date)
                     - TRUNC (SYSDATE)
                     - (ABS (MAX (esr.arrival_date) - TRUNC (SYSDATE)))
                    ),
                    0, SUM (esr.no_of_containers),
                    NULL
                   ),
             fsr.shipment_sack_count
       FROM cns_t_family_lot sl,
            cns_t_ship_rcpt_item sr,
            cns_t_expected_receipt_content esr,
            FAMILY_SHIPMENT_RECEIPT_SACKS fsr
      WHERE sl.family_lot_number = sr.family_lot_number(+)
            AND sl.family_lot_number = esr.family_lot_number(+)
            AND SL.FAMILY_LOT_NUMBER = FSR.FAMILY_LOT_NUMBER(+)
   GROUP BY sl.family_lot_number, FSR.shipment_sack_count;


-- CONSEP.FAMILY_SHIPMENT_RECEIPT_SACKS source

CREATE OR REPLACE VIEW CONSEP.FAMILY_SHIPMENT_RECEIPT_SACKS
(FAMILY_LOT_NUMBER,SHIPMENT_SACK_COUNT,HL_RCVD)
AS
(SELECT   family_lot_number,
             SUM (NVL (no_containers, 0)) shipment_sack_count,
             SUM (NVL (no_containers, 0) * nvl(vol_per_container,0))
        FROM cns_t_ship_rcpt_item
        where family_lot_number is not null
    GROUP BY family_lot_number);


-- CONSEP.FAM_EXP_SHIPMENT_VOLUME source

CREATE OR REPLACE VIEW CONSEP.FAM_EXP_SHIPMENT_VOLUME
(FAMILY_LOT_NUMBER,EXP_FAM_VOLUME,EXP_FAM_SACKS)
AS
SELECT   sl.family_lot_number, SUM (esr.VOLUME_OF_CONE), SUM(esr.NO_OF_CONTAINERS)
        FROM cns_t_family_lot sl,
            cns_t_expected_receipt_content esr,
            FAMILY_SHIPMENT_RECEIPT_COUNT fsr
            WHERE sl.family_lot_number = esr.family_lot_number(+)
                  and sl.family_lot_number = fsr.FAMILY_LOT_NUMBER
                  and fsr.LATEST_SHIPMENT_RECEIPT is null
   GROUP BY sl.family_lot_number;


-- CONSEP.FIRST_TRANS_DATE source

CREATE OR REPLACE VIEW CONSEP.FIRST_TRANS_DATE
(SEEDLOT_NUMBER,CLIENT_NUMBER,CLIENT_LOCN_CODE,FIRST_TRANSACTION)
AS
SELECT
     A.SEEDLOT_NUMBER, A.CLIENT_NUMBER, A.CLIENT_LOCN_CODE,
	  to_CHAR(MIN( Trunc(A.ENTRY_TIMESTAMP)), 'YYYY/MM/DD')
FROM CNS_T_SEEDLOT_TRNSCTN A
GROUP BY SEEDLOT_NUMBER,CLIENT_NUMBER, CLIENT_LOCN_CODE;


-- CONSEP.FISCAL_YEAR_CONSEP source

CREATE OR REPLACE VIEW CONSEP.FISCAL_YEAR_CONSEP
(FISCAL_YEAR,QNAME)
AS
select 'FY' || ry,
'FY' || ry || 'Q' || QNAME
from
(select request_yr+1  ry from cns_t_spar_request
where request_yr is not null
group by request_yr) ryy,
(select ROWNUM  QNAME from all_objects where rownum < 5)
order by 1,2;


-- CONSEP.FISCAL_YEAR_CONSEP_RT source

CREATE OR REPLACE VIEW CONSEP.FISCAL_YEAR_CONSEP_RT
(FISCAL_YEAR,QNAME,REQ_TYPE)
AS
SELECT   'FY' || ry, 'FY' || ry || 'Q' || qname, rt
       FROM
--(select request_yr+1 ry, A.REQUEST_TYPE_ST RT  from cns_t_spar_request A
            (SELECT   request_yr + 1 ry
                 FROM cns_t_spar_request a
                WHERE request_yr IS NOT NULL
             GROUP BY request_yr) ryy,
            (SELECT code_argument rt
               FROM cns_t_code_subset_tbl
              WHERE code_subset_name = 'REQUEST_TYPE_ST'
             UNION
             SELECT 'STK'
               FROM DUAL
             UNION
             SELECT 'MOV'
               FROM DUAL

               ) rty,
            (SELECT ROWNUM qname
               FROM all_objects
              WHERE ROWNUM < 5)
   ORDER BY 1, 2, 3;


-- CONSEP.FISCAL_YEAR_CONSEP_RT_SP_CL source

CREATE OR REPLACE VIEW CONSEP.FISCAL_YEAR_CONSEP_RT_SP_CL
(FISCAL_YEAR,QNAME,REQ_TYPE,SPECIES,GEN_CLASS)
AS
select 'FY' || ry,
'FY' || ry || 'Q' || QNAME,
RT,
SP,
CL
from
(select request_yr+1 ry   from cns_t_spar_request A
 where request_yr is not null
 group by request_yr) ryy,
--
(select CODE_ARGUMENT RT from CNS_T_CODE_SUBSET_TBL where
 CODE_SUBSET_NAME = 'REQUEST_TYPE_ST'
 GROUP by code_argument) RTY,
--
(select c.VEGETATION_ST SP, c.GENETIC_CLASS_CODE||DECODE(NVL(c.SUPERIOR_PRVNC_IND,0),-1,'+',' ') CL
 from cns_t_spar_request A, cns_t_request_seedlot B, cns_t_seedlot c
where request_yr is not null
and a.REQUEST_SKEY = b.REQUEST_SKEY
And b.SEEDLOT_NUMBER = c.SEEDLOT_NUMBER
group by c.vegetation_st, c.GENETIC_CLASS_CODE||DECODE(NVL(c.SUPERIOR_PRVNC_IND,0),-1,'+',' ')) RTYSG,
(select ROWNUM  QNAME from all_objects where rownum < 5)
order by 1,2;


-- CONSEP.FISCAL_YEAR_CONSEP_RT_SP_CL_OR source

CREATE OR REPLACE VIEW CONSEP.FISCAL_YEAR_CONSEP_RT_SP_CL_OR
(FISCAL_YEAR,QNAME,REQ_TYPE,SPECIES,GEN_CLASS)
AS
select 'FY' || ry,
'FY' || ry || 'Q' || QNAME,
RT,
SP,
CL
from
(select request_yr+1 ry, A.REQUEST_TYPE_ST RT,
c.VEGETATION_ST SP, c.GENETIC_CLASS_CODE||DECODE(NVL(c.SUPERIOR_PRVNC_IND,0),-1,'+',' ') CL
 from cns_t_spar_request A, cns_t_request_seedlot B, cns_t_seedlot c
where request_yr is not null
and a.REQUEST_SKEY = b.REQUEST_SKEY
And b.SEEDLOT_NUMBER = c.SEEDLOT_NUMBER
group by request_yr, REQUEST_TYPE_ST, c.vegetation_st, c.GENETIC_CLASS_CODE||DECODE(NVL(c.SUPERIOR_PRVNC_IND,0),-1,'+',' ')) ryy,
(select ROWNUM  QNAME from all_objects where rownum < 5)
order by 1,2;


-- CONSEP.FL_CURRENT_CSP_MCK source

CREATE OR REPLACE VIEW CONSEP.FL_CURRENT_CSP_MCK
(FAMILY_LOT_NUMBER,CUR_CSP_MCK,CUR_CSP_MCK_DATE)
AS
(SELECT a.family_lot_number,
           CNS_FN_GET_CUR_CSP_MCK_F  (a.family_lot_number) cur_csp_mck,
           cns_fn_get_cur_csp_mck__F_date (a.family_lot_number) cur_csp_mck_date
      FROM cns_t_faMily_lot a);


-- CONSEP.FL_FIRST_CSP_MCK source

CREATE OR REPLACE VIEW CONSEP.FL_FIRST_CSP_MCK
(FAMILY_LOT_NUMBER,FIRST_CSP_MCK,FIRST_CSP_MCK_DATE)
AS
(SELECT a.family_lot_number,
           cns_fn_get_fir_csp_mck_f (a.family_lot_number) first_csp_mck,
           cns_fn_get_fir_csp_mck__f_date
                                        (a.family_lot_number)
                                                             first_csp_mck_date
      FROM cns_t_family_lot a);


-- CONSEP.FOREST_CLIENT source

CREATE OR REPLACE VIEW CONSEP.FOREST_CLIENT
(CLIENT_NUMBER,CLIENT_NAME,LEGAL_FIRST_NAME,LEGAL_MIDDLE_NAME,CLIENT_STATUS_CODE,CLIENT_TYPE_CODE,CLIENT_ACRONYM,REVISION_COUNT)
AS
SELECT "CLIENT_NUMBER","CLIENT_NAME","LEGAL_FIRST_NAME","LEGAL_MIDDLE_NAME","CLIENT_STATUS_CODE","CLIENT_TYPE_CODE","CLIENT_ACRONYM","REVISION_COUNT" from THE.FOREST_CLIENT;